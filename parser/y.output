Terminals unused in grammar

    RECEIVE
    VARIADIC_PARAM
    SELECTOR
    LOGICAL_NOT
    WHILE
    SWITCH
    CASE
    DEFAULT
    BOOL_TYPE
    CHAN
    CONST
    DEFER
    FALLTHROUGH
    GO
    GOTO
    INTERFACE
    MAP
    RANGE
    SELECT
    STRUCT
    TYPE
    LSQPAREN
    RSQPAREN
    COLON
    MULTI_LINE_COMMENT


State 31 conflicts: 19 shift/reduce, 1 reduce/reduce
State 41 conflicts: 8 shift/reduce
State 45 conflicts: 8 shift/reduce
State 58 conflicts: 18 shift/reduce, 1 reduce/reduce
State 62 conflicts: 1 shift/reduce
State 67 conflicts: 18 shift/reduce, 1 reduce/reduce
State 68 conflicts: 18 shift/reduce, 1 reduce/reduce
State 72 conflicts: 18 shift/reduce, 1 reduce/reduce
State 73 conflicts: 18 shift/reduce, 1 reduce/reduce
State 74 conflicts: 18 shift/reduce, 1 reduce/reduce
State 75 conflicts: 18 shift/reduce, 1 reduce/reduce
State 76 conflicts: 18 shift/reduce, 1 reduce/reduce
State 77 conflicts: 18 shift/reduce, 1 reduce/reduce
State 78 conflicts: 18 shift/reduce, 1 reduce/reduce
State 79 conflicts: 18 shift/reduce, 1 reduce/reduce
State 175 conflicts: 19 shift/reduce
State 176 conflicts: 19 shift/reduce
State 177 conflicts: 19 shift/reduce
State 178 conflicts: 19 shift/reduce
State 179 conflicts: 19 shift/reduce
State 180 conflicts: 19 shift/reduce
State 181 conflicts: 19 shift/reduce
State 182 conflicts: 19 shift/reduce
State 183 conflicts: 19 shift/reduce
State 184 conflicts: 19 shift/reduce
State 185 conflicts: 19 shift/reduce
State 186 conflicts: 19 shift/reduce
State 187 conflicts: 19 shift/reduce
State 188 conflicts: 19 shift/reduce
State 189 conflicts: 19 shift/reduce
State 190 conflicts: 19 shift/reduce
State 191 conflicts: 19 shift/reduce
State 192 conflicts: 19 shift/reduce
State 193 conflicts: 19 shift/reduce


Grammar

    0 $accept: program $end

    1 program: PackageClause ImportDecls function_declaration

    2 PackageClause: PACKAGE PackageName

    3 PackageName: IDENTIFIER

    4 ImportDecls: ImportDecls ImportDecl
    5            | ε

    6 ImportDecl: IMPORT ImportSpecs
    7           | IMPORT LPAREN ImportSpecs RPAREN

    8 ImportSpecs: ImportSpecs ImportSpec
    9            | ε

   10 ImportSpec: '.' ImportPath
   11           | PackageName ImportPath
   12           | ImportPath

   13 ImportPath: STRING

   14 var_declarations: VAR declaration

   15 declaration: identifier_list
   16            | identifier_list ASSIGN expression_list
   17            | IDENTIFIER INT_TYPE ASSIGN expression_list
   18            | IDENTIFIER INT_TYPE
   19            | IDENTIFIER STRING_TYPE ASSIGN expression_list
   20            | IDENTIFIER STRING_TYPE

   21 identifier_list: IDENTIFIER
   22                | IDENTIFIER COMMA identifier_list

   23 function_declaration: FUNCTION IDENTIFIER signature block_stmt

   24 signature: LPAREN parameters RPAREN
   25          | LPAREN RPAREN

   26 parameters: parameter_unit
   27           | parameter_unit COMMA parameters

   28 parameter_unit: identifier_list IDENTIFIER
   29               | identifier_list LPAREN IDENTIFIER RPAREN
   30               | identifier_list bracket_list IDENTIFIER

   31 bracket: '[' INTEGER ']'
   32        | '[' ']'

   33 bracket_list: bracket
   34             | bracket bracket_list

   35 expression_list: expression
   36                | expression COMMA expression_list

   37 expression: primary_expression
   38           | binary_op
   39           | builtin

   40 primary_expression: IDENTIFIER
   41                   | literal
   42                   | LPAREN expression RPAREN
   43                   | primary_expression LPAREN expression_list RPAREN
   44                   | primary_expression LPAREN RPAREN
   45                   | primary_expression '.' IDENTIFIER
   46                   | primary_expression '[' expression ']'

   47 literal: INTEGER
   48        | STRING
   49        | FLOAT
   50        | BOOLEAN

   51 binary_op: expression LOGICAL_OR expression
   52          | expression LOGICAL_AND expression
   53          | expression EQUAL_EQUAL expression
   54          | expression NOT_EQUAL expression
   55          | expression LESS_THAN_OR_EQUAL expression
   56          | expression GREATER_THAN_OR_EQUAL expression
   57          | expression LESS_THAN expression
   58          | expression GREATER_THAN expression
   59          | expression PLUS expression
   60          | expression MINUS expression
   61          | expression BITWISE_OR expression
   62          | expression BITWISE_XOR expression
   63          | expression TIMES expression
   64          | expression DIVIDE expression
   65          | expression MODULO expression
   66          | expression RIGHT_SHIFT expression
   67          | expression LEFT_SHIFT expression
   68          | expression BITWISE_AND expression
   69          | expression BIT_CLEAR expression

   70 builtin: APPEND LPAREN expression COMMA expression RPAREN
   71        | LEN LPAREN expression RPAREN

   72 statement: declaration_stmt statement
   73          | simple_stmt statement
   74          | return_stmt statement
   75          | break_stmt statement
   76          | continue_stmt statement
   77          | block_stmt statement
   78          | if_stmt statement
   79          | for_stmt statement
   80          | print_stmt statement
   81          | println_stmt statement
   82          | COMMENT statement
   83          | ε

   84 declaration_stmt: var_declarations

   85 simple_stmt: ε
   86            | inc_dec_stmt
   87            | assignment
   88            | short_variable_declaration

   89 inc_dec_stmt: expression INCREMENT
   90             | expression DECREMENT

   91 assignment: expression_list ASSIGN expression_list
   92           | expression assign_op expression

   93 assign_op: add_op_eq
   94          | mul_op_eq

   95 add_op_eq: ADD_ASSIGN
   96          | SUB_ASSIGN
   97          | OR_ASSIGN
   98          | XOR_ASSIGN

   99 mul_op_eq: MUL_ASSIGN
  100          | DIV_ASSIGN
  101          | MOD_ASSIGN
  102          | LEFT_SHIFT_ASSIGN
  103          | RIGHT_SHIFT_ASSIGN
  104          | AND_ASSIGN
  105          | CLEAR_ASSIGN

  106 short_variable_declaration: expression_list SHORT_VAR expression_list

  107 return_stmt: RETURN
  108            | RETURN expression

  109 break_stmt: BREAK

  110 continue_stmt: CONTINUE

  111 block_stmt: LBRACE statement RBRACE
  112           | LBRACE RBRACE

  113 if_stmt: IF expression block_stmt
  114        | IF simple_stmt expression block_stmt
  115        | IF simple_stmt expression block_stmt ELSE if_stmt
  116        | IF simple_stmt expression block_stmt ELSE block_stmt
  117        | IF expression block_stmt ELSE if_stmt
  118        | IF expression block_stmt ELSE block_stmt

  119 for_stmt: FOR block_stmt
  120         | FOR expression block_stmt
  121         | FOR for_clause block_stmt

  122 for_clause: simple_stmt SEMICOLON simple_stmt
  123           | simple_stmt SEMICOLON expression SEMICOLON simple_stmt

  124 print_stmt: PRINT LPAREN expression_list RPAREN
  125           | PRINT LPAREN RPAREN

  126 println_stmt: PRINTLN LPAREN expression_list RPAREN
  127             | PRINTLN LPAREN RPAREN


Terminals, with rules where they appear

    $end (0) 0
    '.' (46) 10 45
    '[' (91) 31 32 46
    ']' (93) 31 32 46
    error (256)
    PLUS (258) 59
    MINUS (259) 60
    TIMES (260) 63
    DIVIDE (261) 64
    ASSIGN (262) 16 17 19 91
    MODULO (263) 65
    BITWISE_AND (264) 68
    BITWISE_OR (265) 61
    BITWISE_XOR (266) 62
    BIT_CLEAR (267) 69
    LEFT_SHIFT (268) 67
    RIGHT_SHIFT (269) 66
    ADD_ASSIGN (270) 95
    SUB_ASSIGN (271) 96
    MUL_ASSIGN (272) 99
    DIV_ASSIGN (273) 100
    MOD_ASSIGN (274) 101
    AND_ASSIGN (275) 104
    OR_ASSIGN (276) 97
    XOR_ASSIGN (277) 98
    LEFT_SHIFT_ASSIGN (278) 102
    RIGHT_SHIFT_ASSIGN (279) 103
    INCREMENT (280) 89
    DECREMENT (281) 90
    RECEIVE (282)
    CLEAR_ASSIGN (283) 105
    SHORT_VAR (284) 106
    VARIADIC_PARAM (285)
    SELECTOR (286)
    EQUAL_EQUAL (287) 53
    NOT_EQUAL (288) 54
    LESS_THAN (289) 57
    LESS_THAN_OR_EQUAL (290) 55
    GREATER_THAN (291) 58
    GREATER_THAN_OR_EQUAL (292) 56
    LOGICAL_AND (293) 52
    LOGICAL_OR (294) 51
    LOGICAL_NOT (295)
    IF (296) 113 114 115 116 117 118
    ELSE (297) 115 116 117 118
    WHILE (298)
    FOR (299) 119 120 121
    SWITCH (300)
    CASE (301)
    DEFAULT (302)
    BREAK (303) 109
    CONTINUE (304) 110
    RETURN (305) 107 108
    VAR (306) 14
    INT_TYPE (307) 17 18
    BOOL_TYPE (308)
    STRING_TYPE (309) 19 20
    IMPORT (310) 6 7
    FUNCTION (311) 23
    APPEND (312) 70
    LEN (313) 71
    PRINT (314) 124 125
    PRINTLN (315) 126 127
    PACKAGE (316) 2
    CHAN (317)
    CONST (318)
    DEFER (319)
    FALLTHROUGH (320)
    GO (321)
    GOTO (322)
    INTERFACE (323)
    MAP (324)
    RANGE (325)
    SELECT (326)
    STRUCT (327)
    TYPE (328)
    LPAREN (329) 7 24 25 29 42 43 44 70 71 124 125 126 127
    RPAREN (330) 7 24 25 29 42 43 44 70 71 124 125 126 127
    LBRACE (331) 111 112
    RBRACE (332) 111 112
    LSQPAREN (333)
    RSQPAREN (334)
    SEMICOLON (335) 122 123
    COMMA (336) 22 27 36 70
    COLON (337)
    BOOLEAN (338) 50
    IDENTIFIER (339) 3 17 18 19 20 21 22 23 28 29 30 40 45
    INTEGER (340) 31 47
    STRING (341) 13 48
    FLOAT (342) 49
    COMMENT (343) 82
    MULTI_LINE_COMMENT (344)


Nonterminals, with rules where they appear

    $accept (93)
        on left: 0
    program (94)
        on left: 1
        on right: 0
    PackageClause (95)
        on left: 2
        on right: 1
    PackageName (96)
        on left: 3
        on right: 2 11
    ImportDecls (97)
        on left: 4 5
        on right: 1 4
    ImportDecl (98)
        on left: 6 7
        on right: 4
    ImportSpecs (99)
        on left: 8 9
        on right: 6 7 8
    ImportSpec (100)
        on left: 10 11 12
        on right: 8
    ImportPath (101)
        on left: 13
        on right: 10 11 12
    var_declarations (102)
        on left: 14
        on right: 84
    declaration (103)
        on left: 15 16 17 18 19 20
        on right: 14
    identifier_list (104)
        on left: 21 22
        on right: 15 16 22 28 29 30
    function_declaration (105)
        on left: 23
        on right: 1
    signature (106)
        on left: 24 25
        on right: 23
    parameters (107)
        on left: 26 27
        on right: 24 27
    parameter_unit (108)
        on left: 28 29 30
        on right: 26 27
    bracket (109)
        on left: 31 32
        on right: 33 34
    bracket_list (110)
        on left: 33 34
        on right: 30 34
    expression_list (111)
        on left: 35 36
        on right: 16 17 19 36 43 91 106 124 126
    expression (112)
        on left: 37 38 39
        on right: 35 36 42 46 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 89 90 92 108 113 114 115 116 117 118 120 123
    primary_expression (113)
        on left: 40 41 42 43 44 45 46
        on right: 37 43 44 45 46
    literal (114)
        on left: 47 48 49 50
        on right: 41
    binary_op (115)
        on left: 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69
        on right: 38
    builtin (116)
        on left: 70 71
        on right: 39
    statement (117)
        on left: 72 73 74 75 76 77 78 79 80 81 82 83
        on right: 72 73 74 75 76 77 78 79 80 81 82 111
    declaration_stmt (118)
        on left: 84
        on right: 72
    simple_stmt (119)
        on left: 85 86 87 88
        on right: 73 114 115 116 122 123
    inc_dec_stmt (120)
        on left: 89 90
        on right: 86
    assignment (121)
        on left: 91 92
        on right: 87
    assign_op (122)
        on left: 93 94
        on right: 92
    add_op_eq (123)
        on left: 95 96 97 98
        on right: 93
    mul_op_eq (124)
        on left: 99 100 101 102 103 104 105
        on right: 94
    short_variable_declaration (125)
        on left: 106
        on right: 88
    return_stmt (126)
        on left: 107 108
        on right: 74
    break_stmt (127)
        on left: 109
        on right: 75
    continue_stmt (128)
        on left: 110
        on right: 76
    block_stmt (129)
        on left: 111 112
        on right: 23 77 113 114 115 116 117 118 119 120 121
    if_stmt (130)
        on left: 113 114 115 116 117 118
        on right: 78 115 117
    for_stmt (131)
        on left: 119 120 121
        on right: 79
    for_clause (132)
        on left: 122 123
        on right: 121
    print_stmt (133)
        on left: 124 125
        on right: 80
    println_stmt (134)
        on left: 126 127
        on right: 81


State 0

    0 $accept: • program $end

    PACKAGE  shift, and go to state 1

    program        go to state 2
    PackageClause  go to state 3


State 1

    2 PackageClause: PACKAGE • PackageName

    IDENTIFIER  shift, and go to state 4

    PackageName  go to state 5


State 2

    0 $accept: program • $end

    $end  shift, and go to state 6


State 3

    1 program: PackageClause • ImportDecls function_declaration

    $default  reduce using rule 5 (ImportDecls)

    ImportDecls  go to state 7


State 4

    3 PackageName: IDENTIFIER •

    $default  reduce using rule 3 (PackageName)


State 5

    2 PackageClause: PACKAGE PackageName •

    $default  reduce using rule 2 (PackageClause)


State 6

    0 $accept: program $end •

    $default  accept


State 7

    1 program: PackageClause ImportDecls • function_declaration
    4 ImportDecls: ImportDecls • ImportDecl

    IMPORT    shift, and go to state 8
    FUNCTION  shift, and go to state 9

    ImportDecl            go to state 10
    function_declaration  go to state 11


State 8

    6 ImportDecl: IMPORT • ImportSpecs
    7           | IMPORT • LPAREN ImportSpecs RPAREN

    LPAREN  shift, and go to state 12

    $default  reduce using rule 9 (ImportSpecs)

    ImportSpecs  go to state 13


State 9

   23 function_declaration: FUNCTION • IDENTIFIER signature block_stmt

    IDENTIFIER  shift, and go to state 14


State 10

    4 ImportDecls: ImportDecls ImportDecl •

    $default  reduce using rule 4 (ImportDecls)


State 11

    1 program: PackageClause ImportDecls function_declaration •

    $default  reduce using rule 1 (program)


State 12

    7 ImportDecl: IMPORT LPAREN • ImportSpecs RPAREN

    $default  reduce using rule 9 (ImportSpecs)

    ImportSpecs  go to state 15


State 13

    6 ImportDecl: IMPORT ImportSpecs •
    8 ImportSpecs: ImportSpecs • ImportSpec

    IDENTIFIER  shift, and go to state 4
    STRING      shift, and go to state 16
    '.'         shift, and go to state 17

    $default  reduce using rule 6 (ImportDecl)

    PackageName  go to state 18
    ImportSpec   go to state 19
    ImportPath   go to state 20


State 14

   23 function_declaration: FUNCTION IDENTIFIER • signature block_stmt

    LPAREN  shift, and go to state 21

    signature  go to state 22


State 15

    7 ImportDecl: IMPORT LPAREN ImportSpecs • RPAREN
    8 ImportSpecs: ImportSpecs • ImportSpec

    RPAREN      shift, and go to state 23
    IDENTIFIER  shift, and go to state 4
    STRING      shift, and go to state 16
    '.'         shift, and go to state 17

    PackageName  go to state 18
    ImportSpec   go to state 19
    ImportPath   go to state 20


State 16

   13 ImportPath: STRING •

    $default  reduce using rule 13 (ImportPath)


State 17

   10 ImportSpec: '.' • ImportPath

    STRING  shift, and go to state 16

    ImportPath  go to state 24


State 18

   11 ImportSpec: PackageName • ImportPath

    STRING  shift, and go to state 16

    ImportPath  go to state 25


State 19

    8 ImportSpecs: ImportSpecs ImportSpec •

    $default  reduce using rule 8 (ImportSpecs)


State 20

   12 ImportSpec: ImportPath •

    $default  reduce using rule 12 (ImportSpec)


State 21

   24 signature: LPAREN • parameters RPAREN
   25          | LPAREN • RPAREN

    RPAREN      shift, and go to state 26
    IDENTIFIER  shift, and go to state 27

    identifier_list  go to state 28
    parameters       go to state 29
    parameter_unit   go to state 30


State 22

   23 function_declaration: FUNCTION IDENTIFIER signature • block_stmt

    LBRACE  shift, and go to state 31

    block_stmt  go to state 32


State 23

    7 ImportDecl: IMPORT LPAREN ImportSpecs RPAREN •

    $default  reduce using rule 7 (ImportDecl)


State 24

   10 ImportSpec: '.' ImportPath •

    $default  reduce using rule 10 (ImportSpec)


State 25

   11 ImportSpec: PackageName ImportPath •

    $default  reduce using rule 11 (ImportSpec)


State 26

   25 signature: LPAREN RPAREN •

    $default  reduce using rule 25 (signature)


State 27

   21 identifier_list: IDENTIFIER •
   22                | IDENTIFIER • COMMA identifier_list

    COMMA  shift, and go to state 33

    $default  reduce using rule 21 (identifier_list)


State 28

   28 parameter_unit: identifier_list • IDENTIFIER
   29               | identifier_list • LPAREN IDENTIFIER RPAREN
   30               | identifier_list • bracket_list IDENTIFIER

    LPAREN      shift, and go to state 34
    IDENTIFIER  shift, and go to state 35
    '['         shift, and go to state 36

    bracket       go to state 37
    bracket_list  go to state 38


State 29

   24 signature: LPAREN parameters • RPAREN

    RPAREN  shift, and go to state 39


State 30

   26 parameters: parameter_unit •
   27           | parameter_unit • COMMA parameters

    COMMA  shift, and go to state 40

    $default  reduce using rule 26 (parameters)


State 31

  111 block_stmt: LBRACE • statement RBRACE
  112           | LBRACE • RBRACE

    IF          shift, and go to state 41
    FOR         shift, and go to state 42
    BREAK       shift, and go to state 43
    CONTINUE    shift, and go to state 44
    RETURN      shift, and go to state 45
    VAR         shift, and go to state 46
    APPEND      shift, and go to state 47
    LEN         shift, and go to state 48
    PRINT       shift, and go to state 49
    PRINTLN     shift, and go to state 50
    LPAREN      shift, and go to state 51
    LBRACE      shift, and go to state 31
    RBRACE      shift, and go to state 52
    BOOLEAN     shift, and go to state 53
    IDENTIFIER  shift, and go to state 54
    INTEGER     shift, and go to state 55
    STRING      shift, and go to state 56
    FLOAT       shift, and go to state 57
    COMMENT     shift, and go to state 58

    IF          [reduce using rule 85 (simple_stmt)]
    FOR         [reduce using rule 85 (simple_stmt)]
    BREAK       [reduce using rule 85 (simple_stmt)]
    CONTINUE    [reduce using rule 85 (simple_stmt)]
    RETURN      [reduce using rule 85 (simple_stmt)]
    VAR         [reduce using rule 85 (simple_stmt)]
    APPEND      [reduce using rule 85 (simple_stmt)]
    LEN         [reduce using rule 85 (simple_stmt)]
    PRINT       [reduce using rule 85 (simple_stmt)]
    PRINTLN     [reduce using rule 85 (simple_stmt)]
    LPAREN      [reduce using rule 85 (simple_stmt)]
    LBRACE      [reduce using rule 85 (simple_stmt)]
    RBRACE      [reduce using rule 83 (statement)]
    RBRACE      [reduce using rule 85 (simple_stmt)]
    BOOLEAN     [reduce using rule 85 (simple_stmt)]
    IDENTIFIER  [reduce using rule 85 (simple_stmt)]
    INTEGER     [reduce using rule 85 (simple_stmt)]
    STRING      [reduce using rule 85 (simple_stmt)]
    FLOAT       [reduce using rule 85 (simple_stmt)]
    COMMENT     [reduce using rule 85 (simple_stmt)]

    var_declarations            go to state 59
    expression_list             go to state 60
    expression                  go to state 61
    primary_expression          go to state 62
    literal                     go to state 63
    binary_op                   go to state 64
    builtin                     go to state 65
    statement                   go to state 66
    declaration_stmt            go to state 67
    simple_stmt                 go to state 68
    inc_dec_stmt                go to state 69
    assignment                  go to state 70
    short_variable_declaration  go to state 71
    return_stmt                 go to state 72
    break_stmt                  go to state 73
    continue_stmt               go to state 74
    block_stmt                  go to state 75
    if_stmt                     go to state 76
    for_stmt                    go to state 77
    print_stmt                  go to state 78
    println_stmt                go to state 79


State 32

   23 function_declaration: FUNCTION IDENTIFIER signature block_stmt •

    $default  reduce using rule 23 (function_declaration)


State 33

   22 identifier_list: IDENTIFIER COMMA • identifier_list

    IDENTIFIER  shift, and go to state 27

    identifier_list  go to state 80


State 34

   29 parameter_unit: identifier_list LPAREN • IDENTIFIER RPAREN

    IDENTIFIER  shift, and go to state 81


State 35

   28 parameter_unit: identifier_list IDENTIFIER •

    $default  reduce using rule 28 (parameter_unit)


State 36

   31 bracket: '[' • INTEGER ']'
   32        | '[' • ']'

    INTEGER  shift, and go to state 82
    ']'      shift, and go to state 83


State 37

   33 bracket_list: bracket •
   34             | bracket • bracket_list

    '['  shift, and go to state 36

    $default  reduce using rule 33 (bracket_list)

    bracket       go to state 37
    bracket_list  go to state 84


State 38

   30 parameter_unit: identifier_list bracket_list • IDENTIFIER

    IDENTIFIER  shift, and go to state 85


State 39

   24 signature: LPAREN parameters RPAREN •

    $default  reduce using rule 24 (signature)


State 40

   27 parameters: parameter_unit COMMA • parameters

    IDENTIFIER  shift, and go to state 27

    identifier_list  go to state 28
    parameters       go to state 86
    parameter_unit   go to state 30


State 41

  113 if_stmt: IF • expression block_stmt
  114        | IF • simple_stmt expression block_stmt
  115        | IF • simple_stmt expression block_stmt ELSE if_stmt
  116        | IF • simple_stmt expression block_stmt ELSE block_stmt
  117        | IF • expression block_stmt ELSE if_stmt
  118        | IF • expression block_stmt ELSE block_stmt

    APPEND      shift, and go to state 47
    LEN         shift, and go to state 48
    LPAREN      shift, and go to state 51
    BOOLEAN     shift, and go to state 53
    IDENTIFIER  shift, and go to state 54
    INTEGER     shift, and go to state 55
    STRING      shift, and go to state 56
    FLOAT       shift, and go to state 57

    APPEND      [reduce using rule 85 (simple_stmt)]
    LEN         [reduce using rule 85 (simple_stmt)]
    LPAREN      [reduce using rule 85 (simple_stmt)]
    BOOLEAN     [reduce using rule 85 (simple_stmt)]
    IDENTIFIER  [reduce using rule 85 (simple_stmt)]
    INTEGER     [reduce using rule 85 (simple_stmt)]
    STRING      [reduce using rule 85 (simple_stmt)]
    FLOAT       [reduce using rule 85 (simple_stmt)]

    expression_list             go to state 60
    expression                  go to state 87
    primary_expression          go to state 62
    literal                     go to state 63
    binary_op                   go to state 64
    builtin                     go to state 65
    simple_stmt                 go to state 88
    inc_dec_stmt                go to state 69
    assignment                  go to state 70
    short_variable_declaration  go to state 71


State 42

  119 for_stmt: FOR • block_stmt
  120         | FOR • expression block_stmt
  121         | FOR • for_clause block_stmt

    APPEND      shift, and go to state 47
    LEN         shift, and go to state 48
    LPAREN      shift, and go to state 51
    LBRACE      shift, and go to state 31
    BOOLEAN     shift, and go to state 53
    IDENTIFIER  shift, and go to state 54
    INTEGER     shift, and go to state 55
    STRING      shift, and go to state 56
    FLOAT       shift, and go to state 57

    $default  reduce using rule 85 (simple_stmt)

    expression_list             go to state 60
    expression                  go to state 89
    primary_expression          go to state 62
    literal                     go to state 63
    binary_op                   go to state 64
    builtin                     go to state 65
    simple_stmt                 go to state 90
    inc_dec_stmt                go to state 69
    assignment                  go to state 70
    short_variable_declaration  go to state 71
    block_stmt                  go to state 91
    for_clause                  go to state 92


State 43

  109 break_stmt: BREAK •

    $default  reduce using rule 109 (break_stmt)


State 44

  110 continue_stmt: CONTINUE •

    $default  reduce using rule 110 (continue_stmt)


State 45

  107 return_stmt: RETURN •
  108            | RETURN • expression

    APPEND      shift, and go to state 47
    LEN         shift, and go to state 48
    LPAREN      shift, and go to state 51
    BOOLEAN     shift, and go to state 53
    IDENTIFIER  shift, and go to state 54
    INTEGER     shift, and go to state 55
    STRING      shift, and go to state 56
    FLOAT       shift, and go to state 57

    APPEND      [reduce using rule 107 (return_stmt)]
    LEN         [reduce using rule 107 (return_stmt)]
    LPAREN      [reduce using rule 107 (return_stmt)]
    BOOLEAN     [reduce using rule 107 (return_stmt)]
    IDENTIFIER  [reduce using rule 107 (return_stmt)]
    INTEGER     [reduce using rule 107 (return_stmt)]
    STRING      [reduce using rule 107 (return_stmt)]
    FLOAT       [reduce using rule 107 (return_stmt)]
    $default    reduce using rule 107 (return_stmt)

    expression          go to state 93
    primary_expression  go to state 62
    literal             go to state 63
    binary_op           go to state 64
    builtin             go to state 65


State 46

   14 var_declarations: VAR • declaration

    IDENTIFIER  shift, and go to state 94

    declaration      go to state 95
    identifier_list  go to state 96


State 47

   70 builtin: APPEND • LPAREN expression COMMA expression RPAREN

    LPAREN  shift, and go to state 97


State 48

   71 builtin: LEN • LPAREN expression RPAREN

    LPAREN  shift, and go to state 98


State 49

  124 print_stmt: PRINT • LPAREN expression_list RPAREN
  125           | PRINT • LPAREN RPAREN

    LPAREN  shift, and go to state 99


State 50

  126 println_stmt: PRINTLN • LPAREN expression_list RPAREN
  127             | PRINTLN • LPAREN RPAREN

    LPAREN  shift, and go to state 100


State 51

   42 primary_expression: LPAREN • expression RPAREN

    APPEND      shift, and go to state 47
    LEN         shift, and go to state 48
    LPAREN      shift, and go to state 51
    BOOLEAN     shift, and go to state 53
    IDENTIFIER  shift, and go to state 54
    INTEGER     shift, and go to state 55
    STRING      shift, and go to state 56
    FLOAT       shift, and go to state 57

    expression          go to state 101
    primary_expression  go to state 62
    literal             go to state 63
    binary_op           go to state 64
    builtin             go to state 65


State 52

  112 block_stmt: LBRACE RBRACE •

    $default  reduce using rule 112 (block_stmt)


State 53

   50 literal: BOOLEAN •

    $default  reduce using rule 50 (literal)


State 54

   40 primary_expression: IDENTIFIER •

    $default  reduce using rule 40 (primary_expression)


State 55

   47 literal: INTEGER •

    $default  reduce using rule 47 (literal)


State 56

   48 literal: STRING •

    $default  reduce using rule 48 (literal)


State 57

   49 literal: FLOAT •

    $default  reduce using rule 49 (literal)


State 58

   82 statement: COMMENT • statement

    IF          shift, and go to state 41
    FOR         shift, and go to state 42
    BREAK       shift, and go to state 43
    CONTINUE    shift, and go to state 44
    RETURN      shift, and go to state 45
    VAR         shift, and go to state 46
    APPEND      shift, and go to state 47
    LEN         shift, and go to state 48
    PRINT       shift, and go to state 49
    PRINTLN     shift, and go to state 50
    LPAREN      shift, and go to state 51
    LBRACE      shift, and go to state 31
    BOOLEAN     shift, and go to state 53
    IDENTIFIER  shift, and go to state 54
    INTEGER     shift, and go to state 55
    STRING      shift, and go to state 56
    FLOAT       shift, and go to state 57
    COMMENT     shift, and go to state 58

    IF          [reduce using rule 85 (simple_stmt)]
    FOR         [reduce using rule 85 (simple_stmt)]
    BREAK       [reduce using rule 85 (simple_stmt)]
    CONTINUE    [reduce using rule 85 (simple_stmt)]
    RETURN      [reduce using rule 85 (simple_stmt)]
    VAR         [reduce using rule 85 (simple_stmt)]
    APPEND      [reduce using rule 85 (simple_stmt)]
    LEN         [reduce using rule 85 (simple_stmt)]
    PRINT       [reduce using rule 85 (simple_stmt)]
    PRINTLN     [reduce using rule 85 (simple_stmt)]
    LPAREN      [reduce using rule 85 (simple_stmt)]
    LBRACE      [reduce using rule 85 (simple_stmt)]
    RBRACE      reduce using rule 83 (statement)
    RBRACE      [reduce using rule 85 (simple_stmt)]
    BOOLEAN     [reduce using rule 85 (simple_stmt)]
    IDENTIFIER  [reduce using rule 85 (simple_stmt)]
    INTEGER     [reduce using rule 85 (simple_stmt)]
    STRING      [reduce using rule 85 (simple_stmt)]
    FLOAT       [reduce using rule 85 (simple_stmt)]
    COMMENT     [reduce using rule 85 (simple_stmt)]
    $default    reduce using rule 83 (statement)

    var_declarations            go to state 59
    expression_list             go to state 60
    expression                  go to state 61
    primary_expression          go to state 62
    literal                     go to state 63
    binary_op                   go to state 64
    builtin                     go to state 65
    statement                   go to state 102
    declaration_stmt            go to state 67
    simple_stmt                 go to state 68
    inc_dec_stmt                go to state 69
    assignment                  go to state 70
    short_variable_declaration  go to state 71
    return_stmt                 go to state 72
    break_stmt                  go to state 73
    continue_stmt               go to state 74
    block_stmt                  go to state 75
    if_stmt                     go to state 76
    for_stmt                    go to state 77
    print_stmt                  go to state 78
    println_stmt                go to state 79


State 59

   84 declaration_stmt: var_declarations •

    $default  reduce using rule 84 (declaration_stmt)


State 60

   91 assignment: expression_list • ASSIGN expression_list
  106 short_variable_declaration: expression_list • SHORT_VAR expression_list

    ASSIGN     shift, and go to state 103
    SHORT_VAR  shift, and go to state 104


State 61

   35 expression_list: expression •
   36                | expression • COMMA expression_list
   51 binary_op: expression • LOGICAL_OR expression
   52          | expression • LOGICAL_AND expression
   53          | expression • EQUAL_EQUAL expression
   54          | expression • NOT_EQUAL expression
   55          | expression • LESS_THAN_OR_EQUAL expression
   56          | expression • GREATER_THAN_OR_EQUAL expression
   57          | expression • LESS_THAN expression
   58          | expression • GREATER_THAN expression
   59          | expression • PLUS expression
   60          | expression • MINUS expression
   61          | expression • BITWISE_OR expression
   62          | expression • BITWISE_XOR expression
   63          | expression • TIMES expression
   64          | expression • DIVIDE expression
   65          | expression • MODULO expression
   66          | expression • RIGHT_SHIFT expression
   67          | expression • LEFT_SHIFT expression
   68          | expression • BITWISE_AND expression
   69          | expression • BIT_CLEAR expression
   89 inc_dec_stmt: expression • INCREMENT
   90             | expression • DECREMENT
   92 assignment: expression • assign_op expression

    PLUS                   shift, and go to state 105
    MINUS                  shift, and go to state 106
    TIMES                  shift, and go to state 107
    DIVIDE                 shift, and go to state 108
    MODULO                 shift, and go to state 109
    BITWISE_AND            shift, and go to state 110
    BITWISE_OR             shift, and go to state 111
    BITWISE_XOR            shift, and go to state 112
    BIT_CLEAR              shift, and go to state 113
    LEFT_SHIFT             shift, and go to state 114
    RIGHT_SHIFT            shift, and go to state 115
    ADD_ASSIGN             shift, and go to state 116
    SUB_ASSIGN             shift, and go to state 117
    MUL_ASSIGN             shift, and go to state 118
    DIV_ASSIGN             shift, and go to state 119
    MOD_ASSIGN             shift, and go to state 120
    AND_ASSIGN             shift, and go to state 121
    OR_ASSIGN              shift, and go to state 122
    XOR_ASSIGN             shift, and go to state 123
    LEFT_SHIFT_ASSIGN      shift, and go to state 124
    RIGHT_SHIFT_ASSIGN     shift, and go to state 125
    INCREMENT              shift, and go to state 126
    DECREMENT              shift, and go to state 127
    CLEAR_ASSIGN           shift, and go to state 128
    EQUAL_EQUAL            shift, and go to state 129
    NOT_EQUAL              shift, and go to state 130
    LESS_THAN              shift, and go to state 131
    LESS_THAN_OR_EQUAL     shift, and go to state 132
    GREATER_THAN           shift, and go to state 133
    GREATER_THAN_OR_EQUAL  shift, and go to state 134
    LOGICAL_AND            shift, and go to state 135
    LOGICAL_OR             shift, and go to state 136
    COMMA                  shift, and go to state 137

    $default  reduce using rule 35 (expression_list)

    assign_op  go to state 138
    add_op_eq  go to state 139
    mul_op_eq  go to state 140


State 62

   37 expression: primary_expression •
   43 primary_expression: primary_expression • LPAREN expression_list RPAREN
   44                   | primary_expression • LPAREN RPAREN
   45                   | primary_expression • '.' IDENTIFIER
   46                   | primary_expression • '[' expression ']'

    LPAREN  shift, and go to state 141
    '.'     shift, and go to state 142
    '['     shift, and go to state 143

    LPAREN    [reduce using rule 37 (expression)]
    $default  reduce using rule 37 (expression)


State 63

   41 primary_expression: literal •

    $default  reduce using rule 41 (primary_expression)


State 64

   38 expression: binary_op •

    $default  reduce using rule 38 (expression)


State 65

   39 expression: builtin •

    $default  reduce using rule 39 (expression)


State 66

  111 block_stmt: LBRACE statement • RBRACE

    RBRACE  shift, and go to state 144


State 67

   72 statement: declaration_stmt • statement

    IF          shift, and go to state 41
    FOR         shift, and go to state 42
    BREAK       shift, and go to state 43
    CONTINUE    shift, and go to state 44
    RETURN      shift, and go to state 45
    VAR         shift, and go to state 46
    APPEND      shift, and go to state 47
    LEN         shift, and go to state 48
    PRINT       shift, and go to state 49
    PRINTLN     shift, and go to state 50
    LPAREN      shift, and go to state 51
    LBRACE      shift, and go to state 31
    BOOLEAN     shift, and go to state 53
    IDENTIFIER  shift, and go to state 54
    INTEGER     shift, and go to state 55
    STRING      shift, and go to state 56
    FLOAT       shift, and go to state 57
    COMMENT     shift, and go to state 58

    IF          [reduce using rule 85 (simple_stmt)]
    FOR         [reduce using rule 85 (simple_stmt)]
    BREAK       [reduce using rule 85 (simple_stmt)]
    CONTINUE    [reduce using rule 85 (simple_stmt)]
    RETURN      [reduce using rule 85 (simple_stmt)]
    VAR         [reduce using rule 85 (simple_stmt)]
    APPEND      [reduce using rule 85 (simple_stmt)]
    LEN         [reduce using rule 85 (simple_stmt)]
    PRINT       [reduce using rule 85 (simple_stmt)]
    PRINTLN     [reduce using rule 85 (simple_stmt)]
    LPAREN      [reduce using rule 85 (simple_stmt)]
    LBRACE      [reduce using rule 85 (simple_stmt)]
    RBRACE      reduce using rule 83 (statement)
    RBRACE      [reduce using rule 85 (simple_stmt)]
    BOOLEAN     [reduce using rule 85 (simple_stmt)]
    IDENTIFIER  [reduce using rule 85 (simple_stmt)]
    INTEGER     [reduce using rule 85 (simple_stmt)]
    STRING      [reduce using rule 85 (simple_stmt)]
    FLOAT       [reduce using rule 85 (simple_stmt)]
    COMMENT     [reduce using rule 85 (simple_stmt)]
    $default    reduce using rule 83 (statement)

    var_declarations            go to state 59
    expression_list             go to state 60
    expression                  go to state 61
    primary_expression          go to state 62
    literal                     go to state 63
    binary_op                   go to state 64
    builtin                     go to state 65
    statement                   go to state 145
    declaration_stmt            go to state 67
    simple_stmt                 go to state 68
    inc_dec_stmt                go to state 69
    assignment                  go to state 70
    short_variable_declaration  go to state 71
    return_stmt                 go to state 72
    break_stmt                  go to state 73
    continue_stmt               go to state 74
    block_stmt                  go to state 75
    if_stmt                     go to state 76
    for_stmt                    go to state 77
    print_stmt                  go to state 78
    println_stmt                go to state 79


State 68

   73 statement: simple_stmt • statement

    IF          shift, and go to state 41
    FOR         shift, and go to state 42
    BREAK       shift, and go to state 43
    CONTINUE    shift, and go to state 44
    RETURN      shift, and go to state 45
    VAR         shift, and go to state 46
    APPEND      shift, and go to state 47
    LEN         shift, and go to state 48
    PRINT       shift, and go to state 49
    PRINTLN     shift, and go to state 50
    LPAREN      shift, and go to state 51
    LBRACE      shift, and go to state 31
    BOOLEAN     shift, and go to state 53
    IDENTIFIER  shift, and go to state 54
    INTEGER     shift, and go to state 55
    STRING      shift, and go to state 56
    FLOAT       shift, and go to state 57
    COMMENT     shift, and go to state 58

    IF          [reduce using rule 85 (simple_stmt)]
    FOR         [reduce using rule 85 (simple_stmt)]
    BREAK       [reduce using rule 85 (simple_stmt)]
    CONTINUE    [reduce using rule 85 (simple_stmt)]
    RETURN      [reduce using rule 85 (simple_stmt)]
    VAR         [reduce using rule 85 (simple_stmt)]
    APPEND      [reduce using rule 85 (simple_stmt)]
    LEN         [reduce using rule 85 (simple_stmt)]
    PRINT       [reduce using rule 85 (simple_stmt)]
    PRINTLN     [reduce using rule 85 (simple_stmt)]
    LPAREN      [reduce using rule 85 (simple_stmt)]
    LBRACE      [reduce using rule 85 (simple_stmt)]
    RBRACE      reduce using rule 83 (statement)
    RBRACE      [reduce using rule 85 (simple_stmt)]
    BOOLEAN     [reduce using rule 85 (simple_stmt)]
    IDENTIFIER  [reduce using rule 85 (simple_stmt)]
    INTEGER     [reduce using rule 85 (simple_stmt)]
    STRING      [reduce using rule 85 (simple_stmt)]
    FLOAT       [reduce using rule 85 (simple_stmt)]
    COMMENT     [reduce using rule 85 (simple_stmt)]
    $default    reduce using rule 83 (statement)

    var_declarations            go to state 59
    expression_list             go to state 60
    expression                  go to state 61
    primary_expression          go to state 62
    literal                     go to state 63
    binary_op                   go to state 64
    builtin                     go to state 65
    statement                   go to state 146
    declaration_stmt            go to state 67
    simple_stmt                 go to state 68
    inc_dec_stmt                go to state 69
    assignment                  go to state 70
    short_variable_declaration  go to state 71
    return_stmt                 go to state 72
    break_stmt                  go to state 73
    continue_stmt               go to state 74
    block_stmt                  go to state 75
    if_stmt                     go to state 76
    for_stmt                    go to state 77
    print_stmt                  go to state 78
    println_stmt                go to state 79


State 69

   86 simple_stmt: inc_dec_stmt •

    $default  reduce using rule 86 (simple_stmt)


State 70

   87 simple_stmt: assignment •

    $default  reduce using rule 87 (simple_stmt)


State 71

   88 simple_stmt: short_variable_declaration •

    $default  reduce using rule 88 (simple_stmt)


State 72

   74 statement: return_stmt • statement

    IF          shift, and go to state 41
    FOR         shift, and go to state 42
    BREAK       shift, and go to state 43
    CONTINUE    shift, and go to state 44
    RETURN      shift, and go to state 45
    VAR         shift, and go to state 46
    APPEND      shift, and go to state 47
    LEN         shift, and go to state 48
    PRINT       shift, and go to state 49
    PRINTLN     shift, and go to state 50
    LPAREN      shift, and go to state 51
    LBRACE      shift, and go to state 31
    BOOLEAN     shift, and go to state 53
    IDENTIFIER  shift, and go to state 54
    INTEGER     shift, and go to state 55
    STRING      shift, and go to state 56
    FLOAT       shift, and go to state 57
    COMMENT     shift, and go to state 58

    IF          [reduce using rule 85 (simple_stmt)]
    FOR         [reduce using rule 85 (simple_stmt)]
    BREAK       [reduce using rule 85 (simple_stmt)]
    CONTINUE    [reduce using rule 85 (simple_stmt)]
    RETURN      [reduce using rule 85 (simple_stmt)]
    VAR         [reduce using rule 85 (simple_stmt)]
    APPEND      [reduce using rule 85 (simple_stmt)]
    LEN         [reduce using rule 85 (simple_stmt)]
    PRINT       [reduce using rule 85 (simple_stmt)]
    PRINTLN     [reduce using rule 85 (simple_stmt)]
    LPAREN      [reduce using rule 85 (simple_stmt)]
    LBRACE      [reduce using rule 85 (simple_stmt)]
    RBRACE      reduce using rule 83 (statement)
    RBRACE      [reduce using rule 85 (simple_stmt)]
    BOOLEAN     [reduce using rule 85 (simple_stmt)]
    IDENTIFIER  [reduce using rule 85 (simple_stmt)]
    INTEGER     [reduce using rule 85 (simple_stmt)]
    STRING      [reduce using rule 85 (simple_stmt)]
    FLOAT       [reduce using rule 85 (simple_stmt)]
    COMMENT     [reduce using rule 85 (simple_stmt)]
    $default    reduce using rule 83 (statement)

    var_declarations            go to state 59
    expression_list             go to state 60
    expression                  go to state 61
    primary_expression          go to state 62
    literal                     go to state 63
    binary_op                   go to state 64
    builtin                     go to state 65
    statement                   go to state 147
    declaration_stmt            go to state 67
    simple_stmt                 go to state 68
    inc_dec_stmt                go to state 69
    assignment                  go to state 70
    short_variable_declaration  go to state 71
    return_stmt                 go to state 72
    break_stmt                  go to state 73
    continue_stmt               go to state 74
    block_stmt                  go to state 75
    if_stmt                     go to state 76
    for_stmt                    go to state 77
    print_stmt                  go to state 78
    println_stmt                go to state 79


State 73

   75 statement: break_stmt • statement

    IF          shift, and go to state 41
    FOR         shift, and go to state 42
    BREAK       shift, and go to state 43
    CONTINUE    shift, and go to state 44
    RETURN      shift, and go to state 45
    VAR         shift, and go to state 46
    APPEND      shift, and go to state 47
    LEN         shift, and go to state 48
    PRINT       shift, and go to state 49
    PRINTLN     shift, and go to state 50
    LPAREN      shift, and go to state 51
    LBRACE      shift, and go to state 31
    BOOLEAN     shift, and go to state 53
    IDENTIFIER  shift, and go to state 54
    INTEGER     shift, and go to state 55
    STRING      shift, and go to state 56
    FLOAT       shift, and go to state 57
    COMMENT     shift, and go to state 58

    IF          [reduce using rule 85 (simple_stmt)]
    FOR         [reduce using rule 85 (simple_stmt)]
    BREAK       [reduce using rule 85 (simple_stmt)]
    CONTINUE    [reduce using rule 85 (simple_stmt)]
    RETURN      [reduce using rule 85 (simple_stmt)]
    VAR         [reduce using rule 85 (simple_stmt)]
    APPEND      [reduce using rule 85 (simple_stmt)]
    LEN         [reduce using rule 85 (simple_stmt)]
    PRINT       [reduce using rule 85 (simple_stmt)]
    PRINTLN     [reduce using rule 85 (simple_stmt)]
    LPAREN      [reduce using rule 85 (simple_stmt)]
    LBRACE      [reduce using rule 85 (simple_stmt)]
    RBRACE      reduce using rule 83 (statement)
    RBRACE      [reduce using rule 85 (simple_stmt)]
    BOOLEAN     [reduce using rule 85 (simple_stmt)]
    IDENTIFIER  [reduce using rule 85 (simple_stmt)]
    INTEGER     [reduce using rule 85 (simple_stmt)]
    STRING      [reduce using rule 85 (simple_stmt)]
    FLOAT       [reduce using rule 85 (simple_stmt)]
    COMMENT     [reduce using rule 85 (simple_stmt)]
    $default    reduce using rule 83 (statement)

    var_declarations            go to state 59
    expression_list             go to state 60
    expression                  go to state 61
    primary_expression          go to state 62
    literal                     go to state 63
    binary_op                   go to state 64
    builtin                     go to state 65
    statement                   go to state 148
    declaration_stmt            go to state 67
    simple_stmt                 go to state 68
    inc_dec_stmt                go to state 69
    assignment                  go to state 70
    short_variable_declaration  go to state 71
    return_stmt                 go to state 72
    break_stmt                  go to state 73
    continue_stmt               go to state 74
    block_stmt                  go to state 75
    if_stmt                     go to state 76
    for_stmt                    go to state 77
    print_stmt                  go to state 78
    println_stmt                go to state 79


State 74

   76 statement: continue_stmt • statement

    IF          shift, and go to state 41
    FOR         shift, and go to state 42
    BREAK       shift, and go to state 43
    CONTINUE    shift, and go to state 44
    RETURN      shift, and go to state 45
    VAR         shift, and go to state 46
    APPEND      shift, and go to state 47
    LEN         shift, and go to state 48
    PRINT       shift, and go to state 49
    PRINTLN     shift, and go to state 50
    LPAREN      shift, and go to state 51
    LBRACE      shift, and go to state 31
    BOOLEAN     shift, and go to state 53
    IDENTIFIER  shift, and go to state 54
    INTEGER     shift, and go to state 55
    STRING      shift, and go to state 56
    FLOAT       shift, and go to state 57
    COMMENT     shift, and go to state 58

    IF          [reduce using rule 85 (simple_stmt)]
    FOR         [reduce using rule 85 (simple_stmt)]
    BREAK       [reduce using rule 85 (simple_stmt)]
    CONTINUE    [reduce using rule 85 (simple_stmt)]
    RETURN      [reduce using rule 85 (simple_stmt)]
    VAR         [reduce using rule 85 (simple_stmt)]
    APPEND      [reduce using rule 85 (simple_stmt)]
    LEN         [reduce using rule 85 (simple_stmt)]
    PRINT       [reduce using rule 85 (simple_stmt)]
    PRINTLN     [reduce using rule 85 (simple_stmt)]
    LPAREN      [reduce using rule 85 (simple_stmt)]
    LBRACE      [reduce using rule 85 (simple_stmt)]
    RBRACE      reduce using rule 83 (statement)
    RBRACE      [reduce using rule 85 (simple_stmt)]
    BOOLEAN     [reduce using rule 85 (simple_stmt)]
    IDENTIFIER  [reduce using rule 85 (simple_stmt)]
    INTEGER     [reduce using rule 85 (simple_stmt)]
    STRING      [reduce using rule 85 (simple_stmt)]
    FLOAT       [reduce using rule 85 (simple_stmt)]
    COMMENT     [reduce using rule 85 (simple_stmt)]
    $default    reduce using rule 83 (statement)

    var_declarations            go to state 59
    expression_list             go to state 60
    expression                  go to state 61
    primary_expression          go to state 62
    literal                     go to state 63
    binary_op                   go to state 64
    builtin                     go to state 65
    statement                   go to state 149
    declaration_stmt            go to state 67
    simple_stmt                 go to state 68
    inc_dec_stmt                go to state 69
    assignment                  go to state 70
    short_variable_declaration  go to state 71
    return_stmt                 go to state 72
    break_stmt                  go to state 73
    continue_stmt               go to state 74
    block_stmt                  go to state 75
    if_stmt                     go to state 76
    for_stmt                    go to state 77
    print_stmt                  go to state 78
    println_stmt                go to state 79


State 75

   77 statement: block_stmt • statement

    IF          shift, and go to state 41
    FOR         shift, and go to state 42
    BREAK       shift, and go to state 43
    CONTINUE    shift, and go to state 44
    RETURN      shift, and go to state 45
    VAR         shift, and go to state 46
    APPEND      shift, and go to state 47
    LEN         shift, and go to state 48
    PRINT       shift, and go to state 49
    PRINTLN     shift, and go to state 50
    LPAREN      shift, and go to state 51
    LBRACE      shift, and go to state 31
    BOOLEAN     shift, and go to state 53
    IDENTIFIER  shift, and go to state 54
    INTEGER     shift, and go to state 55
    STRING      shift, and go to state 56
    FLOAT       shift, and go to state 57
    COMMENT     shift, and go to state 58

    IF          [reduce using rule 85 (simple_stmt)]
    FOR         [reduce using rule 85 (simple_stmt)]
    BREAK       [reduce using rule 85 (simple_stmt)]
    CONTINUE    [reduce using rule 85 (simple_stmt)]
    RETURN      [reduce using rule 85 (simple_stmt)]
    VAR         [reduce using rule 85 (simple_stmt)]
    APPEND      [reduce using rule 85 (simple_stmt)]
    LEN         [reduce using rule 85 (simple_stmt)]
    PRINT       [reduce using rule 85 (simple_stmt)]
    PRINTLN     [reduce using rule 85 (simple_stmt)]
    LPAREN      [reduce using rule 85 (simple_stmt)]
    LBRACE      [reduce using rule 85 (simple_stmt)]
    RBRACE      reduce using rule 83 (statement)
    RBRACE      [reduce using rule 85 (simple_stmt)]
    BOOLEAN     [reduce using rule 85 (simple_stmt)]
    IDENTIFIER  [reduce using rule 85 (simple_stmt)]
    INTEGER     [reduce using rule 85 (simple_stmt)]
    STRING      [reduce using rule 85 (simple_stmt)]
    FLOAT       [reduce using rule 85 (simple_stmt)]
    COMMENT     [reduce using rule 85 (simple_stmt)]
    $default    reduce using rule 83 (statement)

    var_declarations            go to state 59
    expression_list             go to state 60
    expression                  go to state 61
    primary_expression          go to state 62
    literal                     go to state 63
    binary_op                   go to state 64
    builtin                     go to state 65
    statement                   go to state 150
    declaration_stmt            go to state 67
    simple_stmt                 go to state 68
    inc_dec_stmt                go to state 69
    assignment                  go to state 70
    short_variable_declaration  go to state 71
    return_stmt                 go to state 72
    break_stmt                  go to state 73
    continue_stmt               go to state 74
    block_stmt                  go to state 75
    if_stmt                     go to state 76
    for_stmt                    go to state 77
    print_stmt                  go to state 78
    println_stmt                go to state 79


State 76

   78 statement: if_stmt • statement

    IF          shift, and go to state 41
    FOR         shift, and go to state 42
    BREAK       shift, and go to state 43
    CONTINUE    shift, and go to state 44
    RETURN      shift, and go to state 45
    VAR         shift, and go to state 46
    APPEND      shift, and go to state 47
    LEN         shift, and go to state 48
    PRINT       shift, and go to state 49
    PRINTLN     shift, and go to state 50
    LPAREN      shift, and go to state 51
    LBRACE      shift, and go to state 31
    BOOLEAN     shift, and go to state 53
    IDENTIFIER  shift, and go to state 54
    INTEGER     shift, and go to state 55
    STRING      shift, and go to state 56
    FLOAT       shift, and go to state 57
    COMMENT     shift, and go to state 58

    IF          [reduce using rule 85 (simple_stmt)]
    FOR         [reduce using rule 85 (simple_stmt)]
    BREAK       [reduce using rule 85 (simple_stmt)]
    CONTINUE    [reduce using rule 85 (simple_stmt)]
    RETURN      [reduce using rule 85 (simple_stmt)]
    VAR         [reduce using rule 85 (simple_stmt)]
    APPEND      [reduce using rule 85 (simple_stmt)]
    LEN         [reduce using rule 85 (simple_stmt)]
    PRINT       [reduce using rule 85 (simple_stmt)]
    PRINTLN     [reduce using rule 85 (simple_stmt)]
    LPAREN      [reduce using rule 85 (simple_stmt)]
    LBRACE      [reduce using rule 85 (simple_stmt)]
    RBRACE      reduce using rule 83 (statement)
    RBRACE      [reduce using rule 85 (simple_stmt)]
    BOOLEAN     [reduce using rule 85 (simple_stmt)]
    IDENTIFIER  [reduce using rule 85 (simple_stmt)]
    INTEGER     [reduce using rule 85 (simple_stmt)]
    STRING      [reduce using rule 85 (simple_stmt)]
    FLOAT       [reduce using rule 85 (simple_stmt)]
    COMMENT     [reduce using rule 85 (simple_stmt)]
    $default    reduce using rule 83 (statement)

    var_declarations            go to state 59
    expression_list             go to state 60
    expression                  go to state 61
    primary_expression          go to state 62
    literal                     go to state 63
    binary_op                   go to state 64
    builtin                     go to state 65
    statement                   go to state 151
    declaration_stmt            go to state 67
    simple_stmt                 go to state 68
    inc_dec_stmt                go to state 69
    assignment                  go to state 70
    short_variable_declaration  go to state 71
    return_stmt                 go to state 72
    break_stmt                  go to state 73
    continue_stmt               go to state 74
    block_stmt                  go to state 75
    if_stmt                     go to state 76
    for_stmt                    go to state 77
    print_stmt                  go to state 78
    println_stmt                go to state 79


State 77

   79 statement: for_stmt • statement

    IF          shift, and go to state 41
    FOR         shift, and go to state 42
    BREAK       shift, and go to state 43
    CONTINUE    shift, and go to state 44
    RETURN      shift, and go to state 45
    VAR         shift, and go to state 46
    APPEND      shift, and go to state 47
    LEN         shift, and go to state 48
    PRINT       shift, and go to state 49
    PRINTLN     shift, and go to state 50
    LPAREN      shift, and go to state 51
    LBRACE      shift, and go to state 31
    BOOLEAN     shift, and go to state 53
    IDENTIFIER  shift, and go to state 54
    INTEGER     shift, and go to state 55
    STRING      shift, and go to state 56
    FLOAT       shift, and go to state 57
    COMMENT     shift, and go to state 58

    IF          [reduce using rule 85 (simple_stmt)]
    FOR         [reduce using rule 85 (simple_stmt)]
    BREAK       [reduce using rule 85 (simple_stmt)]
    CONTINUE    [reduce using rule 85 (simple_stmt)]
    RETURN      [reduce using rule 85 (simple_stmt)]
    VAR         [reduce using rule 85 (simple_stmt)]
    APPEND      [reduce using rule 85 (simple_stmt)]
    LEN         [reduce using rule 85 (simple_stmt)]
    PRINT       [reduce using rule 85 (simple_stmt)]
    PRINTLN     [reduce using rule 85 (simple_stmt)]
    LPAREN      [reduce using rule 85 (simple_stmt)]
    LBRACE      [reduce using rule 85 (simple_stmt)]
    RBRACE      reduce using rule 83 (statement)
    RBRACE      [reduce using rule 85 (simple_stmt)]
    BOOLEAN     [reduce using rule 85 (simple_stmt)]
    IDENTIFIER  [reduce using rule 85 (simple_stmt)]
    INTEGER     [reduce using rule 85 (simple_stmt)]
    STRING      [reduce using rule 85 (simple_stmt)]
    FLOAT       [reduce using rule 85 (simple_stmt)]
    COMMENT     [reduce using rule 85 (simple_stmt)]
    $default    reduce using rule 83 (statement)

    var_declarations            go to state 59
    expression_list             go to state 60
    expression                  go to state 61
    primary_expression          go to state 62
    literal                     go to state 63
    binary_op                   go to state 64
    builtin                     go to state 65
    statement                   go to state 152
    declaration_stmt            go to state 67
    simple_stmt                 go to state 68
    inc_dec_stmt                go to state 69
    assignment                  go to state 70
    short_variable_declaration  go to state 71
    return_stmt                 go to state 72
    break_stmt                  go to state 73
    continue_stmt               go to state 74
    block_stmt                  go to state 75
    if_stmt                     go to state 76
    for_stmt                    go to state 77
    print_stmt                  go to state 78
    println_stmt                go to state 79


State 78

   80 statement: print_stmt • statement

    IF          shift, and go to state 41
    FOR         shift, and go to state 42
    BREAK       shift, and go to state 43
    CONTINUE    shift, and go to state 44
    RETURN      shift, and go to state 45
    VAR         shift, and go to state 46
    APPEND      shift, and go to state 47
    LEN         shift, and go to state 48
    PRINT       shift, and go to state 49
    PRINTLN     shift, and go to state 50
    LPAREN      shift, and go to state 51
    LBRACE      shift, and go to state 31
    BOOLEAN     shift, and go to state 53
    IDENTIFIER  shift, and go to state 54
    INTEGER     shift, and go to state 55
    STRING      shift, and go to state 56
    FLOAT       shift, and go to state 57
    COMMENT     shift, and go to state 58

    IF          [reduce using rule 85 (simple_stmt)]
    FOR         [reduce using rule 85 (simple_stmt)]
    BREAK       [reduce using rule 85 (simple_stmt)]
    CONTINUE    [reduce using rule 85 (simple_stmt)]
    RETURN      [reduce using rule 85 (simple_stmt)]
    VAR         [reduce using rule 85 (simple_stmt)]
    APPEND      [reduce using rule 85 (simple_stmt)]
    LEN         [reduce using rule 85 (simple_stmt)]
    PRINT       [reduce using rule 85 (simple_stmt)]
    PRINTLN     [reduce using rule 85 (simple_stmt)]
    LPAREN      [reduce using rule 85 (simple_stmt)]
    LBRACE      [reduce using rule 85 (simple_stmt)]
    RBRACE      reduce using rule 83 (statement)
    RBRACE      [reduce using rule 85 (simple_stmt)]
    BOOLEAN     [reduce using rule 85 (simple_stmt)]
    IDENTIFIER  [reduce using rule 85 (simple_stmt)]
    INTEGER     [reduce using rule 85 (simple_stmt)]
    STRING      [reduce using rule 85 (simple_stmt)]
    FLOAT       [reduce using rule 85 (simple_stmt)]
    COMMENT     [reduce using rule 85 (simple_stmt)]
    $default    reduce using rule 83 (statement)

    var_declarations            go to state 59
    expression_list             go to state 60
    expression                  go to state 61
    primary_expression          go to state 62
    literal                     go to state 63
    binary_op                   go to state 64
    builtin                     go to state 65
    statement                   go to state 153
    declaration_stmt            go to state 67
    simple_stmt                 go to state 68
    inc_dec_stmt                go to state 69
    assignment                  go to state 70
    short_variable_declaration  go to state 71
    return_stmt                 go to state 72
    break_stmt                  go to state 73
    continue_stmt               go to state 74
    block_stmt                  go to state 75
    if_stmt                     go to state 76
    for_stmt                    go to state 77
    print_stmt                  go to state 78
    println_stmt                go to state 79


State 79

   81 statement: println_stmt • statement

    IF          shift, and go to state 41
    FOR         shift, and go to state 42
    BREAK       shift, and go to state 43
    CONTINUE    shift, and go to state 44
    RETURN      shift, and go to state 45
    VAR         shift, and go to state 46
    APPEND      shift, and go to state 47
    LEN         shift, and go to state 48
    PRINT       shift, and go to state 49
    PRINTLN     shift, and go to state 50
    LPAREN      shift, and go to state 51
    LBRACE      shift, and go to state 31
    BOOLEAN     shift, and go to state 53
    IDENTIFIER  shift, and go to state 54
    INTEGER     shift, and go to state 55
    STRING      shift, and go to state 56
    FLOAT       shift, and go to state 57
    COMMENT     shift, and go to state 58

    IF          [reduce using rule 85 (simple_stmt)]
    FOR         [reduce using rule 85 (simple_stmt)]
    BREAK       [reduce using rule 85 (simple_stmt)]
    CONTINUE    [reduce using rule 85 (simple_stmt)]
    RETURN      [reduce using rule 85 (simple_stmt)]
    VAR         [reduce using rule 85 (simple_stmt)]
    APPEND      [reduce using rule 85 (simple_stmt)]
    LEN         [reduce using rule 85 (simple_stmt)]
    PRINT       [reduce using rule 85 (simple_stmt)]
    PRINTLN     [reduce using rule 85 (simple_stmt)]
    LPAREN      [reduce using rule 85 (simple_stmt)]
    LBRACE      [reduce using rule 85 (simple_stmt)]
    RBRACE      reduce using rule 83 (statement)
    RBRACE      [reduce using rule 85 (simple_stmt)]
    BOOLEAN     [reduce using rule 85 (simple_stmt)]
    IDENTIFIER  [reduce using rule 85 (simple_stmt)]
    INTEGER     [reduce using rule 85 (simple_stmt)]
    STRING      [reduce using rule 85 (simple_stmt)]
    FLOAT       [reduce using rule 85 (simple_stmt)]
    COMMENT     [reduce using rule 85 (simple_stmt)]
    $default    reduce using rule 83 (statement)

    var_declarations            go to state 59
    expression_list             go to state 60
    expression                  go to state 61
    primary_expression          go to state 62
    literal                     go to state 63
    binary_op                   go to state 64
    builtin                     go to state 65
    statement                   go to state 154
    declaration_stmt            go to state 67
    simple_stmt                 go to state 68
    inc_dec_stmt                go to state 69
    assignment                  go to state 70
    short_variable_declaration  go to state 71
    return_stmt                 go to state 72
    break_stmt                  go to state 73
    continue_stmt               go to state 74
    block_stmt                  go to state 75
    if_stmt                     go to state 76
    for_stmt                    go to state 77
    print_stmt                  go to state 78
    println_stmt                go to state 79


State 80

   22 identifier_list: IDENTIFIER COMMA identifier_list •

    $default  reduce using rule 22 (identifier_list)


State 81

   29 parameter_unit: identifier_list LPAREN IDENTIFIER • RPAREN

    RPAREN  shift, and go to state 155


State 82

   31 bracket: '[' INTEGER • ']'

    ']'  shift, and go to state 156


State 83

   32 bracket: '[' ']' •

    $default  reduce using rule 32 (bracket)


State 84

   34 bracket_list: bracket bracket_list •

    $default  reduce using rule 34 (bracket_list)


State 85

   30 parameter_unit: identifier_list bracket_list IDENTIFIER •

    $default  reduce using rule 30 (parameter_unit)


State 86

   27 parameters: parameter_unit COMMA parameters •

    $default  reduce using rule 27 (parameters)


State 87

   35 expression_list: expression •
   36                | expression • COMMA expression_list
   51 binary_op: expression • LOGICAL_OR expression
   52          | expression • LOGICAL_AND expression
   53          | expression • EQUAL_EQUAL expression
   54          | expression • NOT_EQUAL expression
   55          | expression • LESS_THAN_OR_EQUAL expression
   56          | expression • GREATER_THAN_OR_EQUAL expression
   57          | expression • LESS_THAN expression
   58          | expression • GREATER_THAN expression
   59          | expression • PLUS expression
   60          | expression • MINUS expression
   61          | expression • BITWISE_OR expression
   62          | expression • BITWISE_XOR expression
   63          | expression • TIMES expression
   64          | expression • DIVIDE expression
   65          | expression • MODULO expression
   66          | expression • RIGHT_SHIFT expression
   67          | expression • LEFT_SHIFT expression
   68          | expression • BITWISE_AND expression
   69          | expression • BIT_CLEAR expression
   89 inc_dec_stmt: expression • INCREMENT
   90             | expression • DECREMENT
   92 assignment: expression • assign_op expression
  113 if_stmt: IF expression • block_stmt
  117        | IF expression • block_stmt ELSE if_stmt
  118        | IF expression • block_stmt ELSE block_stmt

    PLUS                   shift, and go to state 105
    MINUS                  shift, and go to state 106
    TIMES                  shift, and go to state 107
    DIVIDE                 shift, and go to state 108
    MODULO                 shift, and go to state 109
    BITWISE_AND            shift, and go to state 110
    BITWISE_OR             shift, and go to state 111
    BITWISE_XOR            shift, and go to state 112
    BIT_CLEAR              shift, and go to state 113
    LEFT_SHIFT             shift, and go to state 114
    RIGHT_SHIFT            shift, and go to state 115
    ADD_ASSIGN             shift, and go to state 116
    SUB_ASSIGN             shift, and go to state 117
    MUL_ASSIGN             shift, and go to state 118
    DIV_ASSIGN             shift, and go to state 119
    MOD_ASSIGN             shift, and go to state 120
    AND_ASSIGN             shift, and go to state 121
    OR_ASSIGN              shift, and go to state 122
    XOR_ASSIGN             shift, and go to state 123
    LEFT_SHIFT_ASSIGN      shift, and go to state 124
    RIGHT_SHIFT_ASSIGN     shift, and go to state 125
    INCREMENT              shift, and go to state 126
    DECREMENT              shift, and go to state 127
    CLEAR_ASSIGN           shift, and go to state 128
    EQUAL_EQUAL            shift, and go to state 129
    NOT_EQUAL              shift, and go to state 130
    LESS_THAN              shift, and go to state 131
    LESS_THAN_OR_EQUAL     shift, and go to state 132
    GREATER_THAN           shift, and go to state 133
    GREATER_THAN_OR_EQUAL  shift, and go to state 134
    LOGICAL_AND            shift, and go to state 135
    LOGICAL_OR             shift, and go to state 136
    LBRACE                 shift, and go to state 31
    COMMA                  shift, and go to state 137

    $default  reduce using rule 35 (expression_list)

    assign_op   go to state 138
    add_op_eq   go to state 139
    mul_op_eq   go to state 140
    block_stmt  go to state 157


State 88

  114 if_stmt: IF simple_stmt • expression block_stmt
  115        | IF simple_stmt • expression block_stmt ELSE if_stmt
  116        | IF simple_stmt • expression block_stmt ELSE block_stmt

    APPEND      shift, and go to state 47
    LEN         shift, and go to state 48
    LPAREN      shift, and go to state 51
    BOOLEAN     shift, and go to state 53
    IDENTIFIER  shift, and go to state 54
    INTEGER     shift, and go to state 55
    STRING      shift, and go to state 56
    FLOAT       shift, and go to state 57

    expression          go to state 158
    primary_expression  go to state 62
    literal             go to state 63
    binary_op           go to state 64
    builtin             go to state 65


State 89

   35 expression_list: expression •
   36                | expression • COMMA expression_list
   51 binary_op: expression • LOGICAL_OR expression
   52          | expression • LOGICAL_AND expression
   53          | expression • EQUAL_EQUAL expression
   54          | expression • NOT_EQUAL expression
   55          | expression • LESS_THAN_OR_EQUAL expression
   56          | expression • GREATER_THAN_OR_EQUAL expression
   57          | expression • LESS_THAN expression
   58          | expression • GREATER_THAN expression
   59          | expression • PLUS expression
   60          | expression • MINUS expression
   61          | expression • BITWISE_OR expression
   62          | expression • BITWISE_XOR expression
   63          | expression • TIMES expression
   64          | expression • DIVIDE expression
   65          | expression • MODULO expression
   66          | expression • RIGHT_SHIFT expression
   67          | expression • LEFT_SHIFT expression
   68          | expression • BITWISE_AND expression
   69          | expression • BIT_CLEAR expression
   89 inc_dec_stmt: expression • INCREMENT
   90             | expression • DECREMENT
   92 assignment: expression • assign_op expression
  120 for_stmt: FOR expression • block_stmt

    PLUS                   shift, and go to state 105
    MINUS                  shift, and go to state 106
    TIMES                  shift, and go to state 107
    DIVIDE                 shift, and go to state 108
    MODULO                 shift, and go to state 109
    BITWISE_AND            shift, and go to state 110
    BITWISE_OR             shift, and go to state 111
    BITWISE_XOR            shift, and go to state 112
    BIT_CLEAR              shift, and go to state 113
    LEFT_SHIFT             shift, and go to state 114
    RIGHT_SHIFT            shift, and go to state 115
    ADD_ASSIGN             shift, and go to state 116
    SUB_ASSIGN             shift, and go to state 117
    MUL_ASSIGN             shift, and go to state 118
    DIV_ASSIGN             shift, and go to state 119
    MOD_ASSIGN             shift, and go to state 120
    AND_ASSIGN             shift, and go to state 121
    OR_ASSIGN              shift, and go to state 122
    XOR_ASSIGN             shift, and go to state 123
    LEFT_SHIFT_ASSIGN      shift, and go to state 124
    RIGHT_SHIFT_ASSIGN     shift, and go to state 125
    INCREMENT              shift, and go to state 126
    DECREMENT              shift, and go to state 127
    CLEAR_ASSIGN           shift, and go to state 128
    EQUAL_EQUAL            shift, and go to state 129
    NOT_EQUAL              shift, and go to state 130
    LESS_THAN              shift, and go to state 131
    LESS_THAN_OR_EQUAL     shift, and go to state 132
    GREATER_THAN           shift, and go to state 133
    GREATER_THAN_OR_EQUAL  shift, and go to state 134
    LOGICAL_AND            shift, and go to state 135
    LOGICAL_OR             shift, and go to state 136
    LBRACE                 shift, and go to state 31
    COMMA                  shift, and go to state 137

    $default  reduce using rule 35 (expression_list)

    assign_op   go to state 138
    add_op_eq   go to state 139
    mul_op_eq   go to state 140
    block_stmt  go to state 159


State 90

  122 for_clause: simple_stmt • SEMICOLON simple_stmt
  123           | simple_stmt • SEMICOLON expression SEMICOLON simple_stmt

    SEMICOLON  shift, and go to state 160


State 91

  119 for_stmt: FOR block_stmt •

    $default  reduce using rule 119 (for_stmt)


State 92

  121 for_stmt: FOR for_clause • block_stmt

    LBRACE  shift, and go to state 31

    block_stmt  go to state 161


State 93

   51 binary_op: expression • LOGICAL_OR expression
   52          | expression • LOGICAL_AND expression
   53          | expression • EQUAL_EQUAL expression
   54          | expression • NOT_EQUAL expression
   55          | expression • LESS_THAN_OR_EQUAL expression
   56          | expression • GREATER_THAN_OR_EQUAL expression
   57          | expression • LESS_THAN expression
   58          | expression • GREATER_THAN expression
   59          | expression • PLUS expression
   60          | expression • MINUS expression
   61          | expression • BITWISE_OR expression
   62          | expression • BITWISE_XOR expression
   63          | expression • TIMES expression
   64          | expression • DIVIDE expression
   65          | expression • MODULO expression
   66          | expression • RIGHT_SHIFT expression
   67          | expression • LEFT_SHIFT expression
   68          | expression • BITWISE_AND expression
   69          | expression • BIT_CLEAR expression
  108 return_stmt: RETURN expression •

    PLUS                   shift, and go to state 105
    MINUS                  shift, and go to state 106
    TIMES                  shift, and go to state 107
    DIVIDE                 shift, and go to state 108
    MODULO                 shift, and go to state 109
    BITWISE_AND            shift, and go to state 110
    BITWISE_OR             shift, and go to state 111
    BITWISE_XOR            shift, and go to state 112
    BIT_CLEAR              shift, and go to state 113
    LEFT_SHIFT             shift, and go to state 114
    RIGHT_SHIFT            shift, and go to state 115
    EQUAL_EQUAL            shift, and go to state 129
    NOT_EQUAL              shift, and go to state 130
    LESS_THAN              shift, and go to state 131
    LESS_THAN_OR_EQUAL     shift, and go to state 132
    GREATER_THAN           shift, and go to state 133
    GREATER_THAN_OR_EQUAL  shift, and go to state 134
    LOGICAL_AND            shift, and go to state 135
    LOGICAL_OR             shift, and go to state 136

    $default  reduce using rule 108 (return_stmt)


State 94

   17 declaration: IDENTIFIER • INT_TYPE ASSIGN expression_list
   18            | IDENTIFIER • INT_TYPE
   19            | IDENTIFIER • STRING_TYPE ASSIGN expression_list
   20            | IDENTIFIER • STRING_TYPE
   21 identifier_list: IDENTIFIER •
   22                | IDENTIFIER • COMMA identifier_list

    INT_TYPE     shift, and go to state 162
    STRING_TYPE  shift, and go to state 163
    COMMA        shift, and go to state 33

    $default  reduce using rule 21 (identifier_list)


State 95

   14 var_declarations: VAR declaration •

    $default  reduce using rule 14 (var_declarations)


State 96

   15 declaration: identifier_list •
   16            | identifier_list • ASSIGN expression_list

    ASSIGN  shift, and go to state 164

    $default  reduce using rule 15 (declaration)


State 97

   70 builtin: APPEND LPAREN • expression COMMA expression RPAREN

    APPEND      shift, and go to state 47
    LEN         shift, and go to state 48
    LPAREN      shift, and go to state 51
    BOOLEAN     shift, and go to state 53
    IDENTIFIER  shift, and go to state 54
    INTEGER     shift, and go to state 55
    STRING      shift, and go to state 56
    FLOAT       shift, and go to state 57

    expression          go to state 165
    primary_expression  go to state 62
    literal             go to state 63
    binary_op           go to state 64
    builtin             go to state 65


State 98

   71 builtin: LEN LPAREN • expression RPAREN

    APPEND      shift, and go to state 47
    LEN         shift, and go to state 48
    LPAREN      shift, and go to state 51
    BOOLEAN     shift, and go to state 53
    IDENTIFIER  shift, and go to state 54
    INTEGER     shift, and go to state 55
    STRING      shift, and go to state 56
    FLOAT       shift, and go to state 57

    expression          go to state 166
    primary_expression  go to state 62
    literal             go to state 63
    binary_op           go to state 64
    builtin             go to state 65


State 99

  124 print_stmt: PRINT LPAREN • expression_list RPAREN
  125           | PRINT LPAREN • RPAREN

    APPEND      shift, and go to state 47
    LEN         shift, and go to state 48
    LPAREN      shift, and go to state 51
    RPAREN      shift, and go to state 167
    BOOLEAN     shift, and go to state 53
    IDENTIFIER  shift, and go to state 54
    INTEGER     shift, and go to state 55
    STRING      shift, and go to state 56
    FLOAT       shift, and go to state 57

    expression_list     go to state 168
    expression          go to state 169
    primary_expression  go to state 62
    literal             go to state 63
    binary_op           go to state 64
    builtin             go to state 65


State 100

  126 println_stmt: PRINTLN LPAREN • expression_list RPAREN
  127             | PRINTLN LPAREN • RPAREN

    APPEND      shift, and go to state 47
    LEN         shift, and go to state 48
    LPAREN      shift, and go to state 51
    RPAREN      shift, and go to state 170
    BOOLEAN     shift, and go to state 53
    IDENTIFIER  shift, and go to state 54
    INTEGER     shift, and go to state 55
    STRING      shift, and go to state 56
    FLOAT       shift, and go to state 57

    expression_list     go to state 171
    expression          go to state 169
    primary_expression  go to state 62
    literal             go to state 63
    binary_op           go to state 64
    builtin             go to state 65


State 101

   42 primary_expression: LPAREN expression • RPAREN
   51 binary_op: expression • LOGICAL_OR expression
   52          | expression • LOGICAL_AND expression
   53          | expression • EQUAL_EQUAL expression
   54          | expression • NOT_EQUAL expression
   55          | expression • LESS_THAN_OR_EQUAL expression
   56          | expression • GREATER_THAN_OR_EQUAL expression
   57          | expression • LESS_THAN expression
   58          | expression • GREATER_THAN expression
   59          | expression • PLUS expression
   60          | expression • MINUS expression
   61          | expression • BITWISE_OR expression
   62          | expression • BITWISE_XOR expression
   63          | expression • TIMES expression
   64          | expression • DIVIDE expression
   65          | expression • MODULO expression
   66          | expression • RIGHT_SHIFT expression
   67          | expression • LEFT_SHIFT expression
   68          | expression • BITWISE_AND expression
   69          | expression • BIT_CLEAR expression

    PLUS                   shift, and go to state 105
    MINUS                  shift, and go to state 106
    TIMES                  shift, and go to state 107
    DIVIDE                 shift, and go to state 108
    MODULO                 shift, and go to state 109
    BITWISE_AND            shift, and go to state 110
    BITWISE_OR             shift, and go to state 111
    BITWISE_XOR            shift, and go to state 112
    BIT_CLEAR              shift, and go to state 113
    LEFT_SHIFT             shift, and go to state 114
    RIGHT_SHIFT            shift, and go to state 115
    EQUAL_EQUAL            shift, and go to state 129
    NOT_EQUAL              shift, and go to state 130
    LESS_THAN              shift, and go to state 131
    LESS_THAN_OR_EQUAL     shift, and go to state 132
    GREATER_THAN           shift, and go to state 133
    GREATER_THAN_OR_EQUAL  shift, and go to state 134
    LOGICAL_AND            shift, and go to state 135
    LOGICAL_OR             shift, and go to state 136
    RPAREN                 shift, and go to state 172


State 102

   82 statement: COMMENT statement •

    $default  reduce using rule 82 (statement)


State 103

   91 assignment: expression_list ASSIGN • expression_list

    APPEND      shift, and go to state 47
    LEN         shift, and go to state 48
    LPAREN      shift, and go to state 51
    BOOLEAN     shift, and go to state 53
    IDENTIFIER  shift, and go to state 54
    INTEGER     shift, and go to state 55
    STRING      shift, and go to state 56
    FLOAT       shift, and go to state 57

    expression_list     go to state 173
    expression          go to state 169
    primary_expression  go to state 62
    literal             go to state 63
    binary_op           go to state 64
    builtin             go to state 65


State 104

  106 short_variable_declaration: expression_list SHORT_VAR • expression_list

    APPEND      shift, and go to state 47
    LEN         shift, and go to state 48
    LPAREN      shift, and go to state 51
    BOOLEAN     shift, and go to state 53
    IDENTIFIER  shift, and go to state 54
    INTEGER     shift, and go to state 55
    STRING      shift, and go to state 56
    FLOAT       shift, and go to state 57

    expression_list     go to state 174
    expression          go to state 169
    primary_expression  go to state 62
    literal             go to state 63
    binary_op           go to state 64
    builtin             go to state 65


State 105

   59 binary_op: expression PLUS • expression

    APPEND      shift, and go to state 47
    LEN         shift, and go to state 48
    LPAREN      shift, and go to state 51
    BOOLEAN     shift, and go to state 53
    IDENTIFIER  shift, and go to state 54
    INTEGER     shift, and go to state 55
    STRING      shift, and go to state 56
    FLOAT       shift, and go to state 57

    expression          go to state 175
    primary_expression  go to state 62
    literal             go to state 63
    binary_op           go to state 64
    builtin             go to state 65


State 106

   60 binary_op: expression MINUS • expression

    APPEND      shift, and go to state 47
    LEN         shift, and go to state 48
    LPAREN      shift, and go to state 51
    BOOLEAN     shift, and go to state 53
    IDENTIFIER  shift, and go to state 54
    INTEGER     shift, and go to state 55
    STRING      shift, and go to state 56
    FLOAT       shift, and go to state 57

    expression          go to state 176
    primary_expression  go to state 62
    literal             go to state 63
    binary_op           go to state 64
    builtin             go to state 65


State 107

   63 binary_op: expression TIMES • expression

    APPEND      shift, and go to state 47
    LEN         shift, and go to state 48
    LPAREN      shift, and go to state 51
    BOOLEAN     shift, and go to state 53
    IDENTIFIER  shift, and go to state 54
    INTEGER     shift, and go to state 55
    STRING      shift, and go to state 56
    FLOAT       shift, and go to state 57

    expression          go to state 177
    primary_expression  go to state 62
    literal             go to state 63
    binary_op           go to state 64
    builtin             go to state 65


State 108

   64 binary_op: expression DIVIDE • expression

    APPEND      shift, and go to state 47
    LEN         shift, and go to state 48
    LPAREN      shift, and go to state 51
    BOOLEAN     shift, and go to state 53
    IDENTIFIER  shift, and go to state 54
    INTEGER     shift, and go to state 55
    STRING      shift, and go to state 56
    FLOAT       shift, and go to state 57

    expression          go to state 178
    primary_expression  go to state 62
    literal             go to state 63
    binary_op           go to state 64
    builtin             go to state 65


State 109

   65 binary_op: expression MODULO • expression

    APPEND      shift, and go to state 47
    LEN         shift, and go to state 48
    LPAREN      shift, and go to state 51
    BOOLEAN     shift, and go to state 53
    IDENTIFIER  shift, and go to state 54
    INTEGER     shift, and go to state 55
    STRING      shift, and go to state 56
    FLOAT       shift, and go to state 57

    expression          go to state 179
    primary_expression  go to state 62
    literal             go to state 63
    binary_op           go to state 64
    builtin             go to state 65


State 110

   68 binary_op: expression BITWISE_AND • expression

    APPEND      shift, and go to state 47
    LEN         shift, and go to state 48
    LPAREN      shift, and go to state 51
    BOOLEAN     shift, and go to state 53
    IDENTIFIER  shift, and go to state 54
    INTEGER     shift, and go to state 55
    STRING      shift, and go to state 56
    FLOAT       shift, and go to state 57

    expression          go to state 180
    primary_expression  go to state 62
    literal             go to state 63
    binary_op           go to state 64
    builtin             go to state 65


State 111

   61 binary_op: expression BITWISE_OR • expression

    APPEND      shift, and go to state 47
    LEN         shift, and go to state 48
    LPAREN      shift, and go to state 51
    BOOLEAN     shift, and go to state 53
    IDENTIFIER  shift, and go to state 54
    INTEGER     shift, and go to state 55
    STRING      shift, and go to state 56
    FLOAT       shift, and go to state 57

    expression          go to state 181
    primary_expression  go to state 62
    literal             go to state 63
    binary_op           go to state 64
    builtin             go to state 65


State 112

   62 binary_op: expression BITWISE_XOR • expression

    APPEND      shift, and go to state 47
    LEN         shift, and go to state 48
    LPAREN      shift, and go to state 51
    BOOLEAN     shift, and go to state 53
    IDENTIFIER  shift, and go to state 54
    INTEGER     shift, and go to state 55
    STRING      shift, and go to state 56
    FLOAT       shift, and go to state 57

    expression          go to state 182
    primary_expression  go to state 62
    literal             go to state 63
    binary_op           go to state 64
    builtin             go to state 65


State 113

   69 binary_op: expression BIT_CLEAR • expression

    APPEND      shift, and go to state 47
    LEN         shift, and go to state 48
    LPAREN      shift, and go to state 51
    BOOLEAN     shift, and go to state 53
    IDENTIFIER  shift, and go to state 54
    INTEGER     shift, and go to state 55
    STRING      shift, and go to state 56
    FLOAT       shift, and go to state 57

    expression          go to state 183
    primary_expression  go to state 62
    literal             go to state 63
    binary_op           go to state 64
    builtin             go to state 65


State 114

   67 binary_op: expression LEFT_SHIFT • expression

    APPEND      shift, and go to state 47
    LEN         shift, and go to state 48
    LPAREN      shift, and go to state 51
    BOOLEAN     shift, and go to state 53
    IDENTIFIER  shift, and go to state 54
    INTEGER     shift, and go to state 55
    STRING      shift, and go to state 56
    FLOAT       shift, and go to state 57

    expression          go to state 184
    primary_expression  go to state 62
    literal             go to state 63
    binary_op           go to state 64
    builtin             go to state 65


State 115

   66 binary_op: expression RIGHT_SHIFT • expression

    APPEND      shift, and go to state 47
    LEN         shift, and go to state 48
    LPAREN      shift, and go to state 51
    BOOLEAN     shift, and go to state 53
    IDENTIFIER  shift, and go to state 54
    INTEGER     shift, and go to state 55
    STRING      shift, and go to state 56
    FLOAT       shift, and go to state 57

    expression          go to state 185
    primary_expression  go to state 62
    literal             go to state 63
    binary_op           go to state 64
    builtin             go to state 65


State 116

   95 add_op_eq: ADD_ASSIGN •

    $default  reduce using rule 95 (add_op_eq)


State 117

   96 add_op_eq: SUB_ASSIGN •

    $default  reduce using rule 96 (add_op_eq)


State 118

   99 mul_op_eq: MUL_ASSIGN •

    $default  reduce using rule 99 (mul_op_eq)


State 119

  100 mul_op_eq: DIV_ASSIGN •

    $default  reduce using rule 100 (mul_op_eq)


State 120

  101 mul_op_eq: MOD_ASSIGN •

    $default  reduce using rule 101 (mul_op_eq)


State 121

  104 mul_op_eq: AND_ASSIGN •

    $default  reduce using rule 104 (mul_op_eq)


State 122

   97 add_op_eq: OR_ASSIGN •

    $default  reduce using rule 97 (add_op_eq)


State 123

   98 add_op_eq: XOR_ASSIGN •

    $default  reduce using rule 98 (add_op_eq)


State 124

  102 mul_op_eq: LEFT_SHIFT_ASSIGN •

    $default  reduce using rule 102 (mul_op_eq)


State 125

  103 mul_op_eq: RIGHT_SHIFT_ASSIGN •

    $default  reduce using rule 103 (mul_op_eq)


State 126

   89 inc_dec_stmt: expression INCREMENT •

    $default  reduce using rule 89 (inc_dec_stmt)


State 127

   90 inc_dec_stmt: expression DECREMENT •

    $default  reduce using rule 90 (inc_dec_stmt)


State 128

  105 mul_op_eq: CLEAR_ASSIGN •

    $default  reduce using rule 105 (mul_op_eq)


State 129

   53 binary_op: expression EQUAL_EQUAL • expression

    APPEND      shift, and go to state 47
    LEN         shift, and go to state 48
    LPAREN      shift, and go to state 51
    BOOLEAN     shift, and go to state 53
    IDENTIFIER  shift, and go to state 54
    INTEGER     shift, and go to state 55
    STRING      shift, and go to state 56
    FLOAT       shift, and go to state 57

    expression          go to state 186
    primary_expression  go to state 62
    literal             go to state 63
    binary_op           go to state 64
    builtin             go to state 65


State 130

   54 binary_op: expression NOT_EQUAL • expression

    APPEND      shift, and go to state 47
    LEN         shift, and go to state 48
    LPAREN      shift, and go to state 51
    BOOLEAN     shift, and go to state 53
    IDENTIFIER  shift, and go to state 54
    INTEGER     shift, and go to state 55
    STRING      shift, and go to state 56
    FLOAT       shift, and go to state 57

    expression          go to state 187
    primary_expression  go to state 62
    literal             go to state 63
    binary_op           go to state 64
    builtin             go to state 65


State 131

   57 binary_op: expression LESS_THAN • expression

    APPEND      shift, and go to state 47
    LEN         shift, and go to state 48
    LPAREN      shift, and go to state 51
    BOOLEAN     shift, and go to state 53
    IDENTIFIER  shift, and go to state 54
    INTEGER     shift, and go to state 55
    STRING      shift, and go to state 56
    FLOAT       shift, and go to state 57

    expression          go to state 188
    primary_expression  go to state 62
    literal             go to state 63
    binary_op           go to state 64
    builtin             go to state 65


State 132

   55 binary_op: expression LESS_THAN_OR_EQUAL • expression

    APPEND      shift, and go to state 47
    LEN         shift, and go to state 48
    LPAREN      shift, and go to state 51
    BOOLEAN     shift, and go to state 53
    IDENTIFIER  shift, and go to state 54
    INTEGER     shift, and go to state 55
    STRING      shift, and go to state 56
    FLOAT       shift, and go to state 57

    expression          go to state 189
    primary_expression  go to state 62
    literal             go to state 63
    binary_op           go to state 64
    builtin             go to state 65


State 133

   58 binary_op: expression GREATER_THAN • expression

    APPEND      shift, and go to state 47
    LEN         shift, and go to state 48
    LPAREN      shift, and go to state 51
    BOOLEAN     shift, and go to state 53
    IDENTIFIER  shift, and go to state 54
    INTEGER     shift, and go to state 55
    STRING      shift, and go to state 56
    FLOAT       shift, and go to state 57

    expression          go to state 190
    primary_expression  go to state 62
    literal             go to state 63
    binary_op           go to state 64
    builtin             go to state 65


State 134

   56 binary_op: expression GREATER_THAN_OR_EQUAL • expression

    APPEND      shift, and go to state 47
    LEN         shift, and go to state 48
    LPAREN      shift, and go to state 51
    BOOLEAN     shift, and go to state 53
    IDENTIFIER  shift, and go to state 54
    INTEGER     shift, and go to state 55
    STRING      shift, and go to state 56
    FLOAT       shift, and go to state 57

    expression          go to state 191
    primary_expression  go to state 62
    literal             go to state 63
    binary_op           go to state 64
    builtin             go to state 65


State 135

   52 binary_op: expression LOGICAL_AND • expression

    APPEND      shift, and go to state 47
    LEN         shift, and go to state 48
    LPAREN      shift, and go to state 51
    BOOLEAN     shift, and go to state 53
    IDENTIFIER  shift, and go to state 54
    INTEGER     shift, and go to state 55
    STRING      shift, and go to state 56
    FLOAT       shift, and go to state 57

    expression          go to state 192
    primary_expression  go to state 62
    literal             go to state 63
    binary_op           go to state 64
    builtin             go to state 65


State 136

   51 binary_op: expression LOGICAL_OR • expression

    APPEND      shift, and go to state 47
    LEN         shift, and go to state 48
    LPAREN      shift, and go to state 51
    BOOLEAN     shift, and go to state 53
    IDENTIFIER  shift, and go to state 54
    INTEGER     shift, and go to state 55
    STRING      shift, and go to state 56
    FLOAT       shift, and go to state 57

    expression          go to state 193
    primary_expression  go to state 62
    literal             go to state 63
    binary_op           go to state 64
    builtin             go to state 65


State 137

   36 expression_list: expression COMMA • expression_list

    APPEND      shift, and go to state 47
    LEN         shift, and go to state 48
    LPAREN      shift, and go to state 51
    BOOLEAN     shift, and go to state 53
    IDENTIFIER  shift, and go to state 54
    INTEGER     shift, and go to state 55
    STRING      shift, and go to state 56
    FLOAT       shift, and go to state 57

    expression_list     go to state 194
    expression          go to state 169
    primary_expression  go to state 62
    literal             go to state 63
    binary_op           go to state 64
    builtin             go to state 65


State 138

   92 assignment: expression assign_op • expression

    APPEND      shift, and go to state 47
    LEN         shift, and go to state 48
    LPAREN      shift, and go to state 51
    BOOLEAN     shift, and go to state 53
    IDENTIFIER  shift, and go to state 54
    INTEGER     shift, and go to state 55
    STRING      shift, and go to state 56
    FLOAT       shift, and go to state 57

    expression          go to state 195
    primary_expression  go to state 62
    literal             go to state 63
    binary_op           go to state 64
    builtin             go to state 65


State 139

   93 assign_op: add_op_eq •

    $default  reduce using rule 93 (assign_op)


State 140

   94 assign_op: mul_op_eq •

    $default  reduce using rule 94 (assign_op)


State 141

   43 primary_expression: primary_expression LPAREN • expression_list RPAREN
   44                   | primary_expression LPAREN • RPAREN

    APPEND      shift, and go to state 47
    LEN         shift, and go to state 48
    LPAREN      shift, and go to state 51
    RPAREN      shift, and go to state 196
    BOOLEAN     shift, and go to state 53
    IDENTIFIER  shift, and go to state 54
    INTEGER     shift, and go to state 55
    STRING      shift, and go to state 56
    FLOAT       shift, and go to state 57

    expression_list     go to state 197
    expression          go to state 169
    primary_expression  go to state 62
    literal             go to state 63
    binary_op           go to state 64
    builtin             go to state 65


State 142

   45 primary_expression: primary_expression '.' • IDENTIFIER

    IDENTIFIER  shift, and go to state 198


State 143

   46 primary_expression: primary_expression '[' • expression ']'

    APPEND      shift, and go to state 47
    LEN         shift, and go to state 48
    LPAREN      shift, and go to state 51
    BOOLEAN     shift, and go to state 53
    IDENTIFIER  shift, and go to state 54
    INTEGER     shift, and go to state 55
    STRING      shift, and go to state 56
    FLOAT       shift, and go to state 57

    expression          go to state 199
    primary_expression  go to state 62
    literal             go to state 63
    binary_op           go to state 64
    builtin             go to state 65


State 144

  111 block_stmt: LBRACE statement RBRACE •

    $default  reduce using rule 111 (block_stmt)


State 145

   72 statement: declaration_stmt statement •

    $default  reduce using rule 72 (statement)


State 146

   73 statement: simple_stmt statement •

    $default  reduce using rule 73 (statement)


State 147

   74 statement: return_stmt statement •

    $default  reduce using rule 74 (statement)


State 148

   75 statement: break_stmt statement •

    $default  reduce using rule 75 (statement)


State 149

   76 statement: continue_stmt statement •

    $default  reduce using rule 76 (statement)


State 150

   77 statement: block_stmt statement •

    $default  reduce using rule 77 (statement)


State 151

   78 statement: if_stmt statement •

    $default  reduce using rule 78 (statement)


State 152

   79 statement: for_stmt statement •

    $default  reduce using rule 79 (statement)


State 153

   80 statement: print_stmt statement •

    $default  reduce using rule 80 (statement)


State 154

   81 statement: println_stmt statement •

    $default  reduce using rule 81 (statement)


State 155

   29 parameter_unit: identifier_list LPAREN IDENTIFIER RPAREN •

    $default  reduce using rule 29 (parameter_unit)


State 156

   31 bracket: '[' INTEGER ']' •

    $default  reduce using rule 31 (bracket)


State 157

  113 if_stmt: IF expression block_stmt •
  117        | IF expression block_stmt • ELSE if_stmt
  118        | IF expression block_stmt • ELSE block_stmt

    ELSE  shift, and go to state 200

    $default  reduce using rule 113 (if_stmt)


State 158

   51 binary_op: expression • LOGICAL_OR expression
   52          | expression • LOGICAL_AND expression
   53          | expression • EQUAL_EQUAL expression
   54          | expression • NOT_EQUAL expression
   55          | expression • LESS_THAN_OR_EQUAL expression
   56          | expression • GREATER_THAN_OR_EQUAL expression
   57          | expression • LESS_THAN expression
   58          | expression • GREATER_THAN expression
   59          | expression • PLUS expression
   60          | expression • MINUS expression
   61          | expression • BITWISE_OR expression
   62          | expression • BITWISE_XOR expression
   63          | expression • TIMES expression
   64          | expression • DIVIDE expression
   65          | expression • MODULO expression
   66          | expression • RIGHT_SHIFT expression
   67          | expression • LEFT_SHIFT expression
   68          | expression • BITWISE_AND expression
   69          | expression • BIT_CLEAR expression
  114 if_stmt: IF simple_stmt expression • block_stmt
  115        | IF simple_stmt expression • block_stmt ELSE if_stmt
  116        | IF simple_stmt expression • block_stmt ELSE block_stmt

    PLUS                   shift, and go to state 105
    MINUS                  shift, and go to state 106
    TIMES                  shift, and go to state 107
    DIVIDE                 shift, and go to state 108
    MODULO                 shift, and go to state 109
    BITWISE_AND            shift, and go to state 110
    BITWISE_OR             shift, and go to state 111
    BITWISE_XOR            shift, and go to state 112
    BIT_CLEAR              shift, and go to state 113
    LEFT_SHIFT             shift, and go to state 114
    RIGHT_SHIFT            shift, and go to state 115
    EQUAL_EQUAL            shift, and go to state 129
    NOT_EQUAL              shift, and go to state 130
    LESS_THAN              shift, and go to state 131
    LESS_THAN_OR_EQUAL     shift, and go to state 132
    GREATER_THAN           shift, and go to state 133
    GREATER_THAN_OR_EQUAL  shift, and go to state 134
    LOGICAL_AND            shift, and go to state 135
    LOGICAL_OR             shift, and go to state 136
    LBRACE                 shift, and go to state 31

    block_stmt  go to state 201


State 159

  120 for_stmt: FOR expression block_stmt •

    $default  reduce using rule 120 (for_stmt)


State 160

  122 for_clause: simple_stmt SEMICOLON • simple_stmt
  123           | simple_stmt SEMICOLON • expression SEMICOLON simple_stmt

    APPEND      shift, and go to state 47
    LEN         shift, and go to state 48
    LPAREN      shift, and go to state 51
    BOOLEAN     shift, and go to state 53
    IDENTIFIER  shift, and go to state 54
    INTEGER     shift, and go to state 55
    STRING      shift, and go to state 56
    FLOAT       shift, and go to state 57

    $default  reduce using rule 85 (simple_stmt)

    expression_list             go to state 60
    expression                  go to state 202
    primary_expression          go to state 62
    literal                     go to state 63
    binary_op                   go to state 64
    builtin                     go to state 65
    simple_stmt                 go to state 203
    inc_dec_stmt                go to state 69
    assignment                  go to state 70
    short_variable_declaration  go to state 71


State 161

  121 for_stmt: FOR for_clause block_stmt •

    $default  reduce using rule 121 (for_stmt)


State 162

   17 declaration: IDENTIFIER INT_TYPE • ASSIGN expression_list
   18            | IDENTIFIER INT_TYPE •

    ASSIGN  shift, and go to state 204

    $default  reduce using rule 18 (declaration)


State 163

   19 declaration: IDENTIFIER STRING_TYPE • ASSIGN expression_list
   20            | IDENTIFIER STRING_TYPE •

    ASSIGN  shift, and go to state 205

    $default  reduce using rule 20 (declaration)


State 164

   16 declaration: identifier_list ASSIGN • expression_list

    APPEND      shift, and go to state 47
    LEN         shift, and go to state 48
    LPAREN      shift, and go to state 51
    BOOLEAN     shift, and go to state 53
    IDENTIFIER  shift, and go to state 54
    INTEGER     shift, and go to state 55
    STRING      shift, and go to state 56
    FLOAT       shift, and go to state 57

    expression_list     go to state 206
    expression          go to state 169
    primary_expression  go to state 62
    literal             go to state 63
    binary_op           go to state 64
    builtin             go to state 65


State 165

   51 binary_op: expression • LOGICAL_OR expression
   52          | expression • LOGICAL_AND expression
   53          | expression • EQUAL_EQUAL expression
   54          | expression • NOT_EQUAL expression
   55          | expression • LESS_THAN_OR_EQUAL expression
   56          | expression • GREATER_THAN_OR_EQUAL expression
   57          | expression • LESS_THAN expression
   58          | expression • GREATER_THAN expression
   59          | expression • PLUS expression
   60          | expression • MINUS expression
   61          | expression • BITWISE_OR expression
   62          | expression • BITWISE_XOR expression
   63          | expression • TIMES expression
   64          | expression • DIVIDE expression
   65          | expression • MODULO expression
   66          | expression • RIGHT_SHIFT expression
   67          | expression • LEFT_SHIFT expression
   68          | expression • BITWISE_AND expression
   69          | expression • BIT_CLEAR expression
   70 builtin: APPEND LPAREN expression • COMMA expression RPAREN

    PLUS                   shift, and go to state 105
    MINUS                  shift, and go to state 106
    TIMES                  shift, and go to state 107
    DIVIDE                 shift, and go to state 108
    MODULO                 shift, and go to state 109
    BITWISE_AND            shift, and go to state 110
    BITWISE_OR             shift, and go to state 111
    BITWISE_XOR            shift, and go to state 112
    BIT_CLEAR              shift, and go to state 113
    LEFT_SHIFT             shift, and go to state 114
    RIGHT_SHIFT            shift, and go to state 115
    EQUAL_EQUAL            shift, and go to state 129
    NOT_EQUAL              shift, and go to state 130
    LESS_THAN              shift, and go to state 131
    LESS_THAN_OR_EQUAL     shift, and go to state 132
    GREATER_THAN           shift, and go to state 133
    GREATER_THAN_OR_EQUAL  shift, and go to state 134
    LOGICAL_AND            shift, and go to state 135
    LOGICAL_OR             shift, and go to state 136
    COMMA                  shift, and go to state 207


State 166

   51 binary_op: expression • LOGICAL_OR expression
   52          | expression • LOGICAL_AND expression
   53          | expression • EQUAL_EQUAL expression
   54          | expression • NOT_EQUAL expression
   55          | expression • LESS_THAN_OR_EQUAL expression
   56          | expression • GREATER_THAN_OR_EQUAL expression
   57          | expression • LESS_THAN expression
   58          | expression • GREATER_THAN expression
   59          | expression • PLUS expression
   60          | expression • MINUS expression
   61          | expression • BITWISE_OR expression
   62          | expression • BITWISE_XOR expression
   63          | expression • TIMES expression
   64          | expression • DIVIDE expression
   65          | expression • MODULO expression
   66          | expression • RIGHT_SHIFT expression
   67          | expression • LEFT_SHIFT expression
   68          | expression • BITWISE_AND expression
   69          | expression • BIT_CLEAR expression
   71 builtin: LEN LPAREN expression • RPAREN

    PLUS                   shift, and go to state 105
    MINUS                  shift, and go to state 106
    TIMES                  shift, and go to state 107
    DIVIDE                 shift, and go to state 108
    MODULO                 shift, and go to state 109
    BITWISE_AND            shift, and go to state 110
    BITWISE_OR             shift, and go to state 111
    BITWISE_XOR            shift, and go to state 112
    BIT_CLEAR              shift, and go to state 113
    LEFT_SHIFT             shift, and go to state 114
    RIGHT_SHIFT            shift, and go to state 115
    EQUAL_EQUAL            shift, and go to state 129
    NOT_EQUAL              shift, and go to state 130
    LESS_THAN              shift, and go to state 131
    LESS_THAN_OR_EQUAL     shift, and go to state 132
    GREATER_THAN           shift, and go to state 133
    GREATER_THAN_OR_EQUAL  shift, and go to state 134
    LOGICAL_AND            shift, and go to state 135
    LOGICAL_OR             shift, and go to state 136
    RPAREN                 shift, and go to state 208


State 167

  125 print_stmt: PRINT LPAREN RPAREN •

    $default  reduce using rule 125 (print_stmt)


State 168

  124 print_stmt: PRINT LPAREN expression_list • RPAREN

    RPAREN  shift, and go to state 209


State 169

   35 expression_list: expression •
   36                | expression • COMMA expression_list
   51 binary_op: expression • LOGICAL_OR expression
   52          | expression • LOGICAL_AND expression
   53          | expression • EQUAL_EQUAL expression
   54          | expression • NOT_EQUAL expression
   55          | expression • LESS_THAN_OR_EQUAL expression
   56          | expression • GREATER_THAN_OR_EQUAL expression
   57          | expression • LESS_THAN expression
   58          | expression • GREATER_THAN expression
   59          | expression • PLUS expression
   60          | expression • MINUS expression
   61          | expression • BITWISE_OR expression
   62          | expression • BITWISE_XOR expression
   63          | expression • TIMES expression
   64          | expression • DIVIDE expression
   65          | expression • MODULO expression
   66          | expression • RIGHT_SHIFT expression
   67          | expression • LEFT_SHIFT expression
   68          | expression • BITWISE_AND expression
   69          | expression • BIT_CLEAR expression

    PLUS                   shift, and go to state 105
    MINUS                  shift, and go to state 106
    TIMES                  shift, and go to state 107
    DIVIDE                 shift, and go to state 108
    MODULO                 shift, and go to state 109
    BITWISE_AND            shift, and go to state 110
    BITWISE_OR             shift, and go to state 111
    BITWISE_XOR            shift, and go to state 112
    BIT_CLEAR              shift, and go to state 113
    LEFT_SHIFT             shift, and go to state 114
    RIGHT_SHIFT            shift, and go to state 115
    EQUAL_EQUAL            shift, and go to state 129
    NOT_EQUAL              shift, and go to state 130
    LESS_THAN              shift, and go to state 131
    LESS_THAN_OR_EQUAL     shift, and go to state 132
    GREATER_THAN           shift, and go to state 133
    GREATER_THAN_OR_EQUAL  shift, and go to state 134
    LOGICAL_AND            shift, and go to state 135
    LOGICAL_OR             shift, and go to state 136
    COMMA                  shift, and go to state 137

    $default  reduce using rule 35 (expression_list)


State 170

  127 println_stmt: PRINTLN LPAREN RPAREN •

    $default  reduce using rule 127 (println_stmt)


State 171

  126 println_stmt: PRINTLN LPAREN expression_list • RPAREN

    RPAREN  shift, and go to state 210


State 172

   42 primary_expression: LPAREN expression RPAREN •

    $default  reduce using rule 42 (primary_expression)


State 173

   91 assignment: expression_list ASSIGN expression_list •

    $default  reduce using rule 91 (assignment)


State 174

  106 short_variable_declaration: expression_list SHORT_VAR expression_list •

    $default  reduce using rule 106 (short_variable_declaration)


State 175

   51 binary_op: expression • LOGICAL_OR expression
   52          | expression • LOGICAL_AND expression
   53          | expression • EQUAL_EQUAL expression
   54          | expression • NOT_EQUAL expression
   55          | expression • LESS_THAN_OR_EQUAL expression
   56          | expression • GREATER_THAN_OR_EQUAL expression
   57          | expression • LESS_THAN expression
   58          | expression • GREATER_THAN expression
   59          | expression • PLUS expression
   59          | expression PLUS expression •
   60          | expression • MINUS expression
   61          | expression • BITWISE_OR expression
   62          | expression • BITWISE_XOR expression
   63          | expression • TIMES expression
   64          | expression • DIVIDE expression
   65          | expression • MODULO expression
   66          | expression • RIGHT_SHIFT expression
   67          | expression • LEFT_SHIFT expression
   68          | expression • BITWISE_AND expression
   69          | expression • BIT_CLEAR expression

    PLUS                   shift, and go to state 105
    MINUS                  shift, and go to state 106
    TIMES                  shift, and go to state 107
    DIVIDE                 shift, and go to state 108
    MODULO                 shift, and go to state 109
    BITWISE_AND            shift, and go to state 110
    BITWISE_OR             shift, and go to state 111
    BITWISE_XOR            shift, and go to state 112
    BIT_CLEAR              shift, and go to state 113
    LEFT_SHIFT             shift, and go to state 114
    RIGHT_SHIFT            shift, and go to state 115
    EQUAL_EQUAL            shift, and go to state 129
    NOT_EQUAL              shift, and go to state 130
    LESS_THAN              shift, and go to state 131
    LESS_THAN_OR_EQUAL     shift, and go to state 132
    GREATER_THAN           shift, and go to state 133
    GREATER_THAN_OR_EQUAL  shift, and go to state 134
    LOGICAL_AND            shift, and go to state 135
    LOGICAL_OR             shift, and go to state 136

    PLUS                   [reduce using rule 59 (binary_op)]
    MINUS                  [reduce using rule 59 (binary_op)]
    TIMES                  [reduce using rule 59 (binary_op)]
    DIVIDE                 [reduce using rule 59 (binary_op)]
    MODULO                 [reduce using rule 59 (binary_op)]
    BITWISE_AND            [reduce using rule 59 (binary_op)]
    BITWISE_OR             [reduce using rule 59 (binary_op)]
    BITWISE_XOR            [reduce using rule 59 (binary_op)]
    BIT_CLEAR              [reduce using rule 59 (binary_op)]
    LEFT_SHIFT             [reduce using rule 59 (binary_op)]
    RIGHT_SHIFT            [reduce using rule 59 (binary_op)]
    EQUAL_EQUAL            [reduce using rule 59 (binary_op)]
    NOT_EQUAL              [reduce using rule 59 (binary_op)]
    LESS_THAN              [reduce using rule 59 (binary_op)]
    LESS_THAN_OR_EQUAL     [reduce using rule 59 (binary_op)]
    GREATER_THAN           [reduce using rule 59 (binary_op)]
    GREATER_THAN_OR_EQUAL  [reduce using rule 59 (binary_op)]
    LOGICAL_AND            [reduce using rule 59 (binary_op)]
    LOGICAL_OR             [reduce using rule 59 (binary_op)]
    $default               reduce using rule 59 (binary_op)


State 176

   51 binary_op: expression • LOGICAL_OR expression
   52          | expression • LOGICAL_AND expression
   53          | expression • EQUAL_EQUAL expression
   54          | expression • NOT_EQUAL expression
   55          | expression • LESS_THAN_OR_EQUAL expression
   56          | expression • GREATER_THAN_OR_EQUAL expression
   57          | expression • LESS_THAN expression
   58          | expression • GREATER_THAN expression
   59          | expression • PLUS expression
   60          | expression • MINUS expression
   60          | expression MINUS expression •
   61          | expression • BITWISE_OR expression
   62          | expression • BITWISE_XOR expression
   63          | expression • TIMES expression
   64          | expression • DIVIDE expression
   65          | expression • MODULO expression
   66          | expression • RIGHT_SHIFT expression
   67          | expression • LEFT_SHIFT expression
   68          | expression • BITWISE_AND expression
   69          | expression • BIT_CLEAR expression

    PLUS                   shift, and go to state 105
    MINUS                  shift, and go to state 106
    TIMES                  shift, and go to state 107
    DIVIDE                 shift, and go to state 108
    MODULO                 shift, and go to state 109
    BITWISE_AND            shift, and go to state 110
    BITWISE_OR             shift, and go to state 111
    BITWISE_XOR            shift, and go to state 112
    BIT_CLEAR              shift, and go to state 113
    LEFT_SHIFT             shift, and go to state 114
    RIGHT_SHIFT            shift, and go to state 115
    EQUAL_EQUAL            shift, and go to state 129
    NOT_EQUAL              shift, and go to state 130
    LESS_THAN              shift, and go to state 131
    LESS_THAN_OR_EQUAL     shift, and go to state 132
    GREATER_THAN           shift, and go to state 133
    GREATER_THAN_OR_EQUAL  shift, and go to state 134
    LOGICAL_AND            shift, and go to state 135
    LOGICAL_OR             shift, and go to state 136

    PLUS                   [reduce using rule 60 (binary_op)]
    MINUS                  [reduce using rule 60 (binary_op)]
    TIMES                  [reduce using rule 60 (binary_op)]
    DIVIDE                 [reduce using rule 60 (binary_op)]
    MODULO                 [reduce using rule 60 (binary_op)]
    BITWISE_AND            [reduce using rule 60 (binary_op)]
    BITWISE_OR             [reduce using rule 60 (binary_op)]
    BITWISE_XOR            [reduce using rule 60 (binary_op)]
    BIT_CLEAR              [reduce using rule 60 (binary_op)]
    LEFT_SHIFT             [reduce using rule 60 (binary_op)]
    RIGHT_SHIFT            [reduce using rule 60 (binary_op)]
    EQUAL_EQUAL            [reduce using rule 60 (binary_op)]
    NOT_EQUAL              [reduce using rule 60 (binary_op)]
    LESS_THAN              [reduce using rule 60 (binary_op)]
    LESS_THAN_OR_EQUAL     [reduce using rule 60 (binary_op)]
    GREATER_THAN           [reduce using rule 60 (binary_op)]
    GREATER_THAN_OR_EQUAL  [reduce using rule 60 (binary_op)]
    LOGICAL_AND            [reduce using rule 60 (binary_op)]
    LOGICAL_OR             [reduce using rule 60 (binary_op)]
    $default               reduce using rule 60 (binary_op)


State 177

   51 binary_op: expression • LOGICAL_OR expression
   52          | expression • LOGICAL_AND expression
   53          | expression • EQUAL_EQUAL expression
   54          | expression • NOT_EQUAL expression
   55          | expression • LESS_THAN_OR_EQUAL expression
   56          | expression • GREATER_THAN_OR_EQUAL expression
   57          | expression • LESS_THAN expression
   58          | expression • GREATER_THAN expression
   59          | expression • PLUS expression
   60          | expression • MINUS expression
   61          | expression • BITWISE_OR expression
   62          | expression • BITWISE_XOR expression
   63          | expression • TIMES expression
   63          | expression TIMES expression •
   64          | expression • DIVIDE expression
   65          | expression • MODULO expression
   66          | expression • RIGHT_SHIFT expression
   67          | expression • LEFT_SHIFT expression
   68          | expression • BITWISE_AND expression
   69          | expression • BIT_CLEAR expression

    PLUS                   shift, and go to state 105
    MINUS                  shift, and go to state 106
    TIMES                  shift, and go to state 107
    DIVIDE                 shift, and go to state 108
    MODULO                 shift, and go to state 109
    BITWISE_AND            shift, and go to state 110
    BITWISE_OR             shift, and go to state 111
    BITWISE_XOR            shift, and go to state 112
    BIT_CLEAR              shift, and go to state 113
    LEFT_SHIFT             shift, and go to state 114
    RIGHT_SHIFT            shift, and go to state 115
    EQUAL_EQUAL            shift, and go to state 129
    NOT_EQUAL              shift, and go to state 130
    LESS_THAN              shift, and go to state 131
    LESS_THAN_OR_EQUAL     shift, and go to state 132
    GREATER_THAN           shift, and go to state 133
    GREATER_THAN_OR_EQUAL  shift, and go to state 134
    LOGICAL_AND            shift, and go to state 135
    LOGICAL_OR             shift, and go to state 136

    PLUS                   [reduce using rule 63 (binary_op)]
    MINUS                  [reduce using rule 63 (binary_op)]
    TIMES                  [reduce using rule 63 (binary_op)]
    DIVIDE                 [reduce using rule 63 (binary_op)]
    MODULO                 [reduce using rule 63 (binary_op)]
    BITWISE_AND            [reduce using rule 63 (binary_op)]
    BITWISE_OR             [reduce using rule 63 (binary_op)]
    BITWISE_XOR            [reduce using rule 63 (binary_op)]
    BIT_CLEAR              [reduce using rule 63 (binary_op)]
    LEFT_SHIFT             [reduce using rule 63 (binary_op)]
    RIGHT_SHIFT            [reduce using rule 63 (binary_op)]
    EQUAL_EQUAL            [reduce using rule 63 (binary_op)]
    NOT_EQUAL              [reduce using rule 63 (binary_op)]
    LESS_THAN              [reduce using rule 63 (binary_op)]
    LESS_THAN_OR_EQUAL     [reduce using rule 63 (binary_op)]
    GREATER_THAN           [reduce using rule 63 (binary_op)]
    GREATER_THAN_OR_EQUAL  [reduce using rule 63 (binary_op)]
    LOGICAL_AND            [reduce using rule 63 (binary_op)]
    LOGICAL_OR             [reduce using rule 63 (binary_op)]
    $default               reduce using rule 63 (binary_op)


State 178

   51 binary_op: expression • LOGICAL_OR expression
   52          | expression • LOGICAL_AND expression
   53          | expression • EQUAL_EQUAL expression
   54          | expression • NOT_EQUAL expression
   55          | expression • LESS_THAN_OR_EQUAL expression
   56          | expression • GREATER_THAN_OR_EQUAL expression
   57          | expression • LESS_THAN expression
   58          | expression • GREATER_THAN expression
   59          | expression • PLUS expression
   60          | expression • MINUS expression
   61          | expression • BITWISE_OR expression
   62          | expression • BITWISE_XOR expression
   63          | expression • TIMES expression
   64          | expression • DIVIDE expression
   64          | expression DIVIDE expression •
   65          | expression • MODULO expression
   66          | expression • RIGHT_SHIFT expression
   67          | expression • LEFT_SHIFT expression
   68          | expression • BITWISE_AND expression
   69          | expression • BIT_CLEAR expression

    PLUS                   shift, and go to state 105
    MINUS                  shift, and go to state 106
    TIMES                  shift, and go to state 107
    DIVIDE                 shift, and go to state 108
    MODULO                 shift, and go to state 109
    BITWISE_AND            shift, and go to state 110
    BITWISE_OR             shift, and go to state 111
    BITWISE_XOR            shift, and go to state 112
    BIT_CLEAR              shift, and go to state 113
    LEFT_SHIFT             shift, and go to state 114
    RIGHT_SHIFT            shift, and go to state 115
    EQUAL_EQUAL            shift, and go to state 129
    NOT_EQUAL              shift, and go to state 130
    LESS_THAN              shift, and go to state 131
    LESS_THAN_OR_EQUAL     shift, and go to state 132
    GREATER_THAN           shift, and go to state 133
    GREATER_THAN_OR_EQUAL  shift, and go to state 134
    LOGICAL_AND            shift, and go to state 135
    LOGICAL_OR             shift, and go to state 136

    PLUS                   [reduce using rule 64 (binary_op)]
    MINUS                  [reduce using rule 64 (binary_op)]
    TIMES                  [reduce using rule 64 (binary_op)]
    DIVIDE                 [reduce using rule 64 (binary_op)]
    MODULO                 [reduce using rule 64 (binary_op)]
    BITWISE_AND            [reduce using rule 64 (binary_op)]
    BITWISE_OR             [reduce using rule 64 (binary_op)]
    BITWISE_XOR            [reduce using rule 64 (binary_op)]
    BIT_CLEAR              [reduce using rule 64 (binary_op)]
    LEFT_SHIFT             [reduce using rule 64 (binary_op)]
    RIGHT_SHIFT            [reduce using rule 64 (binary_op)]
    EQUAL_EQUAL            [reduce using rule 64 (binary_op)]
    NOT_EQUAL              [reduce using rule 64 (binary_op)]
    LESS_THAN              [reduce using rule 64 (binary_op)]
    LESS_THAN_OR_EQUAL     [reduce using rule 64 (binary_op)]
    GREATER_THAN           [reduce using rule 64 (binary_op)]
    GREATER_THAN_OR_EQUAL  [reduce using rule 64 (binary_op)]
    LOGICAL_AND            [reduce using rule 64 (binary_op)]
    LOGICAL_OR             [reduce using rule 64 (binary_op)]
    $default               reduce using rule 64 (binary_op)


State 179

   51 binary_op: expression • LOGICAL_OR expression
   52          | expression • LOGICAL_AND expression
   53          | expression • EQUAL_EQUAL expression
   54          | expression • NOT_EQUAL expression
   55          | expression • LESS_THAN_OR_EQUAL expression
   56          | expression • GREATER_THAN_OR_EQUAL expression
   57          | expression • LESS_THAN expression
   58          | expression • GREATER_THAN expression
   59          | expression • PLUS expression
   60          | expression • MINUS expression
   61          | expression • BITWISE_OR expression
   62          | expression • BITWISE_XOR expression
   63          | expression • TIMES expression
   64          | expression • DIVIDE expression
   65          | expression • MODULO expression
   65          | expression MODULO expression •
   66          | expression • RIGHT_SHIFT expression
   67          | expression • LEFT_SHIFT expression
   68          | expression • BITWISE_AND expression
   69          | expression • BIT_CLEAR expression

    PLUS                   shift, and go to state 105
    MINUS                  shift, and go to state 106
    TIMES                  shift, and go to state 107
    DIVIDE                 shift, and go to state 108
    MODULO                 shift, and go to state 109
    BITWISE_AND            shift, and go to state 110
    BITWISE_OR             shift, and go to state 111
    BITWISE_XOR            shift, and go to state 112
    BIT_CLEAR              shift, and go to state 113
    LEFT_SHIFT             shift, and go to state 114
    RIGHT_SHIFT            shift, and go to state 115
    EQUAL_EQUAL            shift, and go to state 129
    NOT_EQUAL              shift, and go to state 130
    LESS_THAN              shift, and go to state 131
    LESS_THAN_OR_EQUAL     shift, and go to state 132
    GREATER_THAN           shift, and go to state 133
    GREATER_THAN_OR_EQUAL  shift, and go to state 134
    LOGICAL_AND            shift, and go to state 135
    LOGICAL_OR             shift, and go to state 136

    PLUS                   [reduce using rule 65 (binary_op)]
    MINUS                  [reduce using rule 65 (binary_op)]
    TIMES                  [reduce using rule 65 (binary_op)]
    DIVIDE                 [reduce using rule 65 (binary_op)]
    MODULO                 [reduce using rule 65 (binary_op)]
    BITWISE_AND            [reduce using rule 65 (binary_op)]
    BITWISE_OR             [reduce using rule 65 (binary_op)]
    BITWISE_XOR            [reduce using rule 65 (binary_op)]
    BIT_CLEAR              [reduce using rule 65 (binary_op)]
    LEFT_SHIFT             [reduce using rule 65 (binary_op)]
    RIGHT_SHIFT            [reduce using rule 65 (binary_op)]
    EQUAL_EQUAL            [reduce using rule 65 (binary_op)]
    NOT_EQUAL              [reduce using rule 65 (binary_op)]
    LESS_THAN              [reduce using rule 65 (binary_op)]
    LESS_THAN_OR_EQUAL     [reduce using rule 65 (binary_op)]
    GREATER_THAN           [reduce using rule 65 (binary_op)]
    GREATER_THAN_OR_EQUAL  [reduce using rule 65 (binary_op)]
    LOGICAL_AND            [reduce using rule 65 (binary_op)]
    LOGICAL_OR             [reduce using rule 65 (binary_op)]
    $default               reduce using rule 65 (binary_op)


State 180

   51 binary_op: expression • LOGICAL_OR expression
   52          | expression • LOGICAL_AND expression
   53          | expression • EQUAL_EQUAL expression
   54          | expression • NOT_EQUAL expression
   55          | expression • LESS_THAN_OR_EQUAL expression
   56          | expression • GREATER_THAN_OR_EQUAL expression
   57          | expression • LESS_THAN expression
   58          | expression • GREATER_THAN expression
   59          | expression • PLUS expression
   60          | expression • MINUS expression
   61          | expression • BITWISE_OR expression
   62          | expression • BITWISE_XOR expression
   63          | expression • TIMES expression
   64          | expression • DIVIDE expression
   65          | expression • MODULO expression
   66          | expression • RIGHT_SHIFT expression
   67          | expression • LEFT_SHIFT expression
   68          | expression • BITWISE_AND expression
   68          | expression BITWISE_AND expression •
   69          | expression • BIT_CLEAR expression

    PLUS                   shift, and go to state 105
    MINUS                  shift, and go to state 106
    TIMES                  shift, and go to state 107
    DIVIDE                 shift, and go to state 108
    MODULO                 shift, and go to state 109
    BITWISE_AND            shift, and go to state 110
    BITWISE_OR             shift, and go to state 111
    BITWISE_XOR            shift, and go to state 112
    BIT_CLEAR              shift, and go to state 113
    LEFT_SHIFT             shift, and go to state 114
    RIGHT_SHIFT            shift, and go to state 115
    EQUAL_EQUAL            shift, and go to state 129
    NOT_EQUAL              shift, and go to state 130
    LESS_THAN              shift, and go to state 131
    LESS_THAN_OR_EQUAL     shift, and go to state 132
    GREATER_THAN           shift, and go to state 133
    GREATER_THAN_OR_EQUAL  shift, and go to state 134
    LOGICAL_AND            shift, and go to state 135
    LOGICAL_OR             shift, and go to state 136

    PLUS                   [reduce using rule 68 (binary_op)]
    MINUS                  [reduce using rule 68 (binary_op)]
    TIMES                  [reduce using rule 68 (binary_op)]
    DIVIDE                 [reduce using rule 68 (binary_op)]
    MODULO                 [reduce using rule 68 (binary_op)]
    BITWISE_AND            [reduce using rule 68 (binary_op)]
    BITWISE_OR             [reduce using rule 68 (binary_op)]
    BITWISE_XOR            [reduce using rule 68 (binary_op)]
    BIT_CLEAR              [reduce using rule 68 (binary_op)]
    LEFT_SHIFT             [reduce using rule 68 (binary_op)]
    RIGHT_SHIFT            [reduce using rule 68 (binary_op)]
    EQUAL_EQUAL            [reduce using rule 68 (binary_op)]
    NOT_EQUAL              [reduce using rule 68 (binary_op)]
    LESS_THAN              [reduce using rule 68 (binary_op)]
    LESS_THAN_OR_EQUAL     [reduce using rule 68 (binary_op)]
    GREATER_THAN           [reduce using rule 68 (binary_op)]
    GREATER_THAN_OR_EQUAL  [reduce using rule 68 (binary_op)]
    LOGICAL_AND            [reduce using rule 68 (binary_op)]
    LOGICAL_OR             [reduce using rule 68 (binary_op)]
    $default               reduce using rule 68 (binary_op)


State 181

   51 binary_op: expression • LOGICAL_OR expression
   52          | expression • LOGICAL_AND expression
   53          | expression • EQUAL_EQUAL expression
   54          | expression • NOT_EQUAL expression
   55          | expression • LESS_THAN_OR_EQUAL expression
   56          | expression • GREATER_THAN_OR_EQUAL expression
   57          | expression • LESS_THAN expression
   58          | expression • GREATER_THAN expression
   59          | expression • PLUS expression
   60          | expression • MINUS expression
   61          | expression • BITWISE_OR expression
   61          | expression BITWISE_OR expression •
   62          | expression • BITWISE_XOR expression
   63          | expression • TIMES expression
   64          | expression • DIVIDE expression
   65          | expression • MODULO expression
   66          | expression • RIGHT_SHIFT expression
   67          | expression • LEFT_SHIFT expression
   68          | expression • BITWISE_AND expression
   69          | expression • BIT_CLEAR expression

    PLUS                   shift, and go to state 105
    MINUS                  shift, and go to state 106
    TIMES                  shift, and go to state 107
    DIVIDE                 shift, and go to state 108
    MODULO                 shift, and go to state 109
    BITWISE_AND            shift, and go to state 110
    BITWISE_OR             shift, and go to state 111
    BITWISE_XOR            shift, and go to state 112
    BIT_CLEAR              shift, and go to state 113
    LEFT_SHIFT             shift, and go to state 114
    RIGHT_SHIFT            shift, and go to state 115
    EQUAL_EQUAL            shift, and go to state 129
    NOT_EQUAL              shift, and go to state 130
    LESS_THAN              shift, and go to state 131
    LESS_THAN_OR_EQUAL     shift, and go to state 132
    GREATER_THAN           shift, and go to state 133
    GREATER_THAN_OR_EQUAL  shift, and go to state 134
    LOGICAL_AND            shift, and go to state 135
    LOGICAL_OR             shift, and go to state 136

    PLUS                   [reduce using rule 61 (binary_op)]
    MINUS                  [reduce using rule 61 (binary_op)]
    TIMES                  [reduce using rule 61 (binary_op)]
    DIVIDE                 [reduce using rule 61 (binary_op)]
    MODULO                 [reduce using rule 61 (binary_op)]
    BITWISE_AND            [reduce using rule 61 (binary_op)]
    BITWISE_OR             [reduce using rule 61 (binary_op)]
    BITWISE_XOR            [reduce using rule 61 (binary_op)]
    BIT_CLEAR              [reduce using rule 61 (binary_op)]
    LEFT_SHIFT             [reduce using rule 61 (binary_op)]
    RIGHT_SHIFT            [reduce using rule 61 (binary_op)]
    EQUAL_EQUAL            [reduce using rule 61 (binary_op)]
    NOT_EQUAL              [reduce using rule 61 (binary_op)]
    LESS_THAN              [reduce using rule 61 (binary_op)]
    LESS_THAN_OR_EQUAL     [reduce using rule 61 (binary_op)]
    GREATER_THAN           [reduce using rule 61 (binary_op)]
    GREATER_THAN_OR_EQUAL  [reduce using rule 61 (binary_op)]
    LOGICAL_AND            [reduce using rule 61 (binary_op)]
    LOGICAL_OR             [reduce using rule 61 (binary_op)]
    $default               reduce using rule 61 (binary_op)


State 182

   51 binary_op: expression • LOGICAL_OR expression
   52          | expression • LOGICAL_AND expression
   53          | expression • EQUAL_EQUAL expression
   54          | expression • NOT_EQUAL expression
   55          | expression • LESS_THAN_OR_EQUAL expression
   56          | expression • GREATER_THAN_OR_EQUAL expression
   57          | expression • LESS_THAN expression
   58          | expression • GREATER_THAN expression
   59          | expression • PLUS expression
   60          | expression • MINUS expression
   61          | expression • BITWISE_OR expression
   62          | expression • BITWISE_XOR expression
   62          | expression BITWISE_XOR expression •
   63          | expression • TIMES expression
   64          | expression • DIVIDE expression
   65          | expression • MODULO expression
   66          | expression • RIGHT_SHIFT expression
   67          | expression • LEFT_SHIFT expression
   68          | expression • BITWISE_AND expression
   69          | expression • BIT_CLEAR expression

    PLUS                   shift, and go to state 105
    MINUS                  shift, and go to state 106
    TIMES                  shift, and go to state 107
    DIVIDE                 shift, and go to state 108
    MODULO                 shift, and go to state 109
    BITWISE_AND            shift, and go to state 110
    BITWISE_OR             shift, and go to state 111
    BITWISE_XOR            shift, and go to state 112
    BIT_CLEAR              shift, and go to state 113
    LEFT_SHIFT             shift, and go to state 114
    RIGHT_SHIFT            shift, and go to state 115
    EQUAL_EQUAL            shift, and go to state 129
    NOT_EQUAL              shift, and go to state 130
    LESS_THAN              shift, and go to state 131
    LESS_THAN_OR_EQUAL     shift, and go to state 132
    GREATER_THAN           shift, and go to state 133
    GREATER_THAN_OR_EQUAL  shift, and go to state 134
    LOGICAL_AND            shift, and go to state 135
    LOGICAL_OR             shift, and go to state 136

    PLUS                   [reduce using rule 62 (binary_op)]
    MINUS                  [reduce using rule 62 (binary_op)]
    TIMES                  [reduce using rule 62 (binary_op)]
    DIVIDE                 [reduce using rule 62 (binary_op)]
    MODULO                 [reduce using rule 62 (binary_op)]
    BITWISE_AND            [reduce using rule 62 (binary_op)]
    BITWISE_OR             [reduce using rule 62 (binary_op)]
    BITWISE_XOR            [reduce using rule 62 (binary_op)]
    BIT_CLEAR              [reduce using rule 62 (binary_op)]
    LEFT_SHIFT             [reduce using rule 62 (binary_op)]
    RIGHT_SHIFT            [reduce using rule 62 (binary_op)]
    EQUAL_EQUAL            [reduce using rule 62 (binary_op)]
    NOT_EQUAL              [reduce using rule 62 (binary_op)]
    LESS_THAN              [reduce using rule 62 (binary_op)]
    LESS_THAN_OR_EQUAL     [reduce using rule 62 (binary_op)]
    GREATER_THAN           [reduce using rule 62 (binary_op)]
    GREATER_THAN_OR_EQUAL  [reduce using rule 62 (binary_op)]
    LOGICAL_AND            [reduce using rule 62 (binary_op)]
    LOGICAL_OR             [reduce using rule 62 (binary_op)]
    $default               reduce using rule 62 (binary_op)


State 183

   51 binary_op: expression • LOGICAL_OR expression
   52          | expression • LOGICAL_AND expression
   53          | expression • EQUAL_EQUAL expression
   54          | expression • NOT_EQUAL expression
   55          | expression • LESS_THAN_OR_EQUAL expression
   56          | expression • GREATER_THAN_OR_EQUAL expression
   57          | expression • LESS_THAN expression
   58          | expression • GREATER_THAN expression
   59          | expression • PLUS expression
   60          | expression • MINUS expression
   61          | expression • BITWISE_OR expression
   62          | expression • BITWISE_XOR expression
   63          | expression • TIMES expression
   64          | expression • DIVIDE expression
   65          | expression • MODULO expression
   66          | expression • RIGHT_SHIFT expression
   67          | expression • LEFT_SHIFT expression
   68          | expression • BITWISE_AND expression
   69          | expression • BIT_CLEAR expression
   69          | expression BIT_CLEAR expression •

    PLUS                   shift, and go to state 105
    MINUS                  shift, and go to state 106
    TIMES                  shift, and go to state 107
    DIVIDE                 shift, and go to state 108
    MODULO                 shift, and go to state 109
    BITWISE_AND            shift, and go to state 110
    BITWISE_OR             shift, and go to state 111
    BITWISE_XOR            shift, and go to state 112
    BIT_CLEAR              shift, and go to state 113
    LEFT_SHIFT             shift, and go to state 114
    RIGHT_SHIFT            shift, and go to state 115
    EQUAL_EQUAL            shift, and go to state 129
    NOT_EQUAL              shift, and go to state 130
    LESS_THAN              shift, and go to state 131
    LESS_THAN_OR_EQUAL     shift, and go to state 132
    GREATER_THAN           shift, and go to state 133
    GREATER_THAN_OR_EQUAL  shift, and go to state 134
    LOGICAL_AND            shift, and go to state 135
    LOGICAL_OR             shift, and go to state 136

    PLUS                   [reduce using rule 69 (binary_op)]
    MINUS                  [reduce using rule 69 (binary_op)]
    TIMES                  [reduce using rule 69 (binary_op)]
    DIVIDE                 [reduce using rule 69 (binary_op)]
    MODULO                 [reduce using rule 69 (binary_op)]
    BITWISE_AND            [reduce using rule 69 (binary_op)]
    BITWISE_OR             [reduce using rule 69 (binary_op)]
    BITWISE_XOR            [reduce using rule 69 (binary_op)]
    BIT_CLEAR              [reduce using rule 69 (binary_op)]
    LEFT_SHIFT             [reduce using rule 69 (binary_op)]
    RIGHT_SHIFT            [reduce using rule 69 (binary_op)]
    EQUAL_EQUAL            [reduce using rule 69 (binary_op)]
    NOT_EQUAL              [reduce using rule 69 (binary_op)]
    LESS_THAN              [reduce using rule 69 (binary_op)]
    LESS_THAN_OR_EQUAL     [reduce using rule 69 (binary_op)]
    GREATER_THAN           [reduce using rule 69 (binary_op)]
    GREATER_THAN_OR_EQUAL  [reduce using rule 69 (binary_op)]
    LOGICAL_AND            [reduce using rule 69 (binary_op)]
    LOGICAL_OR             [reduce using rule 69 (binary_op)]
    $default               reduce using rule 69 (binary_op)


State 184

   51 binary_op: expression • LOGICAL_OR expression
   52          | expression • LOGICAL_AND expression
   53          | expression • EQUAL_EQUAL expression
   54          | expression • NOT_EQUAL expression
   55          | expression • LESS_THAN_OR_EQUAL expression
   56          | expression • GREATER_THAN_OR_EQUAL expression
   57          | expression • LESS_THAN expression
   58          | expression • GREATER_THAN expression
   59          | expression • PLUS expression
   60          | expression • MINUS expression
   61          | expression • BITWISE_OR expression
   62          | expression • BITWISE_XOR expression
   63          | expression • TIMES expression
   64          | expression • DIVIDE expression
   65          | expression • MODULO expression
   66          | expression • RIGHT_SHIFT expression
   67          | expression • LEFT_SHIFT expression
   67          | expression LEFT_SHIFT expression •
   68          | expression • BITWISE_AND expression
   69          | expression • BIT_CLEAR expression

    PLUS                   shift, and go to state 105
    MINUS                  shift, and go to state 106
    TIMES                  shift, and go to state 107
    DIVIDE                 shift, and go to state 108
    MODULO                 shift, and go to state 109
    BITWISE_AND            shift, and go to state 110
    BITWISE_OR             shift, and go to state 111
    BITWISE_XOR            shift, and go to state 112
    BIT_CLEAR              shift, and go to state 113
    LEFT_SHIFT             shift, and go to state 114
    RIGHT_SHIFT            shift, and go to state 115
    EQUAL_EQUAL            shift, and go to state 129
    NOT_EQUAL              shift, and go to state 130
    LESS_THAN              shift, and go to state 131
    LESS_THAN_OR_EQUAL     shift, and go to state 132
    GREATER_THAN           shift, and go to state 133
    GREATER_THAN_OR_EQUAL  shift, and go to state 134
    LOGICAL_AND            shift, and go to state 135
    LOGICAL_OR             shift, and go to state 136

    PLUS                   [reduce using rule 67 (binary_op)]
    MINUS                  [reduce using rule 67 (binary_op)]
    TIMES                  [reduce using rule 67 (binary_op)]
    DIVIDE                 [reduce using rule 67 (binary_op)]
    MODULO                 [reduce using rule 67 (binary_op)]
    BITWISE_AND            [reduce using rule 67 (binary_op)]
    BITWISE_OR             [reduce using rule 67 (binary_op)]
    BITWISE_XOR            [reduce using rule 67 (binary_op)]
    BIT_CLEAR              [reduce using rule 67 (binary_op)]
    LEFT_SHIFT             [reduce using rule 67 (binary_op)]
    RIGHT_SHIFT            [reduce using rule 67 (binary_op)]
    EQUAL_EQUAL            [reduce using rule 67 (binary_op)]
    NOT_EQUAL              [reduce using rule 67 (binary_op)]
    LESS_THAN              [reduce using rule 67 (binary_op)]
    LESS_THAN_OR_EQUAL     [reduce using rule 67 (binary_op)]
    GREATER_THAN           [reduce using rule 67 (binary_op)]
    GREATER_THAN_OR_EQUAL  [reduce using rule 67 (binary_op)]
    LOGICAL_AND            [reduce using rule 67 (binary_op)]
    LOGICAL_OR             [reduce using rule 67 (binary_op)]
    $default               reduce using rule 67 (binary_op)


State 185

   51 binary_op: expression • LOGICAL_OR expression
   52          | expression • LOGICAL_AND expression
   53          | expression • EQUAL_EQUAL expression
   54          | expression • NOT_EQUAL expression
   55          | expression • LESS_THAN_OR_EQUAL expression
   56          | expression • GREATER_THAN_OR_EQUAL expression
   57          | expression • LESS_THAN expression
   58          | expression • GREATER_THAN expression
   59          | expression • PLUS expression
   60          | expression • MINUS expression
   61          | expression • BITWISE_OR expression
   62          | expression • BITWISE_XOR expression
   63          | expression • TIMES expression
   64          | expression • DIVIDE expression
   65          | expression • MODULO expression
   66          | expression • RIGHT_SHIFT expression
   66          | expression RIGHT_SHIFT expression •
   67          | expression • LEFT_SHIFT expression
   68          | expression • BITWISE_AND expression
   69          | expression • BIT_CLEAR expression

    PLUS                   shift, and go to state 105
    MINUS                  shift, and go to state 106
    TIMES                  shift, and go to state 107
    DIVIDE                 shift, and go to state 108
    MODULO                 shift, and go to state 109
    BITWISE_AND            shift, and go to state 110
    BITWISE_OR             shift, and go to state 111
    BITWISE_XOR            shift, and go to state 112
    BIT_CLEAR              shift, and go to state 113
    LEFT_SHIFT             shift, and go to state 114
    RIGHT_SHIFT            shift, and go to state 115
    EQUAL_EQUAL            shift, and go to state 129
    NOT_EQUAL              shift, and go to state 130
    LESS_THAN              shift, and go to state 131
    LESS_THAN_OR_EQUAL     shift, and go to state 132
    GREATER_THAN           shift, and go to state 133
    GREATER_THAN_OR_EQUAL  shift, and go to state 134
    LOGICAL_AND            shift, and go to state 135
    LOGICAL_OR             shift, and go to state 136

    PLUS                   [reduce using rule 66 (binary_op)]
    MINUS                  [reduce using rule 66 (binary_op)]
    TIMES                  [reduce using rule 66 (binary_op)]
    DIVIDE                 [reduce using rule 66 (binary_op)]
    MODULO                 [reduce using rule 66 (binary_op)]
    BITWISE_AND            [reduce using rule 66 (binary_op)]
    BITWISE_OR             [reduce using rule 66 (binary_op)]
    BITWISE_XOR            [reduce using rule 66 (binary_op)]
    BIT_CLEAR              [reduce using rule 66 (binary_op)]
    LEFT_SHIFT             [reduce using rule 66 (binary_op)]
    RIGHT_SHIFT            [reduce using rule 66 (binary_op)]
    EQUAL_EQUAL            [reduce using rule 66 (binary_op)]
    NOT_EQUAL              [reduce using rule 66 (binary_op)]
    LESS_THAN              [reduce using rule 66 (binary_op)]
    LESS_THAN_OR_EQUAL     [reduce using rule 66 (binary_op)]
    GREATER_THAN           [reduce using rule 66 (binary_op)]
    GREATER_THAN_OR_EQUAL  [reduce using rule 66 (binary_op)]
    LOGICAL_AND            [reduce using rule 66 (binary_op)]
    LOGICAL_OR             [reduce using rule 66 (binary_op)]
    $default               reduce using rule 66 (binary_op)


State 186

   51 binary_op: expression • LOGICAL_OR expression
   52          | expression • LOGICAL_AND expression
   53          | expression • EQUAL_EQUAL expression
   53          | expression EQUAL_EQUAL expression •
   54          | expression • NOT_EQUAL expression
   55          | expression • LESS_THAN_OR_EQUAL expression
   56          | expression • GREATER_THAN_OR_EQUAL expression
   57          | expression • LESS_THAN expression
   58          | expression • GREATER_THAN expression
   59          | expression • PLUS expression
   60          | expression • MINUS expression
   61          | expression • BITWISE_OR expression
   62          | expression • BITWISE_XOR expression
   63          | expression • TIMES expression
   64          | expression • DIVIDE expression
   65          | expression • MODULO expression
   66          | expression • RIGHT_SHIFT expression
   67          | expression • LEFT_SHIFT expression
   68          | expression • BITWISE_AND expression
   69          | expression • BIT_CLEAR expression

    PLUS                   shift, and go to state 105
    MINUS                  shift, and go to state 106
    TIMES                  shift, and go to state 107
    DIVIDE                 shift, and go to state 108
    MODULO                 shift, and go to state 109
    BITWISE_AND            shift, and go to state 110
    BITWISE_OR             shift, and go to state 111
    BITWISE_XOR            shift, and go to state 112
    BIT_CLEAR              shift, and go to state 113
    LEFT_SHIFT             shift, and go to state 114
    RIGHT_SHIFT            shift, and go to state 115
    EQUAL_EQUAL            shift, and go to state 129
    NOT_EQUAL              shift, and go to state 130
    LESS_THAN              shift, and go to state 131
    LESS_THAN_OR_EQUAL     shift, and go to state 132
    GREATER_THAN           shift, and go to state 133
    GREATER_THAN_OR_EQUAL  shift, and go to state 134
    LOGICAL_AND            shift, and go to state 135
    LOGICAL_OR             shift, and go to state 136

    PLUS                   [reduce using rule 53 (binary_op)]
    MINUS                  [reduce using rule 53 (binary_op)]
    TIMES                  [reduce using rule 53 (binary_op)]
    DIVIDE                 [reduce using rule 53 (binary_op)]
    MODULO                 [reduce using rule 53 (binary_op)]
    BITWISE_AND            [reduce using rule 53 (binary_op)]
    BITWISE_OR             [reduce using rule 53 (binary_op)]
    BITWISE_XOR            [reduce using rule 53 (binary_op)]
    BIT_CLEAR              [reduce using rule 53 (binary_op)]
    LEFT_SHIFT             [reduce using rule 53 (binary_op)]
    RIGHT_SHIFT            [reduce using rule 53 (binary_op)]
    EQUAL_EQUAL            [reduce using rule 53 (binary_op)]
    NOT_EQUAL              [reduce using rule 53 (binary_op)]
    LESS_THAN              [reduce using rule 53 (binary_op)]
    LESS_THAN_OR_EQUAL     [reduce using rule 53 (binary_op)]
    GREATER_THAN           [reduce using rule 53 (binary_op)]
    GREATER_THAN_OR_EQUAL  [reduce using rule 53 (binary_op)]
    LOGICAL_AND            [reduce using rule 53 (binary_op)]
    LOGICAL_OR             [reduce using rule 53 (binary_op)]
    $default               reduce using rule 53 (binary_op)


State 187

   51 binary_op: expression • LOGICAL_OR expression
   52          | expression • LOGICAL_AND expression
   53          | expression • EQUAL_EQUAL expression
   54          | expression • NOT_EQUAL expression
   54          | expression NOT_EQUAL expression •
   55          | expression • LESS_THAN_OR_EQUAL expression
   56          | expression • GREATER_THAN_OR_EQUAL expression
   57          | expression • LESS_THAN expression
   58          | expression • GREATER_THAN expression
   59          | expression • PLUS expression
   60          | expression • MINUS expression
   61          | expression • BITWISE_OR expression
   62          | expression • BITWISE_XOR expression
   63          | expression • TIMES expression
   64          | expression • DIVIDE expression
   65          | expression • MODULO expression
   66          | expression • RIGHT_SHIFT expression
   67          | expression • LEFT_SHIFT expression
   68          | expression • BITWISE_AND expression
   69          | expression • BIT_CLEAR expression

    PLUS                   shift, and go to state 105
    MINUS                  shift, and go to state 106
    TIMES                  shift, and go to state 107
    DIVIDE                 shift, and go to state 108
    MODULO                 shift, and go to state 109
    BITWISE_AND            shift, and go to state 110
    BITWISE_OR             shift, and go to state 111
    BITWISE_XOR            shift, and go to state 112
    BIT_CLEAR              shift, and go to state 113
    LEFT_SHIFT             shift, and go to state 114
    RIGHT_SHIFT            shift, and go to state 115
    EQUAL_EQUAL            shift, and go to state 129
    NOT_EQUAL              shift, and go to state 130
    LESS_THAN              shift, and go to state 131
    LESS_THAN_OR_EQUAL     shift, and go to state 132
    GREATER_THAN           shift, and go to state 133
    GREATER_THAN_OR_EQUAL  shift, and go to state 134
    LOGICAL_AND            shift, and go to state 135
    LOGICAL_OR             shift, and go to state 136

    PLUS                   [reduce using rule 54 (binary_op)]
    MINUS                  [reduce using rule 54 (binary_op)]
    TIMES                  [reduce using rule 54 (binary_op)]
    DIVIDE                 [reduce using rule 54 (binary_op)]
    MODULO                 [reduce using rule 54 (binary_op)]
    BITWISE_AND            [reduce using rule 54 (binary_op)]
    BITWISE_OR             [reduce using rule 54 (binary_op)]
    BITWISE_XOR            [reduce using rule 54 (binary_op)]
    BIT_CLEAR              [reduce using rule 54 (binary_op)]
    LEFT_SHIFT             [reduce using rule 54 (binary_op)]
    RIGHT_SHIFT            [reduce using rule 54 (binary_op)]
    EQUAL_EQUAL            [reduce using rule 54 (binary_op)]
    NOT_EQUAL              [reduce using rule 54 (binary_op)]
    LESS_THAN              [reduce using rule 54 (binary_op)]
    LESS_THAN_OR_EQUAL     [reduce using rule 54 (binary_op)]
    GREATER_THAN           [reduce using rule 54 (binary_op)]
    GREATER_THAN_OR_EQUAL  [reduce using rule 54 (binary_op)]
    LOGICAL_AND            [reduce using rule 54 (binary_op)]
    LOGICAL_OR             [reduce using rule 54 (binary_op)]
    $default               reduce using rule 54 (binary_op)


State 188

   51 binary_op: expression • LOGICAL_OR expression
   52          | expression • LOGICAL_AND expression
   53          | expression • EQUAL_EQUAL expression
   54          | expression • NOT_EQUAL expression
   55          | expression • LESS_THAN_OR_EQUAL expression
   56          | expression • GREATER_THAN_OR_EQUAL expression
   57          | expression • LESS_THAN expression
   57          | expression LESS_THAN expression •
   58          | expression • GREATER_THAN expression
   59          | expression • PLUS expression
   60          | expression • MINUS expression
   61          | expression • BITWISE_OR expression
   62          | expression • BITWISE_XOR expression
   63          | expression • TIMES expression
   64          | expression • DIVIDE expression
   65          | expression • MODULO expression
   66          | expression • RIGHT_SHIFT expression
   67          | expression • LEFT_SHIFT expression
   68          | expression • BITWISE_AND expression
   69          | expression • BIT_CLEAR expression

    PLUS                   shift, and go to state 105
    MINUS                  shift, and go to state 106
    TIMES                  shift, and go to state 107
    DIVIDE                 shift, and go to state 108
    MODULO                 shift, and go to state 109
    BITWISE_AND            shift, and go to state 110
    BITWISE_OR             shift, and go to state 111
    BITWISE_XOR            shift, and go to state 112
    BIT_CLEAR              shift, and go to state 113
    LEFT_SHIFT             shift, and go to state 114
    RIGHT_SHIFT            shift, and go to state 115
    EQUAL_EQUAL            shift, and go to state 129
    NOT_EQUAL              shift, and go to state 130
    LESS_THAN              shift, and go to state 131
    LESS_THAN_OR_EQUAL     shift, and go to state 132
    GREATER_THAN           shift, and go to state 133
    GREATER_THAN_OR_EQUAL  shift, and go to state 134
    LOGICAL_AND            shift, and go to state 135
    LOGICAL_OR             shift, and go to state 136

    PLUS                   [reduce using rule 57 (binary_op)]
    MINUS                  [reduce using rule 57 (binary_op)]
    TIMES                  [reduce using rule 57 (binary_op)]
    DIVIDE                 [reduce using rule 57 (binary_op)]
    MODULO                 [reduce using rule 57 (binary_op)]
    BITWISE_AND            [reduce using rule 57 (binary_op)]
    BITWISE_OR             [reduce using rule 57 (binary_op)]
    BITWISE_XOR            [reduce using rule 57 (binary_op)]
    BIT_CLEAR              [reduce using rule 57 (binary_op)]
    LEFT_SHIFT             [reduce using rule 57 (binary_op)]
    RIGHT_SHIFT            [reduce using rule 57 (binary_op)]
    EQUAL_EQUAL            [reduce using rule 57 (binary_op)]
    NOT_EQUAL              [reduce using rule 57 (binary_op)]
    LESS_THAN              [reduce using rule 57 (binary_op)]
    LESS_THAN_OR_EQUAL     [reduce using rule 57 (binary_op)]
    GREATER_THAN           [reduce using rule 57 (binary_op)]
    GREATER_THAN_OR_EQUAL  [reduce using rule 57 (binary_op)]
    LOGICAL_AND            [reduce using rule 57 (binary_op)]
    LOGICAL_OR             [reduce using rule 57 (binary_op)]
    $default               reduce using rule 57 (binary_op)


State 189

   51 binary_op: expression • LOGICAL_OR expression
   52          | expression • LOGICAL_AND expression
   53          | expression • EQUAL_EQUAL expression
   54          | expression • NOT_EQUAL expression
   55          | expression • LESS_THAN_OR_EQUAL expression
   55          | expression LESS_THAN_OR_EQUAL expression •
   56          | expression • GREATER_THAN_OR_EQUAL expression
   57          | expression • LESS_THAN expression
   58          | expression • GREATER_THAN expression
   59          | expression • PLUS expression
   60          | expression • MINUS expression
   61          | expression • BITWISE_OR expression
   62          | expression • BITWISE_XOR expression
   63          | expression • TIMES expression
   64          | expression • DIVIDE expression
   65          | expression • MODULO expression
   66          | expression • RIGHT_SHIFT expression
   67          | expression • LEFT_SHIFT expression
   68          | expression • BITWISE_AND expression
   69          | expression • BIT_CLEAR expression

    PLUS                   shift, and go to state 105
    MINUS                  shift, and go to state 106
    TIMES                  shift, and go to state 107
    DIVIDE                 shift, and go to state 108
    MODULO                 shift, and go to state 109
    BITWISE_AND            shift, and go to state 110
    BITWISE_OR             shift, and go to state 111
    BITWISE_XOR            shift, and go to state 112
    BIT_CLEAR              shift, and go to state 113
    LEFT_SHIFT             shift, and go to state 114
    RIGHT_SHIFT            shift, and go to state 115
    EQUAL_EQUAL            shift, and go to state 129
    NOT_EQUAL              shift, and go to state 130
    LESS_THAN              shift, and go to state 131
    LESS_THAN_OR_EQUAL     shift, and go to state 132
    GREATER_THAN           shift, and go to state 133
    GREATER_THAN_OR_EQUAL  shift, and go to state 134
    LOGICAL_AND            shift, and go to state 135
    LOGICAL_OR             shift, and go to state 136

    PLUS                   [reduce using rule 55 (binary_op)]
    MINUS                  [reduce using rule 55 (binary_op)]
    TIMES                  [reduce using rule 55 (binary_op)]
    DIVIDE                 [reduce using rule 55 (binary_op)]
    MODULO                 [reduce using rule 55 (binary_op)]
    BITWISE_AND            [reduce using rule 55 (binary_op)]
    BITWISE_OR             [reduce using rule 55 (binary_op)]
    BITWISE_XOR            [reduce using rule 55 (binary_op)]
    BIT_CLEAR              [reduce using rule 55 (binary_op)]
    LEFT_SHIFT             [reduce using rule 55 (binary_op)]
    RIGHT_SHIFT            [reduce using rule 55 (binary_op)]
    EQUAL_EQUAL            [reduce using rule 55 (binary_op)]
    NOT_EQUAL              [reduce using rule 55 (binary_op)]
    LESS_THAN              [reduce using rule 55 (binary_op)]
    LESS_THAN_OR_EQUAL     [reduce using rule 55 (binary_op)]
    GREATER_THAN           [reduce using rule 55 (binary_op)]
    GREATER_THAN_OR_EQUAL  [reduce using rule 55 (binary_op)]
    LOGICAL_AND            [reduce using rule 55 (binary_op)]
    LOGICAL_OR             [reduce using rule 55 (binary_op)]
    $default               reduce using rule 55 (binary_op)


State 190

   51 binary_op: expression • LOGICAL_OR expression
   52          | expression • LOGICAL_AND expression
   53          | expression • EQUAL_EQUAL expression
   54          | expression • NOT_EQUAL expression
   55          | expression • LESS_THAN_OR_EQUAL expression
   56          | expression • GREATER_THAN_OR_EQUAL expression
   57          | expression • LESS_THAN expression
   58          | expression • GREATER_THAN expression
   58          | expression GREATER_THAN expression •
   59          | expression • PLUS expression
   60          | expression • MINUS expression
   61          | expression • BITWISE_OR expression
   62          | expression • BITWISE_XOR expression
   63          | expression • TIMES expression
   64          | expression • DIVIDE expression
   65          | expression • MODULO expression
   66          | expression • RIGHT_SHIFT expression
   67          | expression • LEFT_SHIFT expression
   68          | expression • BITWISE_AND expression
   69          | expression • BIT_CLEAR expression

    PLUS                   shift, and go to state 105
    MINUS                  shift, and go to state 106
    TIMES                  shift, and go to state 107
    DIVIDE                 shift, and go to state 108
    MODULO                 shift, and go to state 109
    BITWISE_AND            shift, and go to state 110
    BITWISE_OR             shift, and go to state 111
    BITWISE_XOR            shift, and go to state 112
    BIT_CLEAR              shift, and go to state 113
    LEFT_SHIFT             shift, and go to state 114
    RIGHT_SHIFT            shift, and go to state 115
    EQUAL_EQUAL            shift, and go to state 129
    NOT_EQUAL              shift, and go to state 130
    LESS_THAN              shift, and go to state 131
    LESS_THAN_OR_EQUAL     shift, and go to state 132
    GREATER_THAN           shift, and go to state 133
    GREATER_THAN_OR_EQUAL  shift, and go to state 134
    LOGICAL_AND            shift, and go to state 135
    LOGICAL_OR             shift, and go to state 136

    PLUS                   [reduce using rule 58 (binary_op)]
    MINUS                  [reduce using rule 58 (binary_op)]
    TIMES                  [reduce using rule 58 (binary_op)]
    DIVIDE                 [reduce using rule 58 (binary_op)]
    MODULO                 [reduce using rule 58 (binary_op)]
    BITWISE_AND            [reduce using rule 58 (binary_op)]
    BITWISE_OR             [reduce using rule 58 (binary_op)]
    BITWISE_XOR            [reduce using rule 58 (binary_op)]
    BIT_CLEAR              [reduce using rule 58 (binary_op)]
    LEFT_SHIFT             [reduce using rule 58 (binary_op)]
    RIGHT_SHIFT            [reduce using rule 58 (binary_op)]
    EQUAL_EQUAL            [reduce using rule 58 (binary_op)]
    NOT_EQUAL              [reduce using rule 58 (binary_op)]
    LESS_THAN              [reduce using rule 58 (binary_op)]
    LESS_THAN_OR_EQUAL     [reduce using rule 58 (binary_op)]
    GREATER_THAN           [reduce using rule 58 (binary_op)]
    GREATER_THAN_OR_EQUAL  [reduce using rule 58 (binary_op)]
    LOGICAL_AND            [reduce using rule 58 (binary_op)]
    LOGICAL_OR             [reduce using rule 58 (binary_op)]
    $default               reduce using rule 58 (binary_op)


State 191

   51 binary_op: expression • LOGICAL_OR expression
   52          | expression • LOGICAL_AND expression
   53          | expression • EQUAL_EQUAL expression
   54          | expression • NOT_EQUAL expression
   55          | expression • LESS_THAN_OR_EQUAL expression
   56          | expression • GREATER_THAN_OR_EQUAL expression
   56          | expression GREATER_THAN_OR_EQUAL expression •
   57          | expression • LESS_THAN expression
   58          | expression • GREATER_THAN expression
   59          | expression • PLUS expression
   60          | expression • MINUS expression
   61          | expression • BITWISE_OR expression
   62          | expression • BITWISE_XOR expression
   63          | expression • TIMES expression
   64          | expression • DIVIDE expression
   65          | expression • MODULO expression
   66          | expression • RIGHT_SHIFT expression
   67          | expression • LEFT_SHIFT expression
   68          | expression • BITWISE_AND expression
   69          | expression • BIT_CLEAR expression

    PLUS                   shift, and go to state 105
    MINUS                  shift, and go to state 106
    TIMES                  shift, and go to state 107
    DIVIDE                 shift, and go to state 108
    MODULO                 shift, and go to state 109
    BITWISE_AND            shift, and go to state 110
    BITWISE_OR             shift, and go to state 111
    BITWISE_XOR            shift, and go to state 112
    BIT_CLEAR              shift, and go to state 113
    LEFT_SHIFT             shift, and go to state 114
    RIGHT_SHIFT            shift, and go to state 115
    EQUAL_EQUAL            shift, and go to state 129
    NOT_EQUAL              shift, and go to state 130
    LESS_THAN              shift, and go to state 131
    LESS_THAN_OR_EQUAL     shift, and go to state 132
    GREATER_THAN           shift, and go to state 133
    GREATER_THAN_OR_EQUAL  shift, and go to state 134
    LOGICAL_AND            shift, and go to state 135
    LOGICAL_OR             shift, and go to state 136

    PLUS                   [reduce using rule 56 (binary_op)]
    MINUS                  [reduce using rule 56 (binary_op)]
    TIMES                  [reduce using rule 56 (binary_op)]
    DIVIDE                 [reduce using rule 56 (binary_op)]
    MODULO                 [reduce using rule 56 (binary_op)]
    BITWISE_AND            [reduce using rule 56 (binary_op)]
    BITWISE_OR             [reduce using rule 56 (binary_op)]
    BITWISE_XOR            [reduce using rule 56 (binary_op)]
    BIT_CLEAR              [reduce using rule 56 (binary_op)]
    LEFT_SHIFT             [reduce using rule 56 (binary_op)]
    RIGHT_SHIFT            [reduce using rule 56 (binary_op)]
    EQUAL_EQUAL            [reduce using rule 56 (binary_op)]
    NOT_EQUAL              [reduce using rule 56 (binary_op)]
    LESS_THAN              [reduce using rule 56 (binary_op)]
    LESS_THAN_OR_EQUAL     [reduce using rule 56 (binary_op)]
    GREATER_THAN           [reduce using rule 56 (binary_op)]
    GREATER_THAN_OR_EQUAL  [reduce using rule 56 (binary_op)]
    LOGICAL_AND            [reduce using rule 56 (binary_op)]
    LOGICAL_OR             [reduce using rule 56 (binary_op)]
    $default               reduce using rule 56 (binary_op)


State 192

   51 binary_op: expression • LOGICAL_OR expression
   52          | expression • LOGICAL_AND expression
   52          | expression LOGICAL_AND expression •
   53          | expression • EQUAL_EQUAL expression
   54          | expression • NOT_EQUAL expression
   55          | expression • LESS_THAN_OR_EQUAL expression
   56          | expression • GREATER_THAN_OR_EQUAL expression
   57          | expression • LESS_THAN expression
   58          | expression • GREATER_THAN expression
   59          | expression • PLUS expression
   60          | expression • MINUS expression
   61          | expression • BITWISE_OR expression
   62          | expression • BITWISE_XOR expression
   63          | expression • TIMES expression
   64          | expression • DIVIDE expression
   65          | expression • MODULO expression
   66          | expression • RIGHT_SHIFT expression
   67          | expression • LEFT_SHIFT expression
   68          | expression • BITWISE_AND expression
   69          | expression • BIT_CLEAR expression

    PLUS                   shift, and go to state 105
    MINUS                  shift, and go to state 106
    TIMES                  shift, and go to state 107
    DIVIDE                 shift, and go to state 108
    MODULO                 shift, and go to state 109
    BITWISE_AND            shift, and go to state 110
    BITWISE_OR             shift, and go to state 111
    BITWISE_XOR            shift, and go to state 112
    BIT_CLEAR              shift, and go to state 113
    LEFT_SHIFT             shift, and go to state 114
    RIGHT_SHIFT            shift, and go to state 115
    EQUAL_EQUAL            shift, and go to state 129
    NOT_EQUAL              shift, and go to state 130
    LESS_THAN              shift, and go to state 131
    LESS_THAN_OR_EQUAL     shift, and go to state 132
    GREATER_THAN           shift, and go to state 133
    GREATER_THAN_OR_EQUAL  shift, and go to state 134
    LOGICAL_AND            shift, and go to state 135
    LOGICAL_OR             shift, and go to state 136

    PLUS                   [reduce using rule 52 (binary_op)]
    MINUS                  [reduce using rule 52 (binary_op)]
    TIMES                  [reduce using rule 52 (binary_op)]
    DIVIDE                 [reduce using rule 52 (binary_op)]
    MODULO                 [reduce using rule 52 (binary_op)]
    BITWISE_AND            [reduce using rule 52 (binary_op)]
    BITWISE_OR             [reduce using rule 52 (binary_op)]
    BITWISE_XOR            [reduce using rule 52 (binary_op)]
    BIT_CLEAR              [reduce using rule 52 (binary_op)]
    LEFT_SHIFT             [reduce using rule 52 (binary_op)]
    RIGHT_SHIFT            [reduce using rule 52 (binary_op)]
    EQUAL_EQUAL            [reduce using rule 52 (binary_op)]
    NOT_EQUAL              [reduce using rule 52 (binary_op)]
    LESS_THAN              [reduce using rule 52 (binary_op)]
    LESS_THAN_OR_EQUAL     [reduce using rule 52 (binary_op)]
    GREATER_THAN           [reduce using rule 52 (binary_op)]
    GREATER_THAN_OR_EQUAL  [reduce using rule 52 (binary_op)]
    LOGICAL_AND            [reduce using rule 52 (binary_op)]
    LOGICAL_OR             [reduce using rule 52 (binary_op)]
    $default               reduce using rule 52 (binary_op)


State 193

   51 binary_op: expression • LOGICAL_OR expression
   51          | expression LOGICAL_OR expression •
   52          | expression • LOGICAL_AND expression
   53          | expression • EQUAL_EQUAL expression
   54          | expression • NOT_EQUAL expression
   55          | expression • LESS_THAN_OR_EQUAL expression
   56          | expression • GREATER_THAN_OR_EQUAL expression
   57          | expression • LESS_THAN expression
   58          | expression • GREATER_THAN expression
   59          | expression • PLUS expression
   60          | expression • MINUS expression
   61          | expression • BITWISE_OR expression
   62          | expression • BITWISE_XOR expression
   63          | expression • TIMES expression
   64          | expression • DIVIDE expression
   65          | expression • MODULO expression
   66          | expression • RIGHT_SHIFT expression
   67          | expression • LEFT_SHIFT expression
   68          | expression • BITWISE_AND expression
   69          | expression • BIT_CLEAR expression

    PLUS                   shift, and go to state 105
    MINUS                  shift, and go to state 106
    TIMES                  shift, and go to state 107
    DIVIDE                 shift, and go to state 108
    MODULO                 shift, and go to state 109
    BITWISE_AND            shift, and go to state 110
    BITWISE_OR             shift, and go to state 111
    BITWISE_XOR            shift, and go to state 112
    BIT_CLEAR              shift, and go to state 113
    LEFT_SHIFT             shift, and go to state 114
    RIGHT_SHIFT            shift, and go to state 115
    EQUAL_EQUAL            shift, and go to state 129
    NOT_EQUAL              shift, and go to state 130
    LESS_THAN              shift, and go to state 131
    LESS_THAN_OR_EQUAL     shift, and go to state 132
    GREATER_THAN           shift, and go to state 133
    GREATER_THAN_OR_EQUAL  shift, and go to state 134
    LOGICAL_AND            shift, and go to state 135
    LOGICAL_OR             shift, and go to state 136

    PLUS                   [reduce using rule 51 (binary_op)]
    MINUS                  [reduce using rule 51 (binary_op)]
    TIMES                  [reduce using rule 51 (binary_op)]
    DIVIDE                 [reduce using rule 51 (binary_op)]
    MODULO                 [reduce using rule 51 (binary_op)]
    BITWISE_AND            [reduce using rule 51 (binary_op)]
    BITWISE_OR             [reduce using rule 51 (binary_op)]
    BITWISE_XOR            [reduce using rule 51 (binary_op)]
    BIT_CLEAR              [reduce using rule 51 (binary_op)]
    LEFT_SHIFT             [reduce using rule 51 (binary_op)]
    RIGHT_SHIFT            [reduce using rule 51 (binary_op)]
    EQUAL_EQUAL            [reduce using rule 51 (binary_op)]
    NOT_EQUAL              [reduce using rule 51 (binary_op)]
    LESS_THAN              [reduce using rule 51 (binary_op)]
    LESS_THAN_OR_EQUAL     [reduce using rule 51 (binary_op)]
    GREATER_THAN           [reduce using rule 51 (binary_op)]
    GREATER_THAN_OR_EQUAL  [reduce using rule 51 (binary_op)]
    LOGICAL_AND            [reduce using rule 51 (binary_op)]
    LOGICAL_OR             [reduce using rule 51 (binary_op)]
    $default               reduce using rule 51 (binary_op)


State 194

   36 expression_list: expression COMMA expression_list •

    $default  reduce using rule 36 (expression_list)


State 195

   51 binary_op: expression • LOGICAL_OR expression
   52          | expression • LOGICAL_AND expression
   53          | expression • EQUAL_EQUAL expression
   54          | expression • NOT_EQUAL expression
   55          | expression • LESS_THAN_OR_EQUAL expression
   56          | expression • GREATER_THAN_OR_EQUAL expression
   57          | expression • LESS_THAN expression
   58          | expression • GREATER_THAN expression
   59          | expression • PLUS expression
   60          | expression • MINUS expression
   61          | expression • BITWISE_OR expression
   62          | expression • BITWISE_XOR expression
   63          | expression • TIMES expression
   64          | expression • DIVIDE expression
   65          | expression • MODULO expression
   66          | expression • RIGHT_SHIFT expression
   67          | expression • LEFT_SHIFT expression
   68          | expression • BITWISE_AND expression
   69          | expression • BIT_CLEAR expression
   92 assignment: expression assign_op expression •

    PLUS                   shift, and go to state 105
    MINUS                  shift, and go to state 106
    TIMES                  shift, and go to state 107
    DIVIDE                 shift, and go to state 108
    MODULO                 shift, and go to state 109
    BITWISE_AND            shift, and go to state 110
    BITWISE_OR             shift, and go to state 111
    BITWISE_XOR            shift, and go to state 112
    BIT_CLEAR              shift, and go to state 113
    LEFT_SHIFT             shift, and go to state 114
    RIGHT_SHIFT            shift, and go to state 115
    EQUAL_EQUAL            shift, and go to state 129
    NOT_EQUAL              shift, and go to state 130
    LESS_THAN              shift, and go to state 131
    LESS_THAN_OR_EQUAL     shift, and go to state 132
    GREATER_THAN           shift, and go to state 133
    GREATER_THAN_OR_EQUAL  shift, and go to state 134
    LOGICAL_AND            shift, and go to state 135
    LOGICAL_OR             shift, and go to state 136

    $default  reduce using rule 92 (assignment)


State 196

   44 primary_expression: primary_expression LPAREN RPAREN •

    $default  reduce using rule 44 (primary_expression)


State 197

   43 primary_expression: primary_expression LPAREN expression_list • RPAREN

    RPAREN  shift, and go to state 211


State 198

   45 primary_expression: primary_expression '.' IDENTIFIER •

    $default  reduce using rule 45 (primary_expression)


State 199

   46 primary_expression: primary_expression '[' expression • ']'
   51 binary_op: expression • LOGICAL_OR expression
   52          | expression • LOGICAL_AND expression
   53          | expression • EQUAL_EQUAL expression
   54          | expression • NOT_EQUAL expression
   55          | expression • LESS_THAN_OR_EQUAL expression
   56          | expression • GREATER_THAN_OR_EQUAL expression
   57          | expression • LESS_THAN expression
   58          | expression • GREATER_THAN expression
   59          | expression • PLUS expression
   60          | expression • MINUS expression
   61          | expression • BITWISE_OR expression
   62          | expression • BITWISE_XOR expression
   63          | expression • TIMES expression
   64          | expression • DIVIDE expression
   65          | expression • MODULO expression
   66          | expression • RIGHT_SHIFT expression
   67          | expression • LEFT_SHIFT expression
   68          | expression • BITWISE_AND expression
   69          | expression • BIT_CLEAR expression

    PLUS                   shift, and go to state 105
    MINUS                  shift, and go to state 106
    TIMES                  shift, and go to state 107
    DIVIDE                 shift, and go to state 108
    MODULO                 shift, and go to state 109
    BITWISE_AND            shift, and go to state 110
    BITWISE_OR             shift, and go to state 111
    BITWISE_XOR            shift, and go to state 112
    BIT_CLEAR              shift, and go to state 113
    LEFT_SHIFT             shift, and go to state 114
    RIGHT_SHIFT            shift, and go to state 115
    EQUAL_EQUAL            shift, and go to state 129
    NOT_EQUAL              shift, and go to state 130
    LESS_THAN              shift, and go to state 131
    LESS_THAN_OR_EQUAL     shift, and go to state 132
    GREATER_THAN           shift, and go to state 133
    GREATER_THAN_OR_EQUAL  shift, and go to state 134
    LOGICAL_AND            shift, and go to state 135
    LOGICAL_OR             shift, and go to state 136
    ']'                    shift, and go to state 212


State 200

  117 if_stmt: IF expression block_stmt ELSE • if_stmt
  118        | IF expression block_stmt ELSE • block_stmt

    IF      shift, and go to state 41
    LBRACE  shift, and go to state 31

    block_stmt  go to state 213
    if_stmt     go to state 214


State 201

  114 if_stmt: IF simple_stmt expression block_stmt •
  115        | IF simple_stmt expression block_stmt • ELSE if_stmt
  116        | IF simple_stmt expression block_stmt • ELSE block_stmt

    ELSE  shift, and go to state 215

    $default  reduce using rule 114 (if_stmt)


State 202

   35 expression_list: expression •
   36                | expression • COMMA expression_list
   51 binary_op: expression • LOGICAL_OR expression
   52          | expression • LOGICAL_AND expression
   53          | expression • EQUAL_EQUAL expression
   54          | expression • NOT_EQUAL expression
   55          | expression • LESS_THAN_OR_EQUAL expression
   56          | expression • GREATER_THAN_OR_EQUAL expression
   57          | expression • LESS_THAN expression
   58          | expression • GREATER_THAN expression
   59          | expression • PLUS expression
   60          | expression • MINUS expression
   61          | expression • BITWISE_OR expression
   62          | expression • BITWISE_XOR expression
   63          | expression • TIMES expression
   64          | expression • DIVIDE expression
   65          | expression • MODULO expression
   66          | expression • RIGHT_SHIFT expression
   67          | expression • LEFT_SHIFT expression
   68          | expression • BITWISE_AND expression
   69          | expression • BIT_CLEAR expression
   89 inc_dec_stmt: expression • INCREMENT
   90             | expression • DECREMENT
   92 assignment: expression • assign_op expression
  123 for_clause: simple_stmt SEMICOLON expression • SEMICOLON simple_stmt

    PLUS                   shift, and go to state 105
    MINUS                  shift, and go to state 106
    TIMES                  shift, and go to state 107
    DIVIDE                 shift, and go to state 108
    MODULO                 shift, and go to state 109
    BITWISE_AND            shift, and go to state 110
    BITWISE_OR             shift, and go to state 111
    BITWISE_XOR            shift, and go to state 112
    BIT_CLEAR              shift, and go to state 113
    LEFT_SHIFT             shift, and go to state 114
    RIGHT_SHIFT            shift, and go to state 115
    ADD_ASSIGN             shift, and go to state 116
    SUB_ASSIGN             shift, and go to state 117
    MUL_ASSIGN             shift, and go to state 118
    DIV_ASSIGN             shift, and go to state 119
    MOD_ASSIGN             shift, and go to state 120
    AND_ASSIGN             shift, and go to state 121
    OR_ASSIGN              shift, and go to state 122
    XOR_ASSIGN             shift, and go to state 123
    LEFT_SHIFT_ASSIGN      shift, and go to state 124
    RIGHT_SHIFT_ASSIGN     shift, and go to state 125
    INCREMENT              shift, and go to state 126
    DECREMENT              shift, and go to state 127
    CLEAR_ASSIGN           shift, and go to state 128
    EQUAL_EQUAL            shift, and go to state 129
    NOT_EQUAL              shift, and go to state 130
    LESS_THAN              shift, and go to state 131
    LESS_THAN_OR_EQUAL     shift, and go to state 132
    GREATER_THAN           shift, and go to state 133
    GREATER_THAN_OR_EQUAL  shift, and go to state 134
    LOGICAL_AND            shift, and go to state 135
    LOGICAL_OR             shift, and go to state 136
    SEMICOLON              shift, and go to state 216
    COMMA                  shift, and go to state 137

    $default  reduce using rule 35 (expression_list)

    assign_op  go to state 138
    add_op_eq  go to state 139
    mul_op_eq  go to state 140


State 203

  122 for_clause: simple_stmt SEMICOLON simple_stmt •

    $default  reduce using rule 122 (for_clause)


State 204

   17 declaration: IDENTIFIER INT_TYPE ASSIGN • expression_list

    APPEND      shift, and go to state 47
    LEN         shift, and go to state 48
    LPAREN      shift, and go to state 51
    BOOLEAN     shift, and go to state 53
    IDENTIFIER  shift, and go to state 54
    INTEGER     shift, and go to state 55
    STRING      shift, and go to state 56
    FLOAT       shift, and go to state 57

    expression_list     go to state 217
    expression          go to state 169
    primary_expression  go to state 62
    literal             go to state 63
    binary_op           go to state 64
    builtin             go to state 65


State 205

   19 declaration: IDENTIFIER STRING_TYPE ASSIGN • expression_list

    APPEND      shift, and go to state 47
    LEN         shift, and go to state 48
    LPAREN      shift, and go to state 51
    BOOLEAN     shift, and go to state 53
    IDENTIFIER  shift, and go to state 54
    INTEGER     shift, and go to state 55
    STRING      shift, and go to state 56
    FLOAT       shift, and go to state 57

    expression_list     go to state 218
    expression          go to state 169
    primary_expression  go to state 62
    literal             go to state 63
    binary_op           go to state 64
    builtin             go to state 65


State 206

   16 declaration: identifier_list ASSIGN expression_list •

    $default  reduce using rule 16 (declaration)


State 207

   70 builtin: APPEND LPAREN expression COMMA • expression RPAREN

    APPEND      shift, and go to state 47
    LEN         shift, and go to state 48
    LPAREN      shift, and go to state 51
    BOOLEAN     shift, and go to state 53
    IDENTIFIER  shift, and go to state 54
    INTEGER     shift, and go to state 55
    STRING      shift, and go to state 56
    FLOAT       shift, and go to state 57

    expression          go to state 219
    primary_expression  go to state 62
    literal             go to state 63
    binary_op           go to state 64
    builtin             go to state 65


State 208

   71 builtin: LEN LPAREN expression RPAREN •

    $default  reduce using rule 71 (builtin)


State 209

  124 print_stmt: PRINT LPAREN expression_list RPAREN •

    $default  reduce using rule 124 (print_stmt)


State 210

  126 println_stmt: PRINTLN LPAREN expression_list RPAREN •

    $default  reduce using rule 126 (println_stmt)


State 211

   43 primary_expression: primary_expression LPAREN expression_list RPAREN •

    $default  reduce using rule 43 (primary_expression)


State 212

   46 primary_expression: primary_expression '[' expression ']' •

    $default  reduce using rule 46 (primary_expression)


State 213

  118 if_stmt: IF expression block_stmt ELSE block_stmt •

    $default  reduce using rule 118 (if_stmt)


State 214

  117 if_stmt: IF expression block_stmt ELSE if_stmt •

    $default  reduce using rule 117 (if_stmt)


State 215

  115 if_stmt: IF simple_stmt expression block_stmt ELSE • if_stmt
  116        | IF simple_stmt expression block_stmt ELSE • block_stmt

    IF      shift, and go to state 41
    LBRACE  shift, and go to state 31

    block_stmt  go to state 220
    if_stmt     go to state 221


State 216

  123 for_clause: simple_stmt SEMICOLON expression SEMICOLON • simple_stmt

    APPEND      shift, and go to state 47
    LEN         shift, and go to state 48
    LPAREN      shift, and go to state 51
    BOOLEAN     shift, and go to state 53
    IDENTIFIER  shift, and go to state 54
    INTEGER     shift, and go to state 55
    STRING      shift, and go to state 56
    FLOAT       shift, and go to state 57

    $default  reduce using rule 85 (simple_stmt)

    expression_list             go to state 60
    expression                  go to state 61
    primary_expression          go to state 62
    literal                     go to state 63
    binary_op                   go to state 64
    builtin                     go to state 65
    simple_stmt                 go to state 222
    inc_dec_stmt                go to state 69
    assignment                  go to state 70
    short_variable_declaration  go to state 71


State 217

   17 declaration: IDENTIFIER INT_TYPE ASSIGN expression_list •

    $default  reduce using rule 17 (declaration)


State 218

   19 declaration: IDENTIFIER STRING_TYPE ASSIGN expression_list •

    $default  reduce using rule 19 (declaration)


State 219

   51 binary_op: expression • LOGICAL_OR expression
   52          | expression • LOGICAL_AND expression
   53          | expression • EQUAL_EQUAL expression
   54          | expression • NOT_EQUAL expression
   55          | expression • LESS_THAN_OR_EQUAL expression
   56          | expression • GREATER_THAN_OR_EQUAL expression
   57          | expression • LESS_THAN expression
   58          | expression • GREATER_THAN expression
   59          | expression • PLUS expression
   60          | expression • MINUS expression
   61          | expression • BITWISE_OR expression
   62          | expression • BITWISE_XOR expression
   63          | expression • TIMES expression
   64          | expression • DIVIDE expression
   65          | expression • MODULO expression
   66          | expression • RIGHT_SHIFT expression
   67          | expression • LEFT_SHIFT expression
   68          | expression • BITWISE_AND expression
   69          | expression • BIT_CLEAR expression
   70 builtin: APPEND LPAREN expression COMMA expression • RPAREN

    PLUS                   shift, and go to state 105
    MINUS                  shift, and go to state 106
    TIMES                  shift, and go to state 107
    DIVIDE                 shift, and go to state 108
    MODULO                 shift, and go to state 109
    BITWISE_AND            shift, and go to state 110
    BITWISE_OR             shift, and go to state 111
    BITWISE_XOR            shift, and go to state 112
    BIT_CLEAR              shift, and go to state 113
    LEFT_SHIFT             shift, and go to state 114
    RIGHT_SHIFT            shift, and go to state 115
    EQUAL_EQUAL            shift, and go to state 129
    NOT_EQUAL              shift, and go to state 130
    LESS_THAN              shift, and go to state 131
    LESS_THAN_OR_EQUAL     shift, and go to state 132
    GREATER_THAN           shift, and go to state 133
    GREATER_THAN_OR_EQUAL  shift, and go to state 134
    LOGICAL_AND            shift, and go to state 135
    LOGICAL_OR             shift, and go to state 136
    RPAREN                 shift, and go to state 223


State 220

  116 if_stmt: IF simple_stmt expression block_stmt ELSE block_stmt •

    $default  reduce using rule 116 (if_stmt)


State 221

  115 if_stmt: IF simple_stmt expression block_stmt ELSE if_stmt •

    $default  reduce using rule 115 (if_stmt)


State 222

  123 for_clause: simple_stmt SEMICOLON expression SEMICOLON simple_stmt •

    $default  reduce using rule 123 (for_clause)


State 223

   70 builtin: APPEND LPAREN expression COMMA expression RPAREN •

    $default  reduce using rule 70 (builtin)
