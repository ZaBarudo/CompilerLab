Terminals unused in grammar

    RECEIVE
    VARIADIC_PARAM
    SELECTOR
    LOGICAL_NOT
    WHILE
    BOOL_TYPE
    CHAN
    CONST
    DEFER
    FALLTHROUGH
    GO
    GOTO
    INTERFACE
    MAP
    RANGE
    SELECT
    LSQPAREN
    RSQPAREN
    COLON
    MULTI_LINE_COMMENT


Rules useless in parser due to conflicts

  131 switch_on: ε

  136 expression_case_clause: CASE expression_list ':'
  138                       | DEFAULT ':'


State 31 conflicts: 21 shift/reduce, 1 reduce/reduce
State 41 conflicts: 8 shift/reduce
State 43 conflicts: 8 shift/reduce, 1 reduce/reduce
State 46 conflicts: 8 shift/reduce
State 60 conflicts: 20 shift/reduce, 3 reduce/reduce
State 65 conflicts: 1 shift/reduce
State 70 conflicts: 20 shift/reduce, 3 reduce/reduce
State 71 conflicts: 20 shift/reduce, 3 reduce/reduce
State 75 conflicts: 20 shift/reduce, 3 reduce/reduce
State 76 conflicts: 20 shift/reduce, 3 reduce/reduce
State 77 conflicts: 20 shift/reduce, 3 reduce/reduce
State 78 conflicts: 20 shift/reduce, 3 reduce/reduce
State 79 conflicts: 20 shift/reduce, 3 reduce/reduce
State 80 conflicts: 20 shift/reduce, 3 reduce/reduce
State 82 conflicts: 20 shift/reduce, 3 reduce/reduce
State 83 conflicts: 20 shift/reduce, 3 reduce/reduce
State 84 conflicts: 20 shift/reduce, 3 reduce/reduce
State 192 conflicts: 19 shift/reduce
State 193 conflicts: 19 shift/reduce
State 194 conflicts: 19 shift/reduce
State 195 conflicts: 19 shift/reduce
State 196 conflicts: 19 shift/reduce
State 197 conflicts: 19 shift/reduce
State 198 conflicts: 19 shift/reduce
State 199 conflicts: 19 shift/reduce
State 200 conflicts: 19 shift/reduce
State 201 conflicts: 19 shift/reduce
State 202 conflicts: 19 shift/reduce
State 203 conflicts: 19 shift/reduce
State 204 conflicts: 19 shift/reduce
State 205 conflicts: 19 shift/reduce
State 206 conflicts: 19 shift/reduce
State 207 conflicts: 19 shift/reduce
State 208 conflicts: 19 shift/reduce
State 209 conflicts: 19 shift/reduce
State 210 conflicts: 19 shift/reduce
State 254 conflicts: 20 shift/reduce, 6 reduce/reduce
State 259 conflicts: 20 shift/reduce, 6 reduce/reduce


Grammar

    0 $accept: program $end

    1 program: PackageClause ImportDecls function_declaration

    2 PackageClause: PACKAGE PackageName

    3 PackageName: IDENTIFIER

    4 ImportDecls: ImportDecls ImportDecl
    5            | ε

    6 ImportDecl: IMPORT ImportSpecs
    7           | IMPORT LPAREN ImportSpecs RPAREN

    8 ImportSpecs: ImportSpecs ImportSpec
    9            | ε

   10 ImportSpec: '.' ImportPath
   11           | PackageName ImportPath
   12           | ImportPath

   13 ImportPath: STRING

   14 var_declarations: VAR declaration

   15 declaration_list: ε
   16                 | declaration declaration_list

   17 declaration: identifier_list
   18            | identifier_list ASSIGN expression_list
   19            | IDENTIFIER INT_TYPE ASSIGN expression_list
   20            | IDENTIFIER INT_TYPE
   21            | IDENTIFIER STRING_TYPE ASSIGN expression_list
   22            | IDENTIFIER STRING_TYPE

   23 identifier_list: IDENTIFIER
   24                | IDENTIFIER COMMA identifier_list

   25 type_declarations: TYPE type_declaration

   26 type_declaration: IDENTIFIER IDENTIFIER
   27                 | IDENTIFIER LPAREN IDENTIFIER RPAREN
   28                 | IDENTIFIER STRUCT LBRACE declaration_list RBRACE
   29                 | IDENTIFIER bracket_list IDENTIFIER
   30                 | IDENTIFIER bracket_list STRUCT LBRACE declaration_list RBRACE

   31 function_declaration: FUNCTION IDENTIFIER signature block_stmt

   32 signature: LPAREN parameters RPAREN
   33          | LPAREN RPAREN

   34 parameters: parameter_unit
   35           | parameter_unit COMMA parameters

   36 parameter_unit: identifier_list IDENTIFIER
   37               | identifier_list LPAREN IDENTIFIER RPAREN
   38               | identifier_list bracket_list IDENTIFIER

   39 bracket: '[' INTEGER ']'
   40        | '[' ']'

   41 bracket_list: bracket
   42             | bracket bracket_list

   43 expression_list: expression
   44                | expression COMMA expression_list

   45 expression: primary_expression
   46           | binary_op
   47           | builtin

   48 primary_expression: IDENTIFIER
   49                   | literal
   50                   | LPAREN expression RPAREN
   51                   | primary_expression LPAREN expression_list RPAREN
   52                   | primary_expression LPAREN RPAREN
   53                   | primary_expression '.' IDENTIFIER
   54                   | primary_expression '[' expression ']'

   55 literal: INTEGER
   56        | STRING
   57        | FLOAT
   58        | BOOLEAN

   59 binary_op: expression LOGICAL_OR expression
   60          | expression LOGICAL_AND expression
   61          | expression EQUAL_EQUAL expression
   62          | expression NOT_EQUAL expression
   63          | expression LESS_THAN_OR_EQUAL expression
   64          | expression GREATER_THAN_OR_EQUAL expression
   65          | expression LESS_THAN expression
   66          | expression GREATER_THAN expression
   67          | expression PLUS expression
   68          | expression MINUS expression
   69          | expression BITWISE_OR expression
   70          | expression BITWISE_XOR expression
   71          | expression TIMES expression
   72          | expression DIVIDE expression
   73          | expression MODULO expression
   74          | expression RIGHT_SHIFT expression
   75          | expression LEFT_SHIFT expression
   76          | expression BITWISE_AND expression
   77          | expression BIT_CLEAR expression

   78 builtin: APPEND LPAREN expression COMMA expression RPAREN
   79        | LEN LPAREN expression RPAREN

   80 statement: declaration_stmt statement
   81          | simple_stmt statement
   82          | return_stmt statement
   83          | break_stmt statement
   84          | continue_stmt statement
   85          | block_stmt statement
   86          | if_stmt statement
   87          | switch_stmt statement
   88          | for_stmt statement
   89          | print_stmt statement
   90          | println_stmt statement
   91          | COMMENT statement
   92          | ε

   93 declaration_stmt: var_declarations
   94                 | type_declarations

   95 simple_stmt: ε
   96            | inc_dec_stmt
   97            | assignment
   98            | short_variable_declaration

   99 inc_dec_stmt: expression INCREMENT
  100             | expression DECREMENT

  101 assignment: expression_list ASSIGN expression_list
  102           | expression assign_op expression

  103 assign_op: add_op_eq
  104          | mul_op_eq

  105 add_op_eq: ADD_ASSIGN
  106          | SUB_ASSIGN
  107          | OR_ASSIGN
  108          | XOR_ASSIGN

  109 mul_op_eq: MUL_ASSIGN
  110          | DIV_ASSIGN
  111          | MOD_ASSIGN
  112          | LEFT_SHIFT_ASSIGN
  113          | RIGHT_SHIFT_ASSIGN
  114          | AND_ASSIGN
  115          | CLEAR_ASSIGN

  116 short_variable_declaration: expression_list SHORT_VAR expression_list

  117 return_stmt: RETURN
  118            | RETURN expression

  119 break_stmt: BREAK

  120 continue_stmt: CONTINUE

  121 block_stmt: LBRACE statement RBRACE
  122           | LBRACE RBRACE

  123 if_stmt: IF expression block_stmt
  124        | IF simple_stmt expression block_stmt
  125        | IF simple_stmt expression block_stmt ELSE if_stmt
  126        | IF simple_stmt expression block_stmt ELSE block_stmt
  127        | IF expression block_stmt ELSE if_stmt
  128        | IF expression block_stmt ELSE block_stmt

  129 switch_stmt: expression_switch_stmt

  130 expression_switch_stmt: SWITCH switch_on LBRACE expression_case_clause_list RBRACE

  131 switch_on: ε
  132          | simple_stmt expression
  133          | simple_stmt
  134          | expression

  135 expression_case_clause: CASE expression_list ':' statement
  136                       | CASE expression_list ':'
  137                       | DEFAULT ':' statement
  138                       | DEFAULT ':'
  139                       | DEFAULT

  140 expression_case_clause_list: ε
  141                            | expression_case_clause_list expression_case_clause

  142 for_stmt: FOR block_stmt
  143         | FOR expression block_stmt
  144         | FOR for_clause block_stmt

  145 for_clause: simple_stmt SEMICOLON simple_stmt
  146           | simple_stmt SEMICOLON expression SEMICOLON simple_stmt

  147 print_stmt: PRINT LPAREN expression_list RPAREN
  148           | PRINT LPAREN RPAREN

  149 println_stmt: PRINTLN LPAREN expression_list RPAREN
  150             | PRINTLN LPAREN RPAREN


Terminals, with rules where they appear

    $end (0) 0
    '.' (46) 10 53
    ':' (58) 135 136 137 138
    '[' (91) 39 40 54
    ']' (93) 39 40 54
    error (256)
    PLUS (258) 67
    MINUS (259) 68
    TIMES (260) 71
    DIVIDE (261) 72
    ASSIGN (262) 18 19 21 101
    MODULO (263) 73
    BITWISE_AND (264) 76
    BITWISE_OR (265) 69
    BITWISE_XOR (266) 70
    BIT_CLEAR (267) 77
    LEFT_SHIFT (268) 75
    RIGHT_SHIFT (269) 74
    ADD_ASSIGN (270) 105
    SUB_ASSIGN (271) 106
    MUL_ASSIGN (272) 109
    DIV_ASSIGN (273) 110
    MOD_ASSIGN (274) 111
    AND_ASSIGN (275) 114
    OR_ASSIGN (276) 107
    XOR_ASSIGN (277) 108
    LEFT_SHIFT_ASSIGN (278) 112
    RIGHT_SHIFT_ASSIGN (279) 113
    INCREMENT (280) 99
    DECREMENT (281) 100
    RECEIVE (282)
    CLEAR_ASSIGN (283) 115
    SHORT_VAR (284) 116
    VARIADIC_PARAM (285)
    SELECTOR (286)
    EQUAL_EQUAL (287) 61
    NOT_EQUAL (288) 62
    LESS_THAN (289) 65
    LESS_THAN_OR_EQUAL (290) 63
    GREATER_THAN (291) 66
    GREATER_THAN_OR_EQUAL (292) 64
    LOGICAL_AND (293) 60
    LOGICAL_OR (294) 59
    LOGICAL_NOT (295)
    IF (296) 123 124 125 126 127 128
    ELSE (297) 125 126 127 128
    WHILE (298)
    FOR (299) 142 143 144
    SWITCH (300) 130
    CASE (301) 135 136
    DEFAULT (302) 137 138 139
    BREAK (303) 119
    CONTINUE (304) 120
    RETURN (305) 117 118
    VAR (306) 14
    INT_TYPE (307) 19 20
    BOOL_TYPE (308)
    STRING_TYPE (309) 21 22
    IMPORT (310) 6 7
    FUNCTION (311) 31
    APPEND (312) 78
    LEN (313) 79
    PRINT (314) 147 148
    PRINTLN (315) 149 150
    PACKAGE (316) 2
    CHAN (317)
    CONST (318)
    DEFER (319)
    FALLTHROUGH (320)
    GO (321)
    GOTO (322)
    INTERFACE (323)
    MAP (324)
    RANGE (325)
    SELECT (326)
    STRUCT (327) 28 30
    TYPE (328) 25
    LPAREN (329) 7 27 32 33 37 50 51 52 78 79 147 148 149 150
    RPAREN (330) 7 27 32 33 37 50 51 52 78 79 147 148 149 150
    LBRACE (331) 28 30 121 122 130
    RBRACE (332) 28 30 121 122 130
    LSQPAREN (333)
    RSQPAREN (334)
    SEMICOLON (335) 145 146
    COMMA (336) 24 35 44 78
    COLON (337)
    BOOLEAN (338) 58
    IDENTIFIER (339) 3 19 20 21 22 23 24 26 27 28 29 30 31 36 37 38 48 53
    INTEGER (340) 39 55
    STRING (341) 13 56
    FLOAT (342) 57
    COMMENT (343) 91
    MULTI_LINE_COMMENT (344)


Nonterminals, with rules where they appear

    $accept (94)
        on left: 0
    program (95)
        on left: 1
        on right: 0
    PackageClause (96)
        on left: 2
        on right: 1
    PackageName (97)
        on left: 3
        on right: 2 11
    ImportDecls (98)
        on left: 4 5
        on right: 1 4
    ImportDecl (99)
        on left: 6 7
        on right: 4
    ImportSpecs (100)
        on left: 8 9
        on right: 6 7 8
    ImportSpec (101)
        on left: 10 11 12
        on right: 8
    ImportPath (102)
        on left: 13
        on right: 10 11 12
    var_declarations (103)
        on left: 14
        on right: 93
    declaration_list (104)
        on left: 15 16
        on right: 16 28 30
    declaration (105)
        on left: 17 18 19 20 21 22
        on right: 14 16
    identifier_list (106)
        on left: 23 24
        on right: 17 18 24 36 37 38
    type_declarations (107)
        on left: 25
        on right: 94
    type_declaration (108)
        on left: 26 27 28 29 30
        on right: 25
    function_declaration (109)
        on left: 31
        on right: 1
    signature (110)
        on left: 32 33
        on right: 31
    parameters (111)
        on left: 34 35
        on right: 32 35
    parameter_unit (112)
        on left: 36 37 38
        on right: 34 35
    bracket (113)
        on left: 39 40
        on right: 41 42
    bracket_list (114)
        on left: 41 42
        on right: 29 30 38 42
    expression_list (115)
        on left: 43 44
        on right: 18 19 21 44 51 101 116 135 136 147 149
    expression (116)
        on left: 45 46 47
        on right: 43 44 50 54 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 99 100 102 118 123 124 125 126 127 128 132 134 143 146
    primary_expression (117)
        on left: 48 49 50 51 52 53 54
        on right: 45 51 52 53 54
    literal (118)
        on left: 55 56 57 58
        on right: 49
    binary_op (119)
        on left: 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77
        on right: 46
    builtin (120)
        on left: 78 79
        on right: 47
    statement (121)
        on left: 80 81 82 83 84 85 86 87 88 89 90 91 92
        on right: 80 81 82 83 84 85 86 87 88 89 90 91 121 135 137
    declaration_stmt (122)
        on left: 93 94
        on right: 80
    simple_stmt (123)
        on left: 95 96 97 98
        on right: 81 124 125 126 132 133 145 146
    inc_dec_stmt (124)
        on left: 99 100
        on right: 96
    assignment (125)
        on left: 101 102
        on right: 97
    assign_op (126)
        on left: 103 104
        on right: 102
    add_op_eq (127)
        on left: 105 106 107 108
        on right: 103
    mul_op_eq (128)
        on left: 109 110 111 112 113 114 115
        on right: 104
    short_variable_declaration (129)
        on left: 116
        on right: 98
    return_stmt (130)
        on left: 117 118
        on right: 82
    break_stmt (131)
        on left: 119
        on right: 83
    continue_stmt (132)
        on left: 120
        on right: 84
    block_stmt (133)
        on left: 121 122
        on right: 31 85 123 124 125 126 127 128 142 143 144
    if_stmt (134)
        on left: 123 124 125 126 127 128
        on right: 86 125 127
    switch_stmt (135)
        on left: 129
        on right: 87
    expression_switch_stmt (136)
        on left: 130
        on right: 129
    switch_on (137)
        on left: 131 132 133 134
        on right: 130
    expression_case_clause (138)
        on left: 135 136 137 138 139
        on right: 141
    expression_case_clause_list (139)
        on left: 140 141
        on right: 130 141
    for_stmt (140)
        on left: 142 143 144
        on right: 88
    for_clause (141)
        on left: 145 146
        on right: 144
    print_stmt (142)
        on left: 147 148
        on right: 89
    println_stmt (143)
        on left: 149 150
        on right: 90


State 0

    0 $accept: • program $end

    PACKAGE  shift, and go to state 1

    program        go to state 2
    PackageClause  go to state 3


State 1

    2 PackageClause: PACKAGE • PackageName

    IDENTIFIER  shift, and go to state 4

    PackageName  go to state 5


State 2

    0 $accept: program • $end

    $end  shift, and go to state 6


State 3

    1 program: PackageClause • ImportDecls function_declaration

    $default  reduce using rule 5 (ImportDecls)

    ImportDecls  go to state 7


State 4

    3 PackageName: IDENTIFIER •

    $default  reduce using rule 3 (PackageName)


State 5

    2 PackageClause: PACKAGE PackageName •

    $default  reduce using rule 2 (PackageClause)


State 6

    0 $accept: program $end •

    $default  accept


State 7

    1 program: PackageClause ImportDecls • function_declaration
    4 ImportDecls: ImportDecls • ImportDecl

    IMPORT    shift, and go to state 8
    FUNCTION  shift, and go to state 9

    ImportDecl            go to state 10
    function_declaration  go to state 11


State 8

    6 ImportDecl: IMPORT • ImportSpecs
    7           | IMPORT • LPAREN ImportSpecs RPAREN

    LPAREN  shift, and go to state 12

    $default  reduce using rule 9 (ImportSpecs)

    ImportSpecs  go to state 13


State 9

   31 function_declaration: FUNCTION • IDENTIFIER signature block_stmt

    IDENTIFIER  shift, and go to state 14


State 10

    4 ImportDecls: ImportDecls ImportDecl •

    $default  reduce using rule 4 (ImportDecls)


State 11

    1 program: PackageClause ImportDecls function_declaration •

    $default  reduce using rule 1 (program)


State 12

    7 ImportDecl: IMPORT LPAREN • ImportSpecs RPAREN

    $default  reduce using rule 9 (ImportSpecs)

    ImportSpecs  go to state 15


State 13

    6 ImportDecl: IMPORT ImportSpecs •
    8 ImportSpecs: ImportSpecs • ImportSpec

    IDENTIFIER  shift, and go to state 4
    STRING      shift, and go to state 16
    '.'         shift, and go to state 17

    $default  reduce using rule 6 (ImportDecl)

    PackageName  go to state 18
    ImportSpec   go to state 19
    ImportPath   go to state 20


State 14

   31 function_declaration: FUNCTION IDENTIFIER • signature block_stmt

    LPAREN  shift, and go to state 21

    signature  go to state 22


State 15

    7 ImportDecl: IMPORT LPAREN ImportSpecs • RPAREN
    8 ImportSpecs: ImportSpecs • ImportSpec

    RPAREN      shift, and go to state 23
    IDENTIFIER  shift, and go to state 4
    STRING      shift, and go to state 16
    '.'         shift, and go to state 17

    PackageName  go to state 18
    ImportSpec   go to state 19
    ImportPath   go to state 20


State 16

   13 ImportPath: STRING •

    $default  reduce using rule 13 (ImportPath)


State 17

   10 ImportSpec: '.' • ImportPath

    STRING  shift, and go to state 16

    ImportPath  go to state 24


State 18

   11 ImportSpec: PackageName • ImportPath

    STRING  shift, and go to state 16

    ImportPath  go to state 25


State 19

    8 ImportSpecs: ImportSpecs ImportSpec •

    $default  reduce using rule 8 (ImportSpecs)


State 20

   12 ImportSpec: ImportPath •

    $default  reduce using rule 12 (ImportSpec)


State 21

   32 signature: LPAREN • parameters RPAREN
   33          | LPAREN • RPAREN

    RPAREN      shift, and go to state 26
    IDENTIFIER  shift, and go to state 27

    identifier_list  go to state 28
    parameters       go to state 29
    parameter_unit   go to state 30


State 22

   31 function_declaration: FUNCTION IDENTIFIER signature • block_stmt

    LBRACE  shift, and go to state 31

    block_stmt  go to state 32


State 23

    7 ImportDecl: IMPORT LPAREN ImportSpecs RPAREN •

    $default  reduce using rule 7 (ImportDecl)


State 24

   10 ImportSpec: '.' ImportPath •

    $default  reduce using rule 10 (ImportSpec)


State 25

   11 ImportSpec: PackageName ImportPath •

    $default  reduce using rule 11 (ImportSpec)


State 26

   33 signature: LPAREN RPAREN •

    $default  reduce using rule 33 (signature)


State 27

   23 identifier_list: IDENTIFIER •
   24                | IDENTIFIER • COMMA identifier_list

    COMMA  shift, and go to state 33

    $default  reduce using rule 23 (identifier_list)


State 28

   36 parameter_unit: identifier_list • IDENTIFIER
   37               | identifier_list • LPAREN IDENTIFIER RPAREN
   38               | identifier_list • bracket_list IDENTIFIER

    LPAREN      shift, and go to state 34
    IDENTIFIER  shift, and go to state 35
    '['         shift, and go to state 36

    bracket       go to state 37
    bracket_list  go to state 38


State 29

   32 signature: LPAREN parameters • RPAREN

    RPAREN  shift, and go to state 39


State 30

   34 parameters: parameter_unit •
   35           | parameter_unit • COMMA parameters

    COMMA  shift, and go to state 40

    $default  reduce using rule 34 (parameters)


State 31

  121 block_stmt: LBRACE • statement RBRACE
  122           | LBRACE • RBRACE

    IF          shift, and go to state 41
    FOR         shift, and go to state 42
    SWITCH      shift, and go to state 43
    BREAK       shift, and go to state 44
    CONTINUE    shift, and go to state 45
    RETURN      shift, and go to state 46
    VAR         shift, and go to state 47
    APPEND      shift, and go to state 48
    LEN         shift, and go to state 49
    PRINT       shift, and go to state 50
    PRINTLN     shift, and go to state 51
    TYPE        shift, and go to state 52
    LPAREN      shift, and go to state 53
    LBRACE      shift, and go to state 31
    RBRACE      shift, and go to state 54
    BOOLEAN     shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57
    STRING      shift, and go to state 58
    FLOAT       shift, and go to state 59
    COMMENT     shift, and go to state 60

    IF          [reduce using rule 95 (simple_stmt)]
    FOR         [reduce using rule 95 (simple_stmt)]
    SWITCH      [reduce using rule 95 (simple_stmt)]
    BREAK       [reduce using rule 95 (simple_stmt)]
    CONTINUE    [reduce using rule 95 (simple_stmt)]
    RETURN      [reduce using rule 95 (simple_stmt)]
    VAR         [reduce using rule 95 (simple_stmt)]
    APPEND      [reduce using rule 95 (simple_stmt)]
    LEN         [reduce using rule 95 (simple_stmt)]
    PRINT       [reduce using rule 95 (simple_stmt)]
    PRINTLN     [reduce using rule 95 (simple_stmt)]
    TYPE        [reduce using rule 95 (simple_stmt)]
    LPAREN      [reduce using rule 95 (simple_stmt)]
    LBRACE      [reduce using rule 95 (simple_stmt)]
    RBRACE      [reduce using rule 92 (statement)]
    RBRACE      [reduce using rule 95 (simple_stmt)]
    BOOLEAN     [reduce using rule 95 (simple_stmt)]
    IDENTIFIER  [reduce using rule 95 (simple_stmt)]
    INTEGER     [reduce using rule 95 (simple_stmt)]
    STRING      [reduce using rule 95 (simple_stmt)]
    FLOAT       [reduce using rule 95 (simple_stmt)]
    COMMENT     [reduce using rule 95 (simple_stmt)]

    var_declarations            go to state 61
    type_declarations           go to state 62
    expression_list             go to state 63
    expression                  go to state 64
    primary_expression          go to state 65
    literal                     go to state 66
    binary_op                   go to state 67
    builtin                     go to state 68
    statement                   go to state 69
    declaration_stmt            go to state 70
    simple_stmt                 go to state 71
    inc_dec_stmt                go to state 72
    assignment                  go to state 73
    short_variable_declaration  go to state 74
    return_stmt                 go to state 75
    break_stmt                  go to state 76
    continue_stmt               go to state 77
    block_stmt                  go to state 78
    if_stmt                     go to state 79
    switch_stmt                 go to state 80
    expression_switch_stmt      go to state 81
    for_stmt                    go to state 82
    print_stmt                  go to state 83
    println_stmt                go to state 84


State 32

   31 function_declaration: FUNCTION IDENTIFIER signature block_stmt •

    $default  reduce using rule 31 (function_declaration)


State 33

   24 identifier_list: IDENTIFIER COMMA • identifier_list

    IDENTIFIER  shift, and go to state 27

    identifier_list  go to state 85


State 34

   37 parameter_unit: identifier_list LPAREN • IDENTIFIER RPAREN

    IDENTIFIER  shift, and go to state 86


State 35

   36 parameter_unit: identifier_list IDENTIFIER •

    $default  reduce using rule 36 (parameter_unit)


State 36

   39 bracket: '[' • INTEGER ']'
   40        | '[' • ']'

    INTEGER  shift, and go to state 87
    ']'      shift, and go to state 88


State 37

   41 bracket_list: bracket •
   42             | bracket • bracket_list

    '['  shift, and go to state 36

    $default  reduce using rule 41 (bracket_list)

    bracket       go to state 37
    bracket_list  go to state 89


State 38

   38 parameter_unit: identifier_list bracket_list • IDENTIFIER

    IDENTIFIER  shift, and go to state 90


State 39

   32 signature: LPAREN parameters RPAREN •

    $default  reduce using rule 32 (signature)


State 40

   35 parameters: parameter_unit COMMA • parameters

    IDENTIFIER  shift, and go to state 27

    identifier_list  go to state 28
    parameters       go to state 91
    parameter_unit   go to state 30


State 41

  123 if_stmt: IF • expression block_stmt
  124        | IF • simple_stmt expression block_stmt
  125        | IF • simple_stmt expression block_stmt ELSE if_stmt
  126        | IF • simple_stmt expression block_stmt ELSE block_stmt
  127        | IF • expression block_stmt ELSE if_stmt
  128        | IF • expression block_stmt ELSE block_stmt

    APPEND      shift, and go to state 48
    LEN         shift, and go to state 49
    LPAREN      shift, and go to state 53
    BOOLEAN     shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57
    STRING      shift, and go to state 58
    FLOAT       shift, and go to state 59

    APPEND      [reduce using rule 95 (simple_stmt)]
    LEN         [reduce using rule 95 (simple_stmt)]
    LPAREN      [reduce using rule 95 (simple_stmt)]
    BOOLEAN     [reduce using rule 95 (simple_stmt)]
    IDENTIFIER  [reduce using rule 95 (simple_stmt)]
    INTEGER     [reduce using rule 95 (simple_stmt)]
    STRING      [reduce using rule 95 (simple_stmt)]
    FLOAT       [reduce using rule 95 (simple_stmt)]

    expression_list             go to state 63
    expression                  go to state 92
    primary_expression          go to state 65
    literal                     go to state 66
    binary_op                   go to state 67
    builtin                     go to state 68
    simple_stmt                 go to state 93
    inc_dec_stmt                go to state 72
    assignment                  go to state 73
    short_variable_declaration  go to state 74


State 42

  142 for_stmt: FOR • block_stmt
  143         | FOR • expression block_stmt
  144         | FOR • for_clause block_stmt

    APPEND      shift, and go to state 48
    LEN         shift, and go to state 49
    LPAREN      shift, and go to state 53
    LBRACE      shift, and go to state 31
    BOOLEAN     shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57
    STRING      shift, and go to state 58
    FLOAT       shift, and go to state 59

    $default  reduce using rule 95 (simple_stmt)

    expression_list             go to state 63
    expression                  go to state 94
    primary_expression          go to state 65
    literal                     go to state 66
    binary_op                   go to state 67
    builtin                     go to state 68
    simple_stmt                 go to state 95
    inc_dec_stmt                go to state 72
    assignment                  go to state 73
    short_variable_declaration  go to state 74
    block_stmt                  go to state 96
    for_clause                  go to state 97


State 43

  130 expression_switch_stmt: SWITCH • switch_on LBRACE expression_case_clause_list RBRACE

    APPEND      shift, and go to state 48
    LEN         shift, and go to state 49
    LPAREN      shift, and go to state 53
    BOOLEAN     shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57
    STRING      shift, and go to state 58
    FLOAT       shift, and go to state 59

    APPEND      [reduce using rule 95 (simple_stmt)]
    LEN         [reduce using rule 95 (simple_stmt)]
    LPAREN      [reduce using rule 95 (simple_stmt)]
    LBRACE      reduce using rule 95 (simple_stmt)
    LBRACE      [reduce using rule 131 (switch_on)]
    BOOLEAN     [reduce using rule 95 (simple_stmt)]
    IDENTIFIER  [reduce using rule 95 (simple_stmt)]
    INTEGER     [reduce using rule 95 (simple_stmt)]
    STRING      [reduce using rule 95 (simple_stmt)]
    FLOAT       [reduce using rule 95 (simple_stmt)]
    $default    reduce using rule 95 (simple_stmt)

    expression_list             go to state 63
    expression                  go to state 98
    primary_expression          go to state 65
    literal                     go to state 66
    binary_op                   go to state 67
    builtin                     go to state 68
    simple_stmt                 go to state 99
    inc_dec_stmt                go to state 72
    assignment                  go to state 73
    short_variable_declaration  go to state 74
    switch_on                   go to state 100


State 44

  119 break_stmt: BREAK •

    $default  reduce using rule 119 (break_stmt)


State 45

  120 continue_stmt: CONTINUE •

    $default  reduce using rule 120 (continue_stmt)


State 46

  117 return_stmt: RETURN •
  118            | RETURN • expression

    APPEND      shift, and go to state 48
    LEN         shift, and go to state 49
    LPAREN      shift, and go to state 53
    BOOLEAN     shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57
    STRING      shift, and go to state 58
    FLOAT       shift, and go to state 59

    APPEND      [reduce using rule 117 (return_stmt)]
    LEN         [reduce using rule 117 (return_stmt)]
    LPAREN      [reduce using rule 117 (return_stmt)]
    BOOLEAN     [reduce using rule 117 (return_stmt)]
    IDENTIFIER  [reduce using rule 117 (return_stmt)]
    INTEGER     [reduce using rule 117 (return_stmt)]
    STRING      [reduce using rule 117 (return_stmt)]
    FLOAT       [reduce using rule 117 (return_stmt)]
    $default    reduce using rule 117 (return_stmt)

    expression          go to state 101
    primary_expression  go to state 65
    literal             go to state 66
    binary_op           go to state 67
    builtin             go to state 68


State 47

   14 var_declarations: VAR • declaration

    IDENTIFIER  shift, and go to state 102

    declaration      go to state 103
    identifier_list  go to state 104


State 48

   78 builtin: APPEND • LPAREN expression COMMA expression RPAREN

    LPAREN  shift, and go to state 105


State 49

   79 builtin: LEN • LPAREN expression RPAREN

    LPAREN  shift, and go to state 106


State 50

  147 print_stmt: PRINT • LPAREN expression_list RPAREN
  148           | PRINT • LPAREN RPAREN

    LPAREN  shift, and go to state 107


State 51

  149 println_stmt: PRINTLN • LPAREN expression_list RPAREN
  150             | PRINTLN • LPAREN RPAREN

    LPAREN  shift, and go to state 108


State 52

   25 type_declarations: TYPE • type_declaration

    IDENTIFIER  shift, and go to state 109

    type_declaration  go to state 110


State 53

   50 primary_expression: LPAREN • expression RPAREN

    APPEND      shift, and go to state 48
    LEN         shift, and go to state 49
    LPAREN      shift, and go to state 53
    BOOLEAN     shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57
    STRING      shift, and go to state 58
    FLOAT       shift, and go to state 59

    expression          go to state 111
    primary_expression  go to state 65
    literal             go to state 66
    binary_op           go to state 67
    builtin             go to state 68


State 54

  122 block_stmt: LBRACE RBRACE •

    $default  reduce using rule 122 (block_stmt)


State 55

   58 literal: BOOLEAN •

    $default  reduce using rule 58 (literal)


State 56

   48 primary_expression: IDENTIFIER •

    $default  reduce using rule 48 (primary_expression)


State 57

   55 literal: INTEGER •

    $default  reduce using rule 55 (literal)


State 58

   56 literal: STRING •

    $default  reduce using rule 56 (literal)


State 59

   57 literal: FLOAT •

    $default  reduce using rule 57 (literal)


State 60

   91 statement: COMMENT • statement

    IF          shift, and go to state 41
    FOR         shift, and go to state 42
    SWITCH      shift, and go to state 43
    BREAK       shift, and go to state 44
    CONTINUE    shift, and go to state 45
    RETURN      shift, and go to state 46
    VAR         shift, and go to state 47
    APPEND      shift, and go to state 48
    LEN         shift, and go to state 49
    PRINT       shift, and go to state 50
    PRINTLN     shift, and go to state 51
    TYPE        shift, and go to state 52
    LPAREN      shift, and go to state 53
    LBRACE      shift, and go to state 31
    BOOLEAN     shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57
    STRING      shift, and go to state 58
    FLOAT       shift, and go to state 59
    COMMENT     shift, and go to state 60

    IF          [reduce using rule 95 (simple_stmt)]
    FOR         [reduce using rule 95 (simple_stmt)]
    SWITCH      [reduce using rule 95 (simple_stmt)]
    CASE        reduce using rule 92 (statement)
    CASE        [reduce using rule 95 (simple_stmt)]
    DEFAULT     reduce using rule 92 (statement)
    DEFAULT     [reduce using rule 95 (simple_stmt)]
    BREAK       [reduce using rule 95 (simple_stmt)]
    CONTINUE    [reduce using rule 95 (simple_stmt)]
    RETURN      [reduce using rule 95 (simple_stmt)]
    VAR         [reduce using rule 95 (simple_stmt)]
    APPEND      [reduce using rule 95 (simple_stmt)]
    LEN         [reduce using rule 95 (simple_stmt)]
    PRINT       [reduce using rule 95 (simple_stmt)]
    PRINTLN     [reduce using rule 95 (simple_stmt)]
    TYPE        [reduce using rule 95 (simple_stmt)]
    LPAREN      [reduce using rule 95 (simple_stmt)]
    LBRACE      [reduce using rule 95 (simple_stmt)]
    RBRACE      reduce using rule 92 (statement)
    RBRACE      [reduce using rule 95 (simple_stmt)]
    BOOLEAN     [reduce using rule 95 (simple_stmt)]
    IDENTIFIER  [reduce using rule 95 (simple_stmt)]
    INTEGER     [reduce using rule 95 (simple_stmt)]
    STRING      [reduce using rule 95 (simple_stmt)]
    FLOAT       [reduce using rule 95 (simple_stmt)]
    COMMENT     [reduce using rule 95 (simple_stmt)]
    $default    reduce using rule 92 (statement)

    var_declarations            go to state 61
    type_declarations           go to state 62
    expression_list             go to state 63
    expression                  go to state 64
    primary_expression          go to state 65
    literal                     go to state 66
    binary_op                   go to state 67
    builtin                     go to state 68
    statement                   go to state 112
    declaration_stmt            go to state 70
    simple_stmt                 go to state 71
    inc_dec_stmt                go to state 72
    assignment                  go to state 73
    short_variable_declaration  go to state 74
    return_stmt                 go to state 75
    break_stmt                  go to state 76
    continue_stmt               go to state 77
    block_stmt                  go to state 78
    if_stmt                     go to state 79
    switch_stmt                 go to state 80
    expression_switch_stmt      go to state 81
    for_stmt                    go to state 82
    print_stmt                  go to state 83
    println_stmt                go to state 84


State 61

   93 declaration_stmt: var_declarations •

    $default  reduce using rule 93 (declaration_stmt)


State 62

   94 declaration_stmt: type_declarations •

    $default  reduce using rule 94 (declaration_stmt)


State 63

  101 assignment: expression_list • ASSIGN expression_list
  116 short_variable_declaration: expression_list • SHORT_VAR expression_list

    ASSIGN     shift, and go to state 113
    SHORT_VAR  shift, and go to state 114


State 64

   43 expression_list: expression •
   44                | expression • COMMA expression_list
   59 binary_op: expression • LOGICAL_OR expression
   60          | expression • LOGICAL_AND expression
   61          | expression • EQUAL_EQUAL expression
   62          | expression • NOT_EQUAL expression
   63          | expression • LESS_THAN_OR_EQUAL expression
   64          | expression • GREATER_THAN_OR_EQUAL expression
   65          | expression • LESS_THAN expression
   66          | expression • GREATER_THAN expression
   67          | expression • PLUS expression
   68          | expression • MINUS expression
   69          | expression • BITWISE_OR expression
   70          | expression • BITWISE_XOR expression
   71          | expression • TIMES expression
   72          | expression • DIVIDE expression
   73          | expression • MODULO expression
   74          | expression • RIGHT_SHIFT expression
   75          | expression • LEFT_SHIFT expression
   76          | expression • BITWISE_AND expression
   77          | expression • BIT_CLEAR expression
   99 inc_dec_stmt: expression • INCREMENT
  100             | expression • DECREMENT
  102 assignment: expression • assign_op expression

    PLUS                   shift, and go to state 115
    MINUS                  shift, and go to state 116
    TIMES                  shift, and go to state 117
    DIVIDE                 shift, and go to state 118
    MODULO                 shift, and go to state 119
    BITWISE_AND            shift, and go to state 120
    BITWISE_OR             shift, and go to state 121
    BITWISE_XOR            shift, and go to state 122
    BIT_CLEAR              shift, and go to state 123
    LEFT_SHIFT             shift, and go to state 124
    RIGHT_SHIFT            shift, and go to state 125
    ADD_ASSIGN             shift, and go to state 126
    SUB_ASSIGN             shift, and go to state 127
    MUL_ASSIGN             shift, and go to state 128
    DIV_ASSIGN             shift, and go to state 129
    MOD_ASSIGN             shift, and go to state 130
    AND_ASSIGN             shift, and go to state 131
    OR_ASSIGN              shift, and go to state 132
    XOR_ASSIGN             shift, and go to state 133
    LEFT_SHIFT_ASSIGN      shift, and go to state 134
    RIGHT_SHIFT_ASSIGN     shift, and go to state 135
    INCREMENT              shift, and go to state 136
    DECREMENT              shift, and go to state 137
    CLEAR_ASSIGN           shift, and go to state 138
    EQUAL_EQUAL            shift, and go to state 139
    NOT_EQUAL              shift, and go to state 140
    LESS_THAN              shift, and go to state 141
    LESS_THAN_OR_EQUAL     shift, and go to state 142
    GREATER_THAN           shift, and go to state 143
    GREATER_THAN_OR_EQUAL  shift, and go to state 144
    LOGICAL_AND            shift, and go to state 145
    LOGICAL_OR             shift, and go to state 146
    COMMA                  shift, and go to state 147

    $default  reduce using rule 43 (expression_list)

    assign_op  go to state 148
    add_op_eq  go to state 149
    mul_op_eq  go to state 150


State 65

   45 expression: primary_expression •
   51 primary_expression: primary_expression • LPAREN expression_list RPAREN
   52                   | primary_expression • LPAREN RPAREN
   53                   | primary_expression • '.' IDENTIFIER
   54                   | primary_expression • '[' expression ']'

    LPAREN  shift, and go to state 151
    '.'     shift, and go to state 152
    '['     shift, and go to state 153

    LPAREN    [reduce using rule 45 (expression)]
    $default  reduce using rule 45 (expression)


State 66

   49 primary_expression: literal •

    $default  reduce using rule 49 (primary_expression)


State 67

   46 expression: binary_op •

    $default  reduce using rule 46 (expression)


State 68

   47 expression: builtin •

    $default  reduce using rule 47 (expression)


State 69

  121 block_stmt: LBRACE statement • RBRACE

    RBRACE  shift, and go to state 154


State 70

   80 statement: declaration_stmt • statement

    IF          shift, and go to state 41
    FOR         shift, and go to state 42
    SWITCH      shift, and go to state 43
    BREAK       shift, and go to state 44
    CONTINUE    shift, and go to state 45
    RETURN      shift, and go to state 46
    VAR         shift, and go to state 47
    APPEND      shift, and go to state 48
    LEN         shift, and go to state 49
    PRINT       shift, and go to state 50
    PRINTLN     shift, and go to state 51
    TYPE        shift, and go to state 52
    LPAREN      shift, and go to state 53
    LBRACE      shift, and go to state 31
    BOOLEAN     shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57
    STRING      shift, and go to state 58
    FLOAT       shift, and go to state 59
    COMMENT     shift, and go to state 60

    IF          [reduce using rule 95 (simple_stmt)]
    FOR         [reduce using rule 95 (simple_stmt)]
    SWITCH      [reduce using rule 95 (simple_stmt)]
    CASE        reduce using rule 92 (statement)
    CASE        [reduce using rule 95 (simple_stmt)]
    DEFAULT     reduce using rule 92 (statement)
    DEFAULT     [reduce using rule 95 (simple_stmt)]
    BREAK       [reduce using rule 95 (simple_stmt)]
    CONTINUE    [reduce using rule 95 (simple_stmt)]
    RETURN      [reduce using rule 95 (simple_stmt)]
    VAR         [reduce using rule 95 (simple_stmt)]
    APPEND      [reduce using rule 95 (simple_stmt)]
    LEN         [reduce using rule 95 (simple_stmt)]
    PRINT       [reduce using rule 95 (simple_stmt)]
    PRINTLN     [reduce using rule 95 (simple_stmt)]
    TYPE        [reduce using rule 95 (simple_stmt)]
    LPAREN      [reduce using rule 95 (simple_stmt)]
    LBRACE      [reduce using rule 95 (simple_stmt)]
    RBRACE      reduce using rule 92 (statement)
    RBRACE      [reduce using rule 95 (simple_stmt)]
    BOOLEAN     [reduce using rule 95 (simple_stmt)]
    IDENTIFIER  [reduce using rule 95 (simple_stmt)]
    INTEGER     [reduce using rule 95 (simple_stmt)]
    STRING      [reduce using rule 95 (simple_stmt)]
    FLOAT       [reduce using rule 95 (simple_stmt)]
    COMMENT     [reduce using rule 95 (simple_stmt)]
    $default    reduce using rule 92 (statement)

    var_declarations            go to state 61
    type_declarations           go to state 62
    expression_list             go to state 63
    expression                  go to state 64
    primary_expression          go to state 65
    literal                     go to state 66
    binary_op                   go to state 67
    builtin                     go to state 68
    statement                   go to state 155
    declaration_stmt            go to state 70
    simple_stmt                 go to state 71
    inc_dec_stmt                go to state 72
    assignment                  go to state 73
    short_variable_declaration  go to state 74
    return_stmt                 go to state 75
    break_stmt                  go to state 76
    continue_stmt               go to state 77
    block_stmt                  go to state 78
    if_stmt                     go to state 79
    switch_stmt                 go to state 80
    expression_switch_stmt      go to state 81
    for_stmt                    go to state 82
    print_stmt                  go to state 83
    println_stmt                go to state 84


State 71

   81 statement: simple_stmt • statement

    IF          shift, and go to state 41
    FOR         shift, and go to state 42
    SWITCH      shift, and go to state 43
    BREAK       shift, and go to state 44
    CONTINUE    shift, and go to state 45
    RETURN      shift, and go to state 46
    VAR         shift, and go to state 47
    APPEND      shift, and go to state 48
    LEN         shift, and go to state 49
    PRINT       shift, and go to state 50
    PRINTLN     shift, and go to state 51
    TYPE        shift, and go to state 52
    LPAREN      shift, and go to state 53
    LBRACE      shift, and go to state 31
    BOOLEAN     shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57
    STRING      shift, and go to state 58
    FLOAT       shift, and go to state 59
    COMMENT     shift, and go to state 60

    IF          [reduce using rule 95 (simple_stmt)]
    FOR         [reduce using rule 95 (simple_stmt)]
    SWITCH      [reduce using rule 95 (simple_stmt)]
    CASE        reduce using rule 92 (statement)
    CASE        [reduce using rule 95 (simple_stmt)]
    DEFAULT     reduce using rule 92 (statement)
    DEFAULT     [reduce using rule 95 (simple_stmt)]
    BREAK       [reduce using rule 95 (simple_stmt)]
    CONTINUE    [reduce using rule 95 (simple_stmt)]
    RETURN      [reduce using rule 95 (simple_stmt)]
    VAR         [reduce using rule 95 (simple_stmt)]
    APPEND      [reduce using rule 95 (simple_stmt)]
    LEN         [reduce using rule 95 (simple_stmt)]
    PRINT       [reduce using rule 95 (simple_stmt)]
    PRINTLN     [reduce using rule 95 (simple_stmt)]
    TYPE        [reduce using rule 95 (simple_stmt)]
    LPAREN      [reduce using rule 95 (simple_stmt)]
    LBRACE      [reduce using rule 95 (simple_stmt)]
    RBRACE      reduce using rule 92 (statement)
    RBRACE      [reduce using rule 95 (simple_stmt)]
    BOOLEAN     [reduce using rule 95 (simple_stmt)]
    IDENTIFIER  [reduce using rule 95 (simple_stmt)]
    INTEGER     [reduce using rule 95 (simple_stmt)]
    STRING      [reduce using rule 95 (simple_stmt)]
    FLOAT       [reduce using rule 95 (simple_stmt)]
    COMMENT     [reduce using rule 95 (simple_stmt)]
    $default    reduce using rule 92 (statement)

    var_declarations            go to state 61
    type_declarations           go to state 62
    expression_list             go to state 63
    expression                  go to state 64
    primary_expression          go to state 65
    literal                     go to state 66
    binary_op                   go to state 67
    builtin                     go to state 68
    statement                   go to state 156
    declaration_stmt            go to state 70
    simple_stmt                 go to state 71
    inc_dec_stmt                go to state 72
    assignment                  go to state 73
    short_variable_declaration  go to state 74
    return_stmt                 go to state 75
    break_stmt                  go to state 76
    continue_stmt               go to state 77
    block_stmt                  go to state 78
    if_stmt                     go to state 79
    switch_stmt                 go to state 80
    expression_switch_stmt      go to state 81
    for_stmt                    go to state 82
    print_stmt                  go to state 83
    println_stmt                go to state 84


State 72

   96 simple_stmt: inc_dec_stmt •

    $default  reduce using rule 96 (simple_stmt)


State 73

   97 simple_stmt: assignment •

    $default  reduce using rule 97 (simple_stmt)


State 74

   98 simple_stmt: short_variable_declaration •

    $default  reduce using rule 98 (simple_stmt)


State 75

   82 statement: return_stmt • statement

    IF          shift, and go to state 41
    FOR         shift, and go to state 42
    SWITCH      shift, and go to state 43
    BREAK       shift, and go to state 44
    CONTINUE    shift, and go to state 45
    RETURN      shift, and go to state 46
    VAR         shift, and go to state 47
    APPEND      shift, and go to state 48
    LEN         shift, and go to state 49
    PRINT       shift, and go to state 50
    PRINTLN     shift, and go to state 51
    TYPE        shift, and go to state 52
    LPAREN      shift, and go to state 53
    LBRACE      shift, and go to state 31
    BOOLEAN     shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57
    STRING      shift, and go to state 58
    FLOAT       shift, and go to state 59
    COMMENT     shift, and go to state 60

    IF          [reduce using rule 95 (simple_stmt)]
    FOR         [reduce using rule 95 (simple_stmt)]
    SWITCH      [reduce using rule 95 (simple_stmt)]
    CASE        reduce using rule 92 (statement)
    CASE        [reduce using rule 95 (simple_stmt)]
    DEFAULT     reduce using rule 92 (statement)
    DEFAULT     [reduce using rule 95 (simple_stmt)]
    BREAK       [reduce using rule 95 (simple_stmt)]
    CONTINUE    [reduce using rule 95 (simple_stmt)]
    RETURN      [reduce using rule 95 (simple_stmt)]
    VAR         [reduce using rule 95 (simple_stmt)]
    APPEND      [reduce using rule 95 (simple_stmt)]
    LEN         [reduce using rule 95 (simple_stmt)]
    PRINT       [reduce using rule 95 (simple_stmt)]
    PRINTLN     [reduce using rule 95 (simple_stmt)]
    TYPE        [reduce using rule 95 (simple_stmt)]
    LPAREN      [reduce using rule 95 (simple_stmt)]
    LBRACE      [reduce using rule 95 (simple_stmt)]
    RBRACE      reduce using rule 92 (statement)
    RBRACE      [reduce using rule 95 (simple_stmt)]
    BOOLEAN     [reduce using rule 95 (simple_stmt)]
    IDENTIFIER  [reduce using rule 95 (simple_stmt)]
    INTEGER     [reduce using rule 95 (simple_stmt)]
    STRING      [reduce using rule 95 (simple_stmt)]
    FLOAT       [reduce using rule 95 (simple_stmt)]
    COMMENT     [reduce using rule 95 (simple_stmt)]
    $default    reduce using rule 92 (statement)

    var_declarations            go to state 61
    type_declarations           go to state 62
    expression_list             go to state 63
    expression                  go to state 64
    primary_expression          go to state 65
    literal                     go to state 66
    binary_op                   go to state 67
    builtin                     go to state 68
    statement                   go to state 157
    declaration_stmt            go to state 70
    simple_stmt                 go to state 71
    inc_dec_stmt                go to state 72
    assignment                  go to state 73
    short_variable_declaration  go to state 74
    return_stmt                 go to state 75
    break_stmt                  go to state 76
    continue_stmt               go to state 77
    block_stmt                  go to state 78
    if_stmt                     go to state 79
    switch_stmt                 go to state 80
    expression_switch_stmt      go to state 81
    for_stmt                    go to state 82
    print_stmt                  go to state 83
    println_stmt                go to state 84


State 76

   83 statement: break_stmt • statement

    IF          shift, and go to state 41
    FOR         shift, and go to state 42
    SWITCH      shift, and go to state 43
    BREAK       shift, and go to state 44
    CONTINUE    shift, and go to state 45
    RETURN      shift, and go to state 46
    VAR         shift, and go to state 47
    APPEND      shift, and go to state 48
    LEN         shift, and go to state 49
    PRINT       shift, and go to state 50
    PRINTLN     shift, and go to state 51
    TYPE        shift, and go to state 52
    LPAREN      shift, and go to state 53
    LBRACE      shift, and go to state 31
    BOOLEAN     shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57
    STRING      shift, and go to state 58
    FLOAT       shift, and go to state 59
    COMMENT     shift, and go to state 60

    IF          [reduce using rule 95 (simple_stmt)]
    FOR         [reduce using rule 95 (simple_stmt)]
    SWITCH      [reduce using rule 95 (simple_stmt)]
    CASE        reduce using rule 92 (statement)
    CASE        [reduce using rule 95 (simple_stmt)]
    DEFAULT     reduce using rule 92 (statement)
    DEFAULT     [reduce using rule 95 (simple_stmt)]
    BREAK       [reduce using rule 95 (simple_stmt)]
    CONTINUE    [reduce using rule 95 (simple_stmt)]
    RETURN      [reduce using rule 95 (simple_stmt)]
    VAR         [reduce using rule 95 (simple_stmt)]
    APPEND      [reduce using rule 95 (simple_stmt)]
    LEN         [reduce using rule 95 (simple_stmt)]
    PRINT       [reduce using rule 95 (simple_stmt)]
    PRINTLN     [reduce using rule 95 (simple_stmt)]
    TYPE        [reduce using rule 95 (simple_stmt)]
    LPAREN      [reduce using rule 95 (simple_stmt)]
    LBRACE      [reduce using rule 95 (simple_stmt)]
    RBRACE      reduce using rule 92 (statement)
    RBRACE      [reduce using rule 95 (simple_stmt)]
    BOOLEAN     [reduce using rule 95 (simple_stmt)]
    IDENTIFIER  [reduce using rule 95 (simple_stmt)]
    INTEGER     [reduce using rule 95 (simple_stmt)]
    STRING      [reduce using rule 95 (simple_stmt)]
    FLOAT       [reduce using rule 95 (simple_stmt)]
    COMMENT     [reduce using rule 95 (simple_stmt)]
    $default    reduce using rule 92 (statement)

    var_declarations            go to state 61
    type_declarations           go to state 62
    expression_list             go to state 63
    expression                  go to state 64
    primary_expression          go to state 65
    literal                     go to state 66
    binary_op                   go to state 67
    builtin                     go to state 68
    statement                   go to state 158
    declaration_stmt            go to state 70
    simple_stmt                 go to state 71
    inc_dec_stmt                go to state 72
    assignment                  go to state 73
    short_variable_declaration  go to state 74
    return_stmt                 go to state 75
    break_stmt                  go to state 76
    continue_stmt               go to state 77
    block_stmt                  go to state 78
    if_stmt                     go to state 79
    switch_stmt                 go to state 80
    expression_switch_stmt      go to state 81
    for_stmt                    go to state 82
    print_stmt                  go to state 83
    println_stmt                go to state 84


State 77

   84 statement: continue_stmt • statement

    IF          shift, and go to state 41
    FOR         shift, and go to state 42
    SWITCH      shift, and go to state 43
    BREAK       shift, and go to state 44
    CONTINUE    shift, and go to state 45
    RETURN      shift, and go to state 46
    VAR         shift, and go to state 47
    APPEND      shift, and go to state 48
    LEN         shift, and go to state 49
    PRINT       shift, and go to state 50
    PRINTLN     shift, and go to state 51
    TYPE        shift, and go to state 52
    LPAREN      shift, and go to state 53
    LBRACE      shift, and go to state 31
    BOOLEAN     shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57
    STRING      shift, and go to state 58
    FLOAT       shift, and go to state 59
    COMMENT     shift, and go to state 60

    IF          [reduce using rule 95 (simple_stmt)]
    FOR         [reduce using rule 95 (simple_stmt)]
    SWITCH      [reduce using rule 95 (simple_stmt)]
    CASE        reduce using rule 92 (statement)
    CASE        [reduce using rule 95 (simple_stmt)]
    DEFAULT     reduce using rule 92 (statement)
    DEFAULT     [reduce using rule 95 (simple_stmt)]
    BREAK       [reduce using rule 95 (simple_stmt)]
    CONTINUE    [reduce using rule 95 (simple_stmt)]
    RETURN      [reduce using rule 95 (simple_stmt)]
    VAR         [reduce using rule 95 (simple_stmt)]
    APPEND      [reduce using rule 95 (simple_stmt)]
    LEN         [reduce using rule 95 (simple_stmt)]
    PRINT       [reduce using rule 95 (simple_stmt)]
    PRINTLN     [reduce using rule 95 (simple_stmt)]
    TYPE        [reduce using rule 95 (simple_stmt)]
    LPAREN      [reduce using rule 95 (simple_stmt)]
    LBRACE      [reduce using rule 95 (simple_stmt)]
    RBRACE      reduce using rule 92 (statement)
    RBRACE      [reduce using rule 95 (simple_stmt)]
    BOOLEAN     [reduce using rule 95 (simple_stmt)]
    IDENTIFIER  [reduce using rule 95 (simple_stmt)]
    INTEGER     [reduce using rule 95 (simple_stmt)]
    STRING      [reduce using rule 95 (simple_stmt)]
    FLOAT       [reduce using rule 95 (simple_stmt)]
    COMMENT     [reduce using rule 95 (simple_stmt)]
    $default    reduce using rule 92 (statement)

    var_declarations            go to state 61
    type_declarations           go to state 62
    expression_list             go to state 63
    expression                  go to state 64
    primary_expression          go to state 65
    literal                     go to state 66
    binary_op                   go to state 67
    builtin                     go to state 68
    statement                   go to state 159
    declaration_stmt            go to state 70
    simple_stmt                 go to state 71
    inc_dec_stmt                go to state 72
    assignment                  go to state 73
    short_variable_declaration  go to state 74
    return_stmt                 go to state 75
    break_stmt                  go to state 76
    continue_stmt               go to state 77
    block_stmt                  go to state 78
    if_stmt                     go to state 79
    switch_stmt                 go to state 80
    expression_switch_stmt      go to state 81
    for_stmt                    go to state 82
    print_stmt                  go to state 83
    println_stmt                go to state 84


State 78

   85 statement: block_stmt • statement

    IF          shift, and go to state 41
    FOR         shift, and go to state 42
    SWITCH      shift, and go to state 43
    BREAK       shift, and go to state 44
    CONTINUE    shift, and go to state 45
    RETURN      shift, and go to state 46
    VAR         shift, and go to state 47
    APPEND      shift, and go to state 48
    LEN         shift, and go to state 49
    PRINT       shift, and go to state 50
    PRINTLN     shift, and go to state 51
    TYPE        shift, and go to state 52
    LPAREN      shift, and go to state 53
    LBRACE      shift, and go to state 31
    BOOLEAN     shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57
    STRING      shift, and go to state 58
    FLOAT       shift, and go to state 59
    COMMENT     shift, and go to state 60

    IF          [reduce using rule 95 (simple_stmt)]
    FOR         [reduce using rule 95 (simple_stmt)]
    SWITCH      [reduce using rule 95 (simple_stmt)]
    CASE        reduce using rule 92 (statement)
    CASE        [reduce using rule 95 (simple_stmt)]
    DEFAULT     reduce using rule 92 (statement)
    DEFAULT     [reduce using rule 95 (simple_stmt)]
    BREAK       [reduce using rule 95 (simple_stmt)]
    CONTINUE    [reduce using rule 95 (simple_stmt)]
    RETURN      [reduce using rule 95 (simple_stmt)]
    VAR         [reduce using rule 95 (simple_stmt)]
    APPEND      [reduce using rule 95 (simple_stmt)]
    LEN         [reduce using rule 95 (simple_stmt)]
    PRINT       [reduce using rule 95 (simple_stmt)]
    PRINTLN     [reduce using rule 95 (simple_stmt)]
    TYPE        [reduce using rule 95 (simple_stmt)]
    LPAREN      [reduce using rule 95 (simple_stmt)]
    LBRACE      [reduce using rule 95 (simple_stmt)]
    RBRACE      reduce using rule 92 (statement)
    RBRACE      [reduce using rule 95 (simple_stmt)]
    BOOLEAN     [reduce using rule 95 (simple_stmt)]
    IDENTIFIER  [reduce using rule 95 (simple_stmt)]
    INTEGER     [reduce using rule 95 (simple_stmt)]
    STRING      [reduce using rule 95 (simple_stmt)]
    FLOAT       [reduce using rule 95 (simple_stmt)]
    COMMENT     [reduce using rule 95 (simple_stmt)]
    $default    reduce using rule 92 (statement)

    var_declarations            go to state 61
    type_declarations           go to state 62
    expression_list             go to state 63
    expression                  go to state 64
    primary_expression          go to state 65
    literal                     go to state 66
    binary_op                   go to state 67
    builtin                     go to state 68
    statement                   go to state 160
    declaration_stmt            go to state 70
    simple_stmt                 go to state 71
    inc_dec_stmt                go to state 72
    assignment                  go to state 73
    short_variable_declaration  go to state 74
    return_stmt                 go to state 75
    break_stmt                  go to state 76
    continue_stmt               go to state 77
    block_stmt                  go to state 78
    if_stmt                     go to state 79
    switch_stmt                 go to state 80
    expression_switch_stmt      go to state 81
    for_stmt                    go to state 82
    print_stmt                  go to state 83
    println_stmt                go to state 84


State 79

   86 statement: if_stmt • statement

    IF          shift, and go to state 41
    FOR         shift, and go to state 42
    SWITCH      shift, and go to state 43
    BREAK       shift, and go to state 44
    CONTINUE    shift, and go to state 45
    RETURN      shift, and go to state 46
    VAR         shift, and go to state 47
    APPEND      shift, and go to state 48
    LEN         shift, and go to state 49
    PRINT       shift, and go to state 50
    PRINTLN     shift, and go to state 51
    TYPE        shift, and go to state 52
    LPAREN      shift, and go to state 53
    LBRACE      shift, and go to state 31
    BOOLEAN     shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57
    STRING      shift, and go to state 58
    FLOAT       shift, and go to state 59
    COMMENT     shift, and go to state 60

    IF          [reduce using rule 95 (simple_stmt)]
    FOR         [reduce using rule 95 (simple_stmt)]
    SWITCH      [reduce using rule 95 (simple_stmt)]
    CASE        reduce using rule 92 (statement)
    CASE        [reduce using rule 95 (simple_stmt)]
    DEFAULT     reduce using rule 92 (statement)
    DEFAULT     [reduce using rule 95 (simple_stmt)]
    BREAK       [reduce using rule 95 (simple_stmt)]
    CONTINUE    [reduce using rule 95 (simple_stmt)]
    RETURN      [reduce using rule 95 (simple_stmt)]
    VAR         [reduce using rule 95 (simple_stmt)]
    APPEND      [reduce using rule 95 (simple_stmt)]
    LEN         [reduce using rule 95 (simple_stmt)]
    PRINT       [reduce using rule 95 (simple_stmt)]
    PRINTLN     [reduce using rule 95 (simple_stmt)]
    TYPE        [reduce using rule 95 (simple_stmt)]
    LPAREN      [reduce using rule 95 (simple_stmt)]
    LBRACE      [reduce using rule 95 (simple_stmt)]
    RBRACE      reduce using rule 92 (statement)
    RBRACE      [reduce using rule 95 (simple_stmt)]
    BOOLEAN     [reduce using rule 95 (simple_stmt)]
    IDENTIFIER  [reduce using rule 95 (simple_stmt)]
    INTEGER     [reduce using rule 95 (simple_stmt)]
    STRING      [reduce using rule 95 (simple_stmt)]
    FLOAT       [reduce using rule 95 (simple_stmt)]
    COMMENT     [reduce using rule 95 (simple_stmt)]
    $default    reduce using rule 92 (statement)

    var_declarations            go to state 61
    type_declarations           go to state 62
    expression_list             go to state 63
    expression                  go to state 64
    primary_expression          go to state 65
    literal                     go to state 66
    binary_op                   go to state 67
    builtin                     go to state 68
    statement                   go to state 161
    declaration_stmt            go to state 70
    simple_stmt                 go to state 71
    inc_dec_stmt                go to state 72
    assignment                  go to state 73
    short_variable_declaration  go to state 74
    return_stmt                 go to state 75
    break_stmt                  go to state 76
    continue_stmt               go to state 77
    block_stmt                  go to state 78
    if_stmt                     go to state 79
    switch_stmt                 go to state 80
    expression_switch_stmt      go to state 81
    for_stmt                    go to state 82
    print_stmt                  go to state 83
    println_stmt                go to state 84


State 80

   87 statement: switch_stmt • statement

    IF          shift, and go to state 41
    FOR         shift, and go to state 42
    SWITCH      shift, and go to state 43
    BREAK       shift, and go to state 44
    CONTINUE    shift, and go to state 45
    RETURN      shift, and go to state 46
    VAR         shift, and go to state 47
    APPEND      shift, and go to state 48
    LEN         shift, and go to state 49
    PRINT       shift, and go to state 50
    PRINTLN     shift, and go to state 51
    TYPE        shift, and go to state 52
    LPAREN      shift, and go to state 53
    LBRACE      shift, and go to state 31
    BOOLEAN     shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57
    STRING      shift, and go to state 58
    FLOAT       shift, and go to state 59
    COMMENT     shift, and go to state 60

    IF          [reduce using rule 95 (simple_stmt)]
    FOR         [reduce using rule 95 (simple_stmt)]
    SWITCH      [reduce using rule 95 (simple_stmt)]
    CASE        reduce using rule 92 (statement)
    CASE        [reduce using rule 95 (simple_stmt)]
    DEFAULT     reduce using rule 92 (statement)
    DEFAULT     [reduce using rule 95 (simple_stmt)]
    BREAK       [reduce using rule 95 (simple_stmt)]
    CONTINUE    [reduce using rule 95 (simple_stmt)]
    RETURN      [reduce using rule 95 (simple_stmt)]
    VAR         [reduce using rule 95 (simple_stmt)]
    APPEND      [reduce using rule 95 (simple_stmt)]
    LEN         [reduce using rule 95 (simple_stmt)]
    PRINT       [reduce using rule 95 (simple_stmt)]
    PRINTLN     [reduce using rule 95 (simple_stmt)]
    TYPE        [reduce using rule 95 (simple_stmt)]
    LPAREN      [reduce using rule 95 (simple_stmt)]
    LBRACE      [reduce using rule 95 (simple_stmt)]
    RBRACE      reduce using rule 92 (statement)
    RBRACE      [reduce using rule 95 (simple_stmt)]
    BOOLEAN     [reduce using rule 95 (simple_stmt)]
    IDENTIFIER  [reduce using rule 95 (simple_stmt)]
    INTEGER     [reduce using rule 95 (simple_stmt)]
    STRING      [reduce using rule 95 (simple_stmt)]
    FLOAT       [reduce using rule 95 (simple_stmt)]
    COMMENT     [reduce using rule 95 (simple_stmt)]
    $default    reduce using rule 92 (statement)

    var_declarations            go to state 61
    type_declarations           go to state 62
    expression_list             go to state 63
    expression                  go to state 64
    primary_expression          go to state 65
    literal                     go to state 66
    binary_op                   go to state 67
    builtin                     go to state 68
    statement                   go to state 162
    declaration_stmt            go to state 70
    simple_stmt                 go to state 71
    inc_dec_stmt                go to state 72
    assignment                  go to state 73
    short_variable_declaration  go to state 74
    return_stmt                 go to state 75
    break_stmt                  go to state 76
    continue_stmt               go to state 77
    block_stmt                  go to state 78
    if_stmt                     go to state 79
    switch_stmt                 go to state 80
    expression_switch_stmt      go to state 81
    for_stmt                    go to state 82
    print_stmt                  go to state 83
    println_stmt                go to state 84


State 81

  129 switch_stmt: expression_switch_stmt •

    $default  reduce using rule 129 (switch_stmt)


State 82

   88 statement: for_stmt • statement

    IF          shift, and go to state 41
    FOR         shift, and go to state 42
    SWITCH      shift, and go to state 43
    BREAK       shift, and go to state 44
    CONTINUE    shift, and go to state 45
    RETURN      shift, and go to state 46
    VAR         shift, and go to state 47
    APPEND      shift, and go to state 48
    LEN         shift, and go to state 49
    PRINT       shift, and go to state 50
    PRINTLN     shift, and go to state 51
    TYPE        shift, and go to state 52
    LPAREN      shift, and go to state 53
    LBRACE      shift, and go to state 31
    BOOLEAN     shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57
    STRING      shift, and go to state 58
    FLOAT       shift, and go to state 59
    COMMENT     shift, and go to state 60

    IF          [reduce using rule 95 (simple_stmt)]
    FOR         [reduce using rule 95 (simple_stmt)]
    SWITCH      [reduce using rule 95 (simple_stmt)]
    CASE        reduce using rule 92 (statement)
    CASE        [reduce using rule 95 (simple_stmt)]
    DEFAULT     reduce using rule 92 (statement)
    DEFAULT     [reduce using rule 95 (simple_stmt)]
    BREAK       [reduce using rule 95 (simple_stmt)]
    CONTINUE    [reduce using rule 95 (simple_stmt)]
    RETURN      [reduce using rule 95 (simple_stmt)]
    VAR         [reduce using rule 95 (simple_stmt)]
    APPEND      [reduce using rule 95 (simple_stmt)]
    LEN         [reduce using rule 95 (simple_stmt)]
    PRINT       [reduce using rule 95 (simple_stmt)]
    PRINTLN     [reduce using rule 95 (simple_stmt)]
    TYPE        [reduce using rule 95 (simple_stmt)]
    LPAREN      [reduce using rule 95 (simple_stmt)]
    LBRACE      [reduce using rule 95 (simple_stmt)]
    RBRACE      reduce using rule 92 (statement)
    RBRACE      [reduce using rule 95 (simple_stmt)]
    BOOLEAN     [reduce using rule 95 (simple_stmt)]
    IDENTIFIER  [reduce using rule 95 (simple_stmt)]
    INTEGER     [reduce using rule 95 (simple_stmt)]
    STRING      [reduce using rule 95 (simple_stmt)]
    FLOAT       [reduce using rule 95 (simple_stmt)]
    COMMENT     [reduce using rule 95 (simple_stmt)]
    $default    reduce using rule 92 (statement)

    var_declarations            go to state 61
    type_declarations           go to state 62
    expression_list             go to state 63
    expression                  go to state 64
    primary_expression          go to state 65
    literal                     go to state 66
    binary_op                   go to state 67
    builtin                     go to state 68
    statement                   go to state 163
    declaration_stmt            go to state 70
    simple_stmt                 go to state 71
    inc_dec_stmt                go to state 72
    assignment                  go to state 73
    short_variable_declaration  go to state 74
    return_stmt                 go to state 75
    break_stmt                  go to state 76
    continue_stmt               go to state 77
    block_stmt                  go to state 78
    if_stmt                     go to state 79
    switch_stmt                 go to state 80
    expression_switch_stmt      go to state 81
    for_stmt                    go to state 82
    print_stmt                  go to state 83
    println_stmt                go to state 84


State 83

   89 statement: print_stmt • statement

    IF          shift, and go to state 41
    FOR         shift, and go to state 42
    SWITCH      shift, and go to state 43
    BREAK       shift, and go to state 44
    CONTINUE    shift, and go to state 45
    RETURN      shift, and go to state 46
    VAR         shift, and go to state 47
    APPEND      shift, and go to state 48
    LEN         shift, and go to state 49
    PRINT       shift, and go to state 50
    PRINTLN     shift, and go to state 51
    TYPE        shift, and go to state 52
    LPAREN      shift, and go to state 53
    LBRACE      shift, and go to state 31
    BOOLEAN     shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57
    STRING      shift, and go to state 58
    FLOAT       shift, and go to state 59
    COMMENT     shift, and go to state 60

    IF          [reduce using rule 95 (simple_stmt)]
    FOR         [reduce using rule 95 (simple_stmt)]
    SWITCH      [reduce using rule 95 (simple_stmt)]
    CASE        reduce using rule 92 (statement)
    CASE        [reduce using rule 95 (simple_stmt)]
    DEFAULT     reduce using rule 92 (statement)
    DEFAULT     [reduce using rule 95 (simple_stmt)]
    BREAK       [reduce using rule 95 (simple_stmt)]
    CONTINUE    [reduce using rule 95 (simple_stmt)]
    RETURN      [reduce using rule 95 (simple_stmt)]
    VAR         [reduce using rule 95 (simple_stmt)]
    APPEND      [reduce using rule 95 (simple_stmt)]
    LEN         [reduce using rule 95 (simple_stmt)]
    PRINT       [reduce using rule 95 (simple_stmt)]
    PRINTLN     [reduce using rule 95 (simple_stmt)]
    TYPE        [reduce using rule 95 (simple_stmt)]
    LPAREN      [reduce using rule 95 (simple_stmt)]
    LBRACE      [reduce using rule 95 (simple_stmt)]
    RBRACE      reduce using rule 92 (statement)
    RBRACE      [reduce using rule 95 (simple_stmt)]
    BOOLEAN     [reduce using rule 95 (simple_stmt)]
    IDENTIFIER  [reduce using rule 95 (simple_stmt)]
    INTEGER     [reduce using rule 95 (simple_stmt)]
    STRING      [reduce using rule 95 (simple_stmt)]
    FLOAT       [reduce using rule 95 (simple_stmt)]
    COMMENT     [reduce using rule 95 (simple_stmt)]
    $default    reduce using rule 92 (statement)

    var_declarations            go to state 61
    type_declarations           go to state 62
    expression_list             go to state 63
    expression                  go to state 64
    primary_expression          go to state 65
    literal                     go to state 66
    binary_op                   go to state 67
    builtin                     go to state 68
    statement                   go to state 164
    declaration_stmt            go to state 70
    simple_stmt                 go to state 71
    inc_dec_stmt                go to state 72
    assignment                  go to state 73
    short_variable_declaration  go to state 74
    return_stmt                 go to state 75
    break_stmt                  go to state 76
    continue_stmt               go to state 77
    block_stmt                  go to state 78
    if_stmt                     go to state 79
    switch_stmt                 go to state 80
    expression_switch_stmt      go to state 81
    for_stmt                    go to state 82
    print_stmt                  go to state 83
    println_stmt                go to state 84


State 84

   90 statement: println_stmt • statement

    IF          shift, and go to state 41
    FOR         shift, and go to state 42
    SWITCH      shift, and go to state 43
    BREAK       shift, and go to state 44
    CONTINUE    shift, and go to state 45
    RETURN      shift, and go to state 46
    VAR         shift, and go to state 47
    APPEND      shift, and go to state 48
    LEN         shift, and go to state 49
    PRINT       shift, and go to state 50
    PRINTLN     shift, and go to state 51
    TYPE        shift, and go to state 52
    LPAREN      shift, and go to state 53
    LBRACE      shift, and go to state 31
    BOOLEAN     shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57
    STRING      shift, and go to state 58
    FLOAT       shift, and go to state 59
    COMMENT     shift, and go to state 60

    IF          [reduce using rule 95 (simple_stmt)]
    FOR         [reduce using rule 95 (simple_stmt)]
    SWITCH      [reduce using rule 95 (simple_stmt)]
    CASE        reduce using rule 92 (statement)
    CASE        [reduce using rule 95 (simple_stmt)]
    DEFAULT     reduce using rule 92 (statement)
    DEFAULT     [reduce using rule 95 (simple_stmt)]
    BREAK       [reduce using rule 95 (simple_stmt)]
    CONTINUE    [reduce using rule 95 (simple_stmt)]
    RETURN      [reduce using rule 95 (simple_stmt)]
    VAR         [reduce using rule 95 (simple_stmt)]
    APPEND      [reduce using rule 95 (simple_stmt)]
    LEN         [reduce using rule 95 (simple_stmt)]
    PRINT       [reduce using rule 95 (simple_stmt)]
    PRINTLN     [reduce using rule 95 (simple_stmt)]
    TYPE        [reduce using rule 95 (simple_stmt)]
    LPAREN      [reduce using rule 95 (simple_stmt)]
    LBRACE      [reduce using rule 95 (simple_stmt)]
    RBRACE      reduce using rule 92 (statement)
    RBRACE      [reduce using rule 95 (simple_stmt)]
    BOOLEAN     [reduce using rule 95 (simple_stmt)]
    IDENTIFIER  [reduce using rule 95 (simple_stmt)]
    INTEGER     [reduce using rule 95 (simple_stmt)]
    STRING      [reduce using rule 95 (simple_stmt)]
    FLOAT       [reduce using rule 95 (simple_stmt)]
    COMMENT     [reduce using rule 95 (simple_stmt)]
    $default    reduce using rule 92 (statement)

    var_declarations            go to state 61
    type_declarations           go to state 62
    expression_list             go to state 63
    expression                  go to state 64
    primary_expression          go to state 65
    literal                     go to state 66
    binary_op                   go to state 67
    builtin                     go to state 68
    statement                   go to state 165
    declaration_stmt            go to state 70
    simple_stmt                 go to state 71
    inc_dec_stmt                go to state 72
    assignment                  go to state 73
    short_variable_declaration  go to state 74
    return_stmt                 go to state 75
    break_stmt                  go to state 76
    continue_stmt               go to state 77
    block_stmt                  go to state 78
    if_stmt                     go to state 79
    switch_stmt                 go to state 80
    expression_switch_stmt      go to state 81
    for_stmt                    go to state 82
    print_stmt                  go to state 83
    println_stmt                go to state 84


State 85

   24 identifier_list: IDENTIFIER COMMA identifier_list •

    $default  reduce using rule 24 (identifier_list)


State 86

   37 parameter_unit: identifier_list LPAREN IDENTIFIER • RPAREN

    RPAREN  shift, and go to state 166


State 87

   39 bracket: '[' INTEGER • ']'

    ']'  shift, and go to state 167


State 88

   40 bracket: '[' ']' •

    $default  reduce using rule 40 (bracket)


State 89

   42 bracket_list: bracket bracket_list •

    $default  reduce using rule 42 (bracket_list)


State 90

   38 parameter_unit: identifier_list bracket_list IDENTIFIER •

    $default  reduce using rule 38 (parameter_unit)


State 91

   35 parameters: parameter_unit COMMA parameters •

    $default  reduce using rule 35 (parameters)


State 92

   43 expression_list: expression •
   44                | expression • COMMA expression_list
   59 binary_op: expression • LOGICAL_OR expression
   60          | expression • LOGICAL_AND expression
   61          | expression • EQUAL_EQUAL expression
   62          | expression • NOT_EQUAL expression
   63          | expression • LESS_THAN_OR_EQUAL expression
   64          | expression • GREATER_THAN_OR_EQUAL expression
   65          | expression • LESS_THAN expression
   66          | expression • GREATER_THAN expression
   67          | expression • PLUS expression
   68          | expression • MINUS expression
   69          | expression • BITWISE_OR expression
   70          | expression • BITWISE_XOR expression
   71          | expression • TIMES expression
   72          | expression • DIVIDE expression
   73          | expression • MODULO expression
   74          | expression • RIGHT_SHIFT expression
   75          | expression • LEFT_SHIFT expression
   76          | expression • BITWISE_AND expression
   77          | expression • BIT_CLEAR expression
   99 inc_dec_stmt: expression • INCREMENT
  100             | expression • DECREMENT
  102 assignment: expression • assign_op expression
  123 if_stmt: IF expression • block_stmt
  127        | IF expression • block_stmt ELSE if_stmt
  128        | IF expression • block_stmt ELSE block_stmt

    PLUS                   shift, and go to state 115
    MINUS                  shift, and go to state 116
    TIMES                  shift, and go to state 117
    DIVIDE                 shift, and go to state 118
    MODULO                 shift, and go to state 119
    BITWISE_AND            shift, and go to state 120
    BITWISE_OR             shift, and go to state 121
    BITWISE_XOR            shift, and go to state 122
    BIT_CLEAR              shift, and go to state 123
    LEFT_SHIFT             shift, and go to state 124
    RIGHT_SHIFT            shift, and go to state 125
    ADD_ASSIGN             shift, and go to state 126
    SUB_ASSIGN             shift, and go to state 127
    MUL_ASSIGN             shift, and go to state 128
    DIV_ASSIGN             shift, and go to state 129
    MOD_ASSIGN             shift, and go to state 130
    AND_ASSIGN             shift, and go to state 131
    OR_ASSIGN              shift, and go to state 132
    XOR_ASSIGN             shift, and go to state 133
    LEFT_SHIFT_ASSIGN      shift, and go to state 134
    RIGHT_SHIFT_ASSIGN     shift, and go to state 135
    INCREMENT              shift, and go to state 136
    DECREMENT              shift, and go to state 137
    CLEAR_ASSIGN           shift, and go to state 138
    EQUAL_EQUAL            shift, and go to state 139
    NOT_EQUAL              shift, and go to state 140
    LESS_THAN              shift, and go to state 141
    LESS_THAN_OR_EQUAL     shift, and go to state 142
    GREATER_THAN           shift, and go to state 143
    GREATER_THAN_OR_EQUAL  shift, and go to state 144
    LOGICAL_AND            shift, and go to state 145
    LOGICAL_OR             shift, and go to state 146
    LBRACE                 shift, and go to state 31
    COMMA                  shift, and go to state 147

    $default  reduce using rule 43 (expression_list)

    assign_op   go to state 148
    add_op_eq   go to state 149
    mul_op_eq   go to state 150
    block_stmt  go to state 168


State 93

  124 if_stmt: IF simple_stmt • expression block_stmt
  125        | IF simple_stmt • expression block_stmt ELSE if_stmt
  126        | IF simple_stmt • expression block_stmt ELSE block_stmt

    APPEND      shift, and go to state 48
    LEN         shift, and go to state 49
    LPAREN      shift, and go to state 53
    BOOLEAN     shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57
    STRING      shift, and go to state 58
    FLOAT       shift, and go to state 59

    expression          go to state 169
    primary_expression  go to state 65
    literal             go to state 66
    binary_op           go to state 67
    builtin             go to state 68


State 94

   43 expression_list: expression •
   44                | expression • COMMA expression_list
   59 binary_op: expression • LOGICAL_OR expression
   60          | expression • LOGICAL_AND expression
   61          | expression • EQUAL_EQUAL expression
   62          | expression • NOT_EQUAL expression
   63          | expression • LESS_THAN_OR_EQUAL expression
   64          | expression • GREATER_THAN_OR_EQUAL expression
   65          | expression • LESS_THAN expression
   66          | expression • GREATER_THAN expression
   67          | expression • PLUS expression
   68          | expression • MINUS expression
   69          | expression • BITWISE_OR expression
   70          | expression • BITWISE_XOR expression
   71          | expression • TIMES expression
   72          | expression • DIVIDE expression
   73          | expression • MODULO expression
   74          | expression • RIGHT_SHIFT expression
   75          | expression • LEFT_SHIFT expression
   76          | expression • BITWISE_AND expression
   77          | expression • BIT_CLEAR expression
   99 inc_dec_stmt: expression • INCREMENT
  100             | expression • DECREMENT
  102 assignment: expression • assign_op expression
  143 for_stmt: FOR expression • block_stmt

    PLUS                   shift, and go to state 115
    MINUS                  shift, and go to state 116
    TIMES                  shift, and go to state 117
    DIVIDE                 shift, and go to state 118
    MODULO                 shift, and go to state 119
    BITWISE_AND            shift, and go to state 120
    BITWISE_OR             shift, and go to state 121
    BITWISE_XOR            shift, and go to state 122
    BIT_CLEAR              shift, and go to state 123
    LEFT_SHIFT             shift, and go to state 124
    RIGHT_SHIFT            shift, and go to state 125
    ADD_ASSIGN             shift, and go to state 126
    SUB_ASSIGN             shift, and go to state 127
    MUL_ASSIGN             shift, and go to state 128
    DIV_ASSIGN             shift, and go to state 129
    MOD_ASSIGN             shift, and go to state 130
    AND_ASSIGN             shift, and go to state 131
    OR_ASSIGN              shift, and go to state 132
    XOR_ASSIGN             shift, and go to state 133
    LEFT_SHIFT_ASSIGN      shift, and go to state 134
    RIGHT_SHIFT_ASSIGN     shift, and go to state 135
    INCREMENT              shift, and go to state 136
    DECREMENT              shift, and go to state 137
    CLEAR_ASSIGN           shift, and go to state 138
    EQUAL_EQUAL            shift, and go to state 139
    NOT_EQUAL              shift, and go to state 140
    LESS_THAN              shift, and go to state 141
    LESS_THAN_OR_EQUAL     shift, and go to state 142
    GREATER_THAN           shift, and go to state 143
    GREATER_THAN_OR_EQUAL  shift, and go to state 144
    LOGICAL_AND            shift, and go to state 145
    LOGICAL_OR             shift, and go to state 146
    LBRACE                 shift, and go to state 31
    COMMA                  shift, and go to state 147

    $default  reduce using rule 43 (expression_list)

    assign_op   go to state 148
    add_op_eq   go to state 149
    mul_op_eq   go to state 150
    block_stmt  go to state 170


State 95

  145 for_clause: simple_stmt • SEMICOLON simple_stmt
  146           | simple_stmt • SEMICOLON expression SEMICOLON simple_stmt

    SEMICOLON  shift, and go to state 171


State 96

  142 for_stmt: FOR block_stmt •

    $default  reduce using rule 142 (for_stmt)


State 97

  144 for_stmt: FOR for_clause • block_stmt

    LBRACE  shift, and go to state 31

    block_stmt  go to state 172


State 98

   43 expression_list: expression •
   44                | expression • COMMA expression_list
   59 binary_op: expression • LOGICAL_OR expression
   60          | expression • LOGICAL_AND expression
   61          | expression • EQUAL_EQUAL expression
   62          | expression • NOT_EQUAL expression
   63          | expression • LESS_THAN_OR_EQUAL expression
   64          | expression • GREATER_THAN_OR_EQUAL expression
   65          | expression • LESS_THAN expression
   66          | expression • GREATER_THAN expression
   67          | expression • PLUS expression
   68          | expression • MINUS expression
   69          | expression • BITWISE_OR expression
   70          | expression • BITWISE_XOR expression
   71          | expression • TIMES expression
   72          | expression • DIVIDE expression
   73          | expression • MODULO expression
   74          | expression • RIGHT_SHIFT expression
   75          | expression • LEFT_SHIFT expression
   76          | expression • BITWISE_AND expression
   77          | expression • BIT_CLEAR expression
   99 inc_dec_stmt: expression • INCREMENT
  100             | expression • DECREMENT
  102 assignment: expression • assign_op expression
  134 switch_on: expression •

    PLUS                   shift, and go to state 115
    MINUS                  shift, and go to state 116
    TIMES                  shift, and go to state 117
    DIVIDE                 shift, and go to state 118
    MODULO                 shift, and go to state 119
    BITWISE_AND            shift, and go to state 120
    BITWISE_OR             shift, and go to state 121
    BITWISE_XOR            shift, and go to state 122
    BIT_CLEAR              shift, and go to state 123
    LEFT_SHIFT             shift, and go to state 124
    RIGHT_SHIFT            shift, and go to state 125
    ADD_ASSIGN             shift, and go to state 126
    SUB_ASSIGN             shift, and go to state 127
    MUL_ASSIGN             shift, and go to state 128
    DIV_ASSIGN             shift, and go to state 129
    MOD_ASSIGN             shift, and go to state 130
    AND_ASSIGN             shift, and go to state 131
    OR_ASSIGN              shift, and go to state 132
    XOR_ASSIGN             shift, and go to state 133
    LEFT_SHIFT_ASSIGN      shift, and go to state 134
    RIGHT_SHIFT_ASSIGN     shift, and go to state 135
    INCREMENT              shift, and go to state 136
    DECREMENT              shift, and go to state 137
    CLEAR_ASSIGN           shift, and go to state 138
    EQUAL_EQUAL            shift, and go to state 139
    NOT_EQUAL              shift, and go to state 140
    LESS_THAN              shift, and go to state 141
    LESS_THAN_OR_EQUAL     shift, and go to state 142
    GREATER_THAN           shift, and go to state 143
    GREATER_THAN_OR_EQUAL  shift, and go to state 144
    LOGICAL_AND            shift, and go to state 145
    LOGICAL_OR             shift, and go to state 146
    COMMA                  shift, and go to state 147

    LBRACE    reduce using rule 134 (switch_on)
    $default  reduce using rule 43 (expression_list)

    assign_op  go to state 148
    add_op_eq  go to state 149
    mul_op_eq  go to state 150


State 99

  132 switch_on: simple_stmt • expression
  133          | simple_stmt •

    APPEND      shift, and go to state 48
    LEN         shift, and go to state 49
    LPAREN      shift, and go to state 53
    BOOLEAN     shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57
    STRING      shift, and go to state 58
    FLOAT       shift, and go to state 59

    $default  reduce using rule 133 (switch_on)

    expression          go to state 173
    primary_expression  go to state 65
    literal             go to state 66
    binary_op           go to state 67
    builtin             go to state 68


State 100

  130 expression_switch_stmt: SWITCH switch_on • LBRACE expression_case_clause_list RBRACE

    LBRACE  shift, and go to state 174


State 101

   59 binary_op: expression • LOGICAL_OR expression
   60          | expression • LOGICAL_AND expression
   61          | expression • EQUAL_EQUAL expression
   62          | expression • NOT_EQUAL expression
   63          | expression • LESS_THAN_OR_EQUAL expression
   64          | expression • GREATER_THAN_OR_EQUAL expression
   65          | expression • LESS_THAN expression
   66          | expression • GREATER_THAN expression
   67          | expression • PLUS expression
   68          | expression • MINUS expression
   69          | expression • BITWISE_OR expression
   70          | expression • BITWISE_XOR expression
   71          | expression • TIMES expression
   72          | expression • DIVIDE expression
   73          | expression • MODULO expression
   74          | expression • RIGHT_SHIFT expression
   75          | expression • LEFT_SHIFT expression
   76          | expression • BITWISE_AND expression
   77          | expression • BIT_CLEAR expression
  118 return_stmt: RETURN expression •

    PLUS                   shift, and go to state 115
    MINUS                  shift, and go to state 116
    TIMES                  shift, and go to state 117
    DIVIDE                 shift, and go to state 118
    MODULO                 shift, and go to state 119
    BITWISE_AND            shift, and go to state 120
    BITWISE_OR             shift, and go to state 121
    BITWISE_XOR            shift, and go to state 122
    BIT_CLEAR              shift, and go to state 123
    LEFT_SHIFT             shift, and go to state 124
    RIGHT_SHIFT            shift, and go to state 125
    EQUAL_EQUAL            shift, and go to state 139
    NOT_EQUAL              shift, and go to state 140
    LESS_THAN              shift, and go to state 141
    LESS_THAN_OR_EQUAL     shift, and go to state 142
    GREATER_THAN           shift, and go to state 143
    GREATER_THAN_OR_EQUAL  shift, and go to state 144
    LOGICAL_AND            shift, and go to state 145
    LOGICAL_OR             shift, and go to state 146

    $default  reduce using rule 118 (return_stmt)


State 102

   19 declaration: IDENTIFIER • INT_TYPE ASSIGN expression_list
   20            | IDENTIFIER • INT_TYPE
   21            | IDENTIFIER • STRING_TYPE ASSIGN expression_list
   22            | IDENTIFIER • STRING_TYPE
   23 identifier_list: IDENTIFIER •
   24                | IDENTIFIER • COMMA identifier_list

    INT_TYPE     shift, and go to state 175
    STRING_TYPE  shift, and go to state 176
    COMMA        shift, and go to state 33

    $default  reduce using rule 23 (identifier_list)


State 103

   14 var_declarations: VAR declaration •

    $default  reduce using rule 14 (var_declarations)


State 104

   17 declaration: identifier_list •
   18            | identifier_list • ASSIGN expression_list

    ASSIGN  shift, and go to state 177

    $default  reduce using rule 17 (declaration)


State 105

   78 builtin: APPEND LPAREN • expression COMMA expression RPAREN

    APPEND      shift, and go to state 48
    LEN         shift, and go to state 49
    LPAREN      shift, and go to state 53
    BOOLEAN     shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57
    STRING      shift, and go to state 58
    FLOAT       shift, and go to state 59

    expression          go to state 178
    primary_expression  go to state 65
    literal             go to state 66
    binary_op           go to state 67
    builtin             go to state 68


State 106

   79 builtin: LEN LPAREN • expression RPAREN

    APPEND      shift, and go to state 48
    LEN         shift, and go to state 49
    LPAREN      shift, and go to state 53
    BOOLEAN     shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57
    STRING      shift, and go to state 58
    FLOAT       shift, and go to state 59

    expression          go to state 179
    primary_expression  go to state 65
    literal             go to state 66
    binary_op           go to state 67
    builtin             go to state 68


State 107

  147 print_stmt: PRINT LPAREN • expression_list RPAREN
  148           | PRINT LPAREN • RPAREN

    APPEND      shift, and go to state 48
    LEN         shift, and go to state 49
    LPAREN      shift, and go to state 53
    RPAREN      shift, and go to state 180
    BOOLEAN     shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57
    STRING      shift, and go to state 58
    FLOAT       shift, and go to state 59

    expression_list     go to state 181
    expression          go to state 182
    primary_expression  go to state 65
    literal             go to state 66
    binary_op           go to state 67
    builtin             go to state 68


State 108

  149 println_stmt: PRINTLN LPAREN • expression_list RPAREN
  150             | PRINTLN LPAREN • RPAREN

    APPEND      shift, and go to state 48
    LEN         shift, and go to state 49
    LPAREN      shift, and go to state 53
    RPAREN      shift, and go to state 183
    BOOLEAN     shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57
    STRING      shift, and go to state 58
    FLOAT       shift, and go to state 59

    expression_list     go to state 184
    expression          go to state 182
    primary_expression  go to state 65
    literal             go to state 66
    binary_op           go to state 67
    builtin             go to state 68


State 109

   26 type_declaration: IDENTIFIER • IDENTIFIER
   27                 | IDENTIFIER • LPAREN IDENTIFIER RPAREN
   28                 | IDENTIFIER • STRUCT LBRACE declaration_list RBRACE
   29                 | IDENTIFIER • bracket_list IDENTIFIER
   30                 | IDENTIFIER • bracket_list STRUCT LBRACE declaration_list RBRACE

    STRUCT      shift, and go to state 185
    LPAREN      shift, and go to state 186
    IDENTIFIER  shift, and go to state 187
    '['         shift, and go to state 36

    bracket       go to state 37
    bracket_list  go to state 188


State 110

   25 type_declarations: TYPE type_declaration •

    $default  reduce using rule 25 (type_declarations)


State 111

   50 primary_expression: LPAREN expression • RPAREN
   59 binary_op: expression • LOGICAL_OR expression
   60          | expression • LOGICAL_AND expression
   61          | expression • EQUAL_EQUAL expression
   62          | expression • NOT_EQUAL expression
   63          | expression • LESS_THAN_OR_EQUAL expression
   64          | expression • GREATER_THAN_OR_EQUAL expression
   65          | expression • LESS_THAN expression
   66          | expression • GREATER_THAN expression
   67          | expression • PLUS expression
   68          | expression • MINUS expression
   69          | expression • BITWISE_OR expression
   70          | expression • BITWISE_XOR expression
   71          | expression • TIMES expression
   72          | expression • DIVIDE expression
   73          | expression • MODULO expression
   74          | expression • RIGHT_SHIFT expression
   75          | expression • LEFT_SHIFT expression
   76          | expression • BITWISE_AND expression
   77          | expression • BIT_CLEAR expression

    PLUS                   shift, and go to state 115
    MINUS                  shift, and go to state 116
    TIMES                  shift, and go to state 117
    DIVIDE                 shift, and go to state 118
    MODULO                 shift, and go to state 119
    BITWISE_AND            shift, and go to state 120
    BITWISE_OR             shift, and go to state 121
    BITWISE_XOR            shift, and go to state 122
    BIT_CLEAR              shift, and go to state 123
    LEFT_SHIFT             shift, and go to state 124
    RIGHT_SHIFT            shift, and go to state 125
    EQUAL_EQUAL            shift, and go to state 139
    NOT_EQUAL              shift, and go to state 140
    LESS_THAN              shift, and go to state 141
    LESS_THAN_OR_EQUAL     shift, and go to state 142
    GREATER_THAN           shift, and go to state 143
    GREATER_THAN_OR_EQUAL  shift, and go to state 144
    LOGICAL_AND            shift, and go to state 145
    LOGICAL_OR             shift, and go to state 146
    RPAREN                 shift, and go to state 189


State 112

   91 statement: COMMENT statement •

    $default  reduce using rule 91 (statement)


State 113

  101 assignment: expression_list ASSIGN • expression_list

    APPEND      shift, and go to state 48
    LEN         shift, and go to state 49
    LPAREN      shift, and go to state 53
    BOOLEAN     shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57
    STRING      shift, and go to state 58
    FLOAT       shift, and go to state 59

    expression_list     go to state 190
    expression          go to state 182
    primary_expression  go to state 65
    literal             go to state 66
    binary_op           go to state 67
    builtin             go to state 68


State 114

  116 short_variable_declaration: expression_list SHORT_VAR • expression_list

    APPEND      shift, and go to state 48
    LEN         shift, and go to state 49
    LPAREN      shift, and go to state 53
    BOOLEAN     shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57
    STRING      shift, and go to state 58
    FLOAT       shift, and go to state 59

    expression_list     go to state 191
    expression          go to state 182
    primary_expression  go to state 65
    literal             go to state 66
    binary_op           go to state 67
    builtin             go to state 68


State 115

   67 binary_op: expression PLUS • expression

    APPEND      shift, and go to state 48
    LEN         shift, and go to state 49
    LPAREN      shift, and go to state 53
    BOOLEAN     shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57
    STRING      shift, and go to state 58
    FLOAT       shift, and go to state 59

    expression          go to state 192
    primary_expression  go to state 65
    literal             go to state 66
    binary_op           go to state 67
    builtin             go to state 68


State 116

   68 binary_op: expression MINUS • expression

    APPEND      shift, and go to state 48
    LEN         shift, and go to state 49
    LPAREN      shift, and go to state 53
    BOOLEAN     shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57
    STRING      shift, and go to state 58
    FLOAT       shift, and go to state 59

    expression          go to state 193
    primary_expression  go to state 65
    literal             go to state 66
    binary_op           go to state 67
    builtin             go to state 68


State 117

   71 binary_op: expression TIMES • expression

    APPEND      shift, and go to state 48
    LEN         shift, and go to state 49
    LPAREN      shift, and go to state 53
    BOOLEAN     shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57
    STRING      shift, and go to state 58
    FLOAT       shift, and go to state 59

    expression          go to state 194
    primary_expression  go to state 65
    literal             go to state 66
    binary_op           go to state 67
    builtin             go to state 68


State 118

   72 binary_op: expression DIVIDE • expression

    APPEND      shift, and go to state 48
    LEN         shift, and go to state 49
    LPAREN      shift, and go to state 53
    BOOLEAN     shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57
    STRING      shift, and go to state 58
    FLOAT       shift, and go to state 59

    expression          go to state 195
    primary_expression  go to state 65
    literal             go to state 66
    binary_op           go to state 67
    builtin             go to state 68


State 119

   73 binary_op: expression MODULO • expression

    APPEND      shift, and go to state 48
    LEN         shift, and go to state 49
    LPAREN      shift, and go to state 53
    BOOLEAN     shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57
    STRING      shift, and go to state 58
    FLOAT       shift, and go to state 59

    expression          go to state 196
    primary_expression  go to state 65
    literal             go to state 66
    binary_op           go to state 67
    builtin             go to state 68


State 120

   76 binary_op: expression BITWISE_AND • expression

    APPEND      shift, and go to state 48
    LEN         shift, and go to state 49
    LPAREN      shift, and go to state 53
    BOOLEAN     shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57
    STRING      shift, and go to state 58
    FLOAT       shift, and go to state 59

    expression          go to state 197
    primary_expression  go to state 65
    literal             go to state 66
    binary_op           go to state 67
    builtin             go to state 68


State 121

   69 binary_op: expression BITWISE_OR • expression

    APPEND      shift, and go to state 48
    LEN         shift, and go to state 49
    LPAREN      shift, and go to state 53
    BOOLEAN     shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57
    STRING      shift, and go to state 58
    FLOAT       shift, and go to state 59

    expression          go to state 198
    primary_expression  go to state 65
    literal             go to state 66
    binary_op           go to state 67
    builtin             go to state 68


State 122

   70 binary_op: expression BITWISE_XOR • expression

    APPEND      shift, and go to state 48
    LEN         shift, and go to state 49
    LPAREN      shift, and go to state 53
    BOOLEAN     shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57
    STRING      shift, and go to state 58
    FLOAT       shift, and go to state 59

    expression          go to state 199
    primary_expression  go to state 65
    literal             go to state 66
    binary_op           go to state 67
    builtin             go to state 68


State 123

   77 binary_op: expression BIT_CLEAR • expression

    APPEND      shift, and go to state 48
    LEN         shift, and go to state 49
    LPAREN      shift, and go to state 53
    BOOLEAN     shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57
    STRING      shift, and go to state 58
    FLOAT       shift, and go to state 59

    expression          go to state 200
    primary_expression  go to state 65
    literal             go to state 66
    binary_op           go to state 67
    builtin             go to state 68


State 124

   75 binary_op: expression LEFT_SHIFT • expression

    APPEND      shift, and go to state 48
    LEN         shift, and go to state 49
    LPAREN      shift, and go to state 53
    BOOLEAN     shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57
    STRING      shift, and go to state 58
    FLOAT       shift, and go to state 59

    expression          go to state 201
    primary_expression  go to state 65
    literal             go to state 66
    binary_op           go to state 67
    builtin             go to state 68


State 125

   74 binary_op: expression RIGHT_SHIFT • expression

    APPEND      shift, and go to state 48
    LEN         shift, and go to state 49
    LPAREN      shift, and go to state 53
    BOOLEAN     shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57
    STRING      shift, and go to state 58
    FLOAT       shift, and go to state 59

    expression          go to state 202
    primary_expression  go to state 65
    literal             go to state 66
    binary_op           go to state 67
    builtin             go to state 68


State 126

  105 add_op_eq: ADD_ASSIGN •

    $default  reduce using rule 105 (add_op_eq)


State 127

  106 add_op_eq: SUB_ASSIGN •

    $default  reduce using rule 106 (add_op_eq)


State 128

  109 mul_op_eq: MUL_ASSIGN •

    $default  reduce using rule 109 (mul_op_eq)


State 129

  110 mul_op_eq: DIV_ASSIGN •

    $default  reduce using rule 110 (mul_op_eq)


State 130

  111 mul_op_eq: MOD_ASSIGN •

    $default  reduce using rule 111 (mul_op_eq)


State 131

  114 mul_op_eq: AND_ASSIGN •

    $default  reduce using rule 114 (mul_op_eq)


State 132

  107 add_op_eq: OR_ASSIGN •

    $default  reduce using rule 107 (add_op_eq)


State 133

  108 add_op_eq: XOR_ASSIGN •

    $default  reduce using rule 108 (add_op_eq)


State 134

  112 mul_op_eq: LEFT_SHIFT_ASSIGN •

    $default  reduce using rule 112 (mul_op_eq)


State 135

  113 mul_op_eq: RIGHT_SHIFT_ASSIGN •

    $default  reduce using rule 113 (mul_op_eq)


State 136

   99 inc_dec_stmt: expression INCREMENT •

    $default  reduce using rule 99 (inc_dec_stmt)


State 137

  100 inc_dec_stmt: expression DECREMENT •

    $default  reduce using rule 100 (inc_dec_stmt)


State 138

  115 mul_op_eq: CLEAR_ASSIGN •

    $default  reduce using rule 115 (mul_op_eq)


State 139

   61 binary_op: expression EQUAL_EQUAL • expression

    APPEND      shift, and go to state 48
    LEN         shift, and go to state 49
    LPAREN      shift, and go to state 53
    BOOLEAN     shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57
    STRING      shift, and go to state 58
    FLOAT       shift, and go to state 59

    expression          go to state 203
    primary_expression  go to state 65
    literal             go to state 66
    binary_op           go to state 67
    builtin             go to state 68


State 140

   62 binary_op: expression NOT_EQUAL • expression

    APPEND      shift, and go to state 48
    LEN         shift, and go to state 49
    LPAREN      shift, and go to state 53
    BOOLEAN     shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57
    STRING      shift, and go to state 58
    FLOAT       shift, and go to state 59

    expression          go to state 204
    primary_expression  go to state 65
    literal             go to state 66
    binary_op           go to state 67
    builtin             go to state 68


State 141

   65 binary_op: expression LESS_THAN • expression

    APPEND      shift, and go to state 48
    LEN         shift, and go to state 49
    LPAREN      shift, and go to state 53
    BOOLEAN     shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57
    STRING      shift, and go to state 58
    FLOAT       shift, and go to state 59

    expression          go to state 205
    primary_expression  go to state 65
    literal             go to state 66
    binary_op           go to state 67
    builtin             go to state 68


State 142

   63 binary_op: expression LESS_THAN_OR_EQUAL • expression

    APPEND      shift, and go to state 48
    LEN         shift, and go to state 49
    LPAREN      shift, and go to state 53
    BOOLEAN     shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57
    STRING      shift, and go to state 58
    FLOAT       shift, and go to state 59

    expression          go to state 206
    primary_expression  go to state 65
    literal             go to state 66
    binary_op           go to state 67
    builtin             go to state 68


State 143

   66 binary_op: expression GREATER_THAN • expression

    APPEND      shift, and go to state 48
    LEN         shift, and go to state 49
    LPAREN      shift, and go to state 53
    BOOLEAN     shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57
    STRING      shift, and go to state 58
    FLOAT       shift, and go to state 59

    expression          go to state 207
    primary_expression  go to state 65
    literal             go to state 66
    binary_op           go to state 67
    builtin             go to state 68


State 144

   64 binary_op: expression GREATER_THAN_OR_EQUAL • expression

    APPEND      shift, and go to state 48
    LEN         shift, and go to state 49
    LPAREN      shift, and go to state 53
    BOOLEAN     shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57
    STRING      shift, and go to state 58
    FLOAT       shift, and go to state 59

    expression          go to state 208
    primary_expression  go to state 65
    literal             go to state 66
    binary_op           go to state 67
    builtin             go to state 68


State 145

   60 binary_op: expression LOGICAL_AND • expression

    APPEND      shift, and go to state 48
    LEN         shift, and go to state 49
    LPAREN      shift, and go to state 53
    BOOLEAN     shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57
    STRING      shift, and go to state 58
    FLOAT       shift, and go to state 59

    expression          go to state 209
    primary_expression  go to state 65
    literal             go to state 66
    binary_op           go to state 67
    builtin             go to state 68


State 146

   59 binary_op: expression LOGICAL_OR • expression

    APPEND      shift, and go to state 48
    LEN         shift, and go to state 49
    LPAREN      shift, and go to state 53
    BOOLEAN     shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57
    STRING      shift, and go to state 58
    FLOAT       shift, and go to state 59

    expression          go to state 210
    primary_expression  go to state 65
    literal             go to state 66
    binary_op           go to state 67
    builtin             go to state 68


State 147

   44 expression_list: expression COMMA • expression_list

    APPEND      shift, and go to state 48
    LEN         shift, and go to state 49
    LPAREN      shift, and go to state 53
    BOOLEAN     shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57
    STRING      shift, and go to state 58
    FLOAT       shift, and go to state 59

    expression_list     go to state 211
    expression          go to state 182
    primary_expression  go to state 65
    literal             go to state 66
    binary_op           go to state 67
    builtin             go to state 68


State 148

  102 assignment: expression assign_op • expression

    APPEND      shift, and go to state 48
    LEN         shift, and go to state 49
    LPAREN      shift, and go to state 53
    BOOLEAN     shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57
    STRING      shift, and go to state 58
    FLOAT       shift, and go to state 59

    expression          go to state 212
    primary_expression  go to state 65
    literal             go to state 66
    binary_op           go to state 67
    builtin             go to state 68


State 149

  103 assign_op: add_op_eq •

    $default  reduce using rule 103 (assign_op)


State 150

  104 assign_op: mul_op_eq •

    $default  reduce using rule 104 (assign_op)


State 151

   51 primary_expression: primary_expression LPAREN • expression_list RPAREN
   52                   | primary_expression LPAREN • RPAREN

    APPEND      shift, and go to state 48
    LEN         shift, and go to state 49
    LPAREN      shift, and go to state 53
    RPAREN      shift, and go to state 213
    BOOLEAN     shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57
    STRING      shift, and go to state 58
    FLOAT       shift, and go to state 59

    expression_list     go to state 214
    expression          go to state 182
    primary_expression  go to state 65
    literal             go to state 66
    binary_op           go to state 67
    builtin             go to state 68


State 152

   53 primary_expression: primary_expression '.' • IDENTIFIER

    IDENTIFIER  shift, and go to state 215


State 153

   54 primary_expression: primary_expression '[' • expression ']'

    APPEND      shift, and go to state 48
    LEN         shift, and go to state 49
    LPAREN      shift, and go to state 53
    BOOLEAN     shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57
    STRING      shift, and go to state 58
    FLOAT       shift, and go to state 59

    expression          go to state 216
    primary_expression  go to state 65
    literal             go to state 66
    binary_op           go to state 67
    builtin             go to state 68


State 154

  121 block_stmt: LBRACE statement RBRACE •

    $default  reduce using rule 121 (block_stmt)


State 155

   80 statement: declaration_stmt statement •

    $default  reduce using rule 80 (statement)


State 156

   81 statement: simple_stmt statement •

    $default  reduce using rule 81 (statement)


State 157

   82 statement: return_stmt statement •

    $default  reduce using rule 82 (statement)


State 158

   83 statement: break_stmt statement •

    $default  reduce using rule 83 (statement)


State 159

   84 statement: continue_stmt statement •

    $default  reduce using rule 84 (statement)


State 160

   85 statement: block_stmt statement •

    $default  reduce using rule 85 (statement)


State 161

   86 statement: if_stmt statement •

    $default  reduce using rule 86 (statement)


State 162

   87 statement: switch_stmt statement •

    $default  reduce using rule 87 (statement)


State 163

   88 statement: for_stmt statement •

    $default  reduce using rule 88 (statement)


State 164

   89 statement: print_stmt statement •

    $default  reduce using rule 89 (statement)


State 165

   90 statement: println_stmt statement •

    $default  reduce using rule 90 (statement)


State 166

   37 parameter_unit: identifier_list LPAREN IDENTIFIER RPAREN •

    $default  reduce using rule 37 (parameter_unit)


State 167

   39 bracket: '[' INTEGER ']' •

    $default  reduce using rule 39 (bracket)


State 168

  123 if_stmt: IF expression block_stmt •
  127        | IF expression block_stmt • ELSE if_stmt
  128        | IF expression block_stmt • ELSE block_stmt

    ELSE  shift, and go to state 217

    $default  reduce using rule 123 (if_stmt)


State 169

   59 binary_op: expression • LOGICAL_OR expression
   60          | expression • LOGICAL_AND expression
   61          | expression • EQUAL_EQUAL expression
   62          | expression • NOT_EQUAL expression
   63          | expression • LESS_THAN_OR_EQUAL expression
   64          | expression • GREATER_THAN_OR_EQUAL expression
   65          | expression • LESS_THAN expression
   66          | expression • GREATER_THAN expression
   67          | expression • PLUS expression
   68          | expression • MINUS expression
   69          | expression • BITWISE_OR expression
   70          | expression • BITWISE_XOR expression
   71          | expression • TIMES expression
   72          | expression • DIVIDE expression
   73          | expression • MODULO expression
   74          | expression • RIGHT_SHIFT expression
   75          | expression • LEFT_SHIFT expression
   76          | expression • BITWISE_AND expression
   77          | expression • BIT_CLEAR expression
  124 if_stmt: IF simple_stmt expression • block_stmt
  125        | IF simple_stmt expression • block_stmt ELSE if_stmt
  126        | IF simple_stmt expression • block_stmt ELSE block_stmt

    PLUS                   shift, and go to state 115
    MINUS                  shift, and go to state 116
    TIMES                  shift, and go to state 117
    DIVIDE                 shift, and go to state 118
    MODULO                 shift, and go to state 119
    BITWISE_AND            shift, and go to state 120
    BITWISE_OR             shift, and go to state 121
    BITWISE_XOR            shift, and go to state 122
    BIT_CLEAR              shift, and go to state 123
    LEFT_SHIFT             shift, and go to state 124
    RIGHT_SHIFT            shift, and go to state 125
    EQUAL_EQUAL            shift, and go to state 139
    NOT_EQUAL              shift, and go to state 140
    LESS_THAN              shift, and go to state 141
    LESS_THAN_OR_EQUAL     shift, and go to state 142
    GREATER_THAN           shift, and go to state 143
    GREATER_THAN_OR_EQUAL  shift, and go to state 144
    LOGICAL_AND            shift, and go to state 145
    LOGICAL_OR             shift, and go to state 146
    LBRACE                 shift, and go to state 31

    block_stmt  go to state 218


State 170

  143 for_stmt: FOR expression block_stmt •

    $default  reduce using rule 143 (for_stmt)


State 171

  145 for_clause: simple_stmt SEMICOLON • simple_stmt
  146           | simple_stmt SEMICOLON • expression SEMICOLON simple_stmt

    APPEND      shift, and go to state 48
    LEN         shift, and go to state 49
    LPAREN      shift, and go to state 53
    BOOLEAN     shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57
    STRING      shift, and go to state 58
    FLOAT       shift, and go to state 59

    $default  reduce using rule 95 (simple_stmt)

    expression_list             go to state 63
    expression                  go to state 219
    primary_expression          go to state 65
    literal                     go to state 66
    binary_op                   go to state 67
    builtin                     go to state 68
    simple_stmt                 go to state 220
    inc_dec_stmt                go to state 72
    assignment                  go to state 73
    short_variable_declaration  go to state 74


State 172

  144 for_stmt: FOR for_clause block_stmt •

    $default  reduce using rule 144 (for_stmt)


State 173

   59 binary_op: expression • LOGICAL_OR expression
   60          | expression • LOGICAL_AND expression
   61          | expression • EQUAL_EQUAL expression
   62          | expression • NOT_EQUAL expression
   63          | expression • LESS_THAN_OR_EQUAL expression
   64          | expression • GREATER_THAN_OR_EQUAL expression
   65          | expression • LESS_THAN expression
   66          | expression • GREATER_THAN expression
   67          | expression • PLUS expression
   68          | expression • MINUS expression
   69          | expression • BITWISE_OR expression
   70          | expression • BITWISE_XOR expression
   71          | expression • TIMES expression
   72          | expression • DIVIDE expression
   73          | expression • MODULO expression
   74          | expression • RIGHT_SHIFT expression
   75          | expression • LEFT_SHIFT expression
   76          | expression • BITWISE_AND expression
   77          | expression • BIT_CLEAR expression
  132 switch_on: simple_stmt expression •

    PLUS                   shift, and go to state 115
    MINUS                  shift, and go to state 116
    TIMES                  shift, and go to state 117
    DIVIDE                 shift, and go to state 118
    MODULO                 shift, and go to state 119
    BITWISE_AND            shift, and go to state 120
    BITWISE_OR             shift, and go to state 121
    BITWISE_XOR            shift, and go to state 122
    BIT_CLEAR              shift, and go to state 123
    LEFT_SHIFT             shift, and go to state 124
    RIGHT_SHIFT            shift, and go to state 125
    EQUAL_EQUAL            shift, and go to state 139
    NOT_EQUAL              shift, and go to state 140
    LESS_THAN              shift, and go to state 141
    LESS_THAN_OR_EQUAL     shift, and go to state 142
    GREATER_THAN           shift, and go to state 143
    GREATER_THAN_OR_EQUAL  shift, and go to state 144
    LOGICAL_AND            shift, and go to state 145
    LOGICAL_OR             shift, and go to state 146

    $default  reduce using rule 132 (switch_on)


State 174

  130 expression_switch_stmt: SWITCH switch_on LBRACE • expression_case_clause_list RBRACE

    $default  reduce using rule 140 (expression_case_clause_list)

    expression_case_clause_list  go to state 221


State 175

   19 declaration: IDENTIFIER INT_TYPE • ASSIGN expression_list
   20            | IDENTIFIER INT_TYPE •

    ASSIGN  shift, and go to state 222

    $default  reduce using rule 20 (declaration)


State 176

   21 declaration: IDENTIFIER STRING_TYPE • ASSIGN expression_list
   22            | IDENTIFIER STRING_TYPE •

    ASSIGN  shift, and go to state 223

    $default  reduce using rule 22 (declaration)


State 177

   18 declaration: identifier_list ASSIGN • expression_list

    APPEND      shift, and go to state 48
    LEN         shift, and go to state 49
    LPAREN      shift, and go to state 53
    BOOLEAN     shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57
    STRING      shift, and go to state 58
    FLOAT       shift, and go to state 59

    expression_list     go to state 224
    expression          go to state 182
    primary_expression  go to state 65
    literal             go to state 66
    binary_op           go to state 67
    builtin             go to state 68


State 178

   59 binary_op: expression • LOGICAL_OR expression
   60          | expression • LOGICAL_AND expression
   61          | expression • EQUAL_EQUAL expression
   62          | expression • NOT_EQUAL expression
   63          | expression • LESS_THAN_OR_EQUAL expression
   64          | expression • GREATER_THAN_OR_EQUAL expression
   65          | expression • LESS_THAN expression
   66          | expression • GREATER_THAN expression
   67          | expression • PLUS expression
   68          | expression • MINUS expression
   69          | expression • BITWISE_OR expression
   70          | expression • BITWISE_XOR expression
   71          | expression • TIMES expression
   72          | expression • DIVIDE expression
   73          | expression • MODULO expression
   74          | expression • RIGHT_SHIFT expression
   75          | expression • LEFT_SHIFT expression
   76          | expression • BITWISE_AND expression
   77          | expression • BIT_CLEAR expression
   78 builtin: APPEND LPAREN expression • COMMA expression RPAREN

    PLUS                   shift, and go to state 115
    MINUS                  shift, and go to state 116
    TIMES                  shift, and go to state 117
    DIVIDE                 shift, and go to state 118
    MODULO                 shift, and go to state 119
    BITWISE_AND            shift, and go to state 120
    BITWISE_OR             shift, and go to state 121
    BITWISE_XOR            shift, and go to state 122
    BIT_CLEAR              shift, and go to state 123
    LEFT_SHIFT             shift, and go to state 124
    RIGHT_SHIFT            shift, and go to state 125
    EQUAL_EQUAL            shift, and go to state 139
    NOT_EQUAL              shift, and go to state 140
    LESS_THAN              shift, and go to state 141
    LESS_THAN_OR_EQUAL     shift, and go to state 142
    GREATER_THAN           shift, and go to state 143
    GREATER_THAN_OR_EQUAL  shift, and go to state 144
    LOGICAL_AND            shift, and go to state 145
    LOGICAL_OR             shift, and go to state 146
    COMMA                  shift, and go to state 225


State 179

   59 binary_op: expression • LOGICAL_OR expression
   60          | expression • LOGICAL_AND expression
   61          | expression • EQUAL_EQUAL expression
   62          | expression • NOT_EQUAL expression
   63          | expression • LESS_THAN_OR_EQUAL expression
   64          | expression • GREATER_THAN_OR_EQUAL expression
   65          | expression • LESS_THAN expression
   66          | expression • GREATER_THAN expression
   67          | expression • PLUS expression
   68          | expression • MINUS expression
   69          | expression • BITWISE_OR expression
   70          | expression • BITWISE_XOR expression
   71          | expression • TIMES expression
   72          | expression • DIVIDE expression
   73          | expression • MODULO expression
   74          | expression • RIGHT_SHIFT expression
   75          | expression • LEFT_SHIFT expression
   76          | expression • BITWISE_AND expression
   77          | expression • BIT_CLEAR expression
   79 builtin: LEN LPAREN expression • RPAREN

    PLUS                   shift, and go to state 115
    MINUS                  shift, and go to state 116
    TIMES                  shift, and go to state 117
    DIVIDE                 shift, and go to state 118
    MODULO                 shift, and go to state 119
    BITWISE_AND            shift, and go to state 120
    BITWISE_OR             shift, and go to state 121
    BITWISE_XOR            shift, and go to state 122
    BIT_CLEAR              shift, and go to state 123
    LEFT_SHIFT             shift, and go to state 124
    RIGHT_SHIFT            shift, and go to state 125
    EQUAL_EQUAL            shift, and go to state 139
    NOT_EQUAL              shift, and go to state 140
    LESS_THAN              shift, and go to state 141
    LESS_THAN_OR_EQUAL     shift, and go to state 142
    GREATER_THAN           shift, and go to state 143
    GREATER_THAN_OR_EQUAL  shift, and go to state 144
    LOGICAL_AND            shift, and go to state 145
    LOGICAL_OR             shift, and go to state 146
    RPAREN                 shift, and go to state 226


State 180

  148 print_stmt: PRINT LPAREN RPAREN •

    $default  reduce using rule 148 (print_stmt)


State 181

  147 print_stmt: PRINT LPAREN expression_list • RPAREN

    RPAREN  shift, and go to state 227


State 182

   43 expression_list: expression •
   44                | expression • COMMA expression_list
   59 binary_op: expression • LOGICAL_OR expression
   60          | expression • LOGICAL_AND expression
   61          | expression • EQUAL_EQUAL expression
   62          | expression • NOT_EQUAL expression
   63          | expression • LESS_THAN_OR_EQUAL expression
   64          | expression • GREATER_THAN_OR_EQUAL expression
   65          | expression • LESS_THAN expression
   66          | expression • GREATER_THAN expression
   67          | expression • PLUS expression
   68          | expression • MINUS expression
   69          | expression • BITWISE_OR expression
   70          | expression • BITWISE_XOR expression
   71          | expression • TIMES expression
   72          | expression • DIVIDE expression
   73          | expression • MODULO expression
   74          | expression • RIGHT_SHIFT expression
   75          | expression • LEFT_SHIFT expression
   76          | expression • BITWISE_AND expression
   77          | expression • BIT_CLEAR expression

    PLUS                   shift, and go to state 115
    MINUS                  shift, and go to state 116
    TIMES                  shift, and go to state 117
    DIVIDE                 shift, and go to state 118
    MODULO                 shift, and go to state 119
    BITWISE_AND            shift, and go to state 120
    BITWISE_OR             shift, and go to state 121
    BITWISE_XOR            shift, and go to state 122
    BIT_CLEAR              shift, and go to state 123
    LEFT_SHIFT             shift, and go to state 124
    RIGHT_SHIFT            shift, and go to state 125
    EQUAL_EQUAL            shift, and go to state 139
    NOT_EQUAL              shift, and go to state 140
    LESS_THAN              shift, and go to state 141
    LESS_THAN_OR_EQUAL     shift, and go to state 142
    GREATER_THAN           shift, and go to state 143
    GREATER_THAN_OR_EQUAL  shift, and go to state 144
    LOGICAL_AND            shift, and go to state 145
    LOGICAL_OR             shift, and go to state 146
    COMMA                  shift, and go to state 147

    $default  reduce using rule 43 (expression_list)


State 183

  150 println_stmt: PRINTLN LPAREN RPAREN •

    $default  reduce using rule 150 (println_stmt)


State 184

  149 println_stmt: PRINTLN LPAREN expression_list • RPAREN

    RPAREN  shift, and go to state 228


State 185

   28 type_declaration: IDENTIFIER STRUCT • LBRACE declaration_list RBRACE

    LBRACE  shift, and go to state 229


State 186

   27 type_declaration: IDENTIFIER LPAREN • IDENTIFIER RPAREN

    IDENTIFIER  shift, and go to state 230


State 187

   26 type_declaration: IDENTIFIER IDENTIFIER •

    $default  reduce using rule 26 (type_declaration)


State 188

   29 type_declaration: IDENTIFIER bracket_list • IDENTIFIER
   30                 | IDENTIFIER bracket_list • STRUCT LBRACE declaration_list RBRACE

    STRUCT      shift, and go to state 231
    IDENTIFIER  shift, and go to state 232


State 189

   50 primary_expression: LPAREN expression RPAREN •

    $default  reduce using rule 50 (primary_expression)


State 190

  101 assignment: expression_list ASSIGN expression_list •

    $default  reduce using rule 101 (assignment)


State 191

  116 short_variable_declaration: expression_list SHORT_VAR expression_list •

    $default  reduce using rule 116 (short_variable_declaration)


State 192

   59 binary_op: expression • LOGICAL_OR expression
   60          | expression • LOGICAL_AND expression
   61          | expression • EQUAL_EQUAL expression
   62          | expression • NOT_EQUAL expression
   63          | expression • LESS_THAN_OR_EQUAL expression
   64          | expression • GREATER_THAN_OR_EQUAL expression
   65          | expression • LESS_THAN expression
   66          | expression • GREATER_THAN expression
   67          | expression • PLUS expression
   67          | expression PLUS expression •
   68          | expression • MINUS expression
   69          | expression • BITWISE_OR expression
   70          | expression • BITWISE_XOR expression
   71          | expression • TIMES expression
   72          | expression • DIVIDE expression
   73          | expression • MODULO expression
   74          | expression • RIGHT_SHIFT expression
   75          | expression • LEFT_SHIFT expression
   76          | expression • BITWISE_AND expression
   77          | expression • BIT_CLEAR expression

    PLUS                   shift, and go to state 115
    MINUS                  shift, and go to state 116
    TIMES                  shift, and go to state 117
    DIVIDE                 shift, and go to state 118
    MODULO                 shift, and go to state 119
    BITWISE_AND            shift, and go to state 120
    BITWISE_OR             shift, and go to state 121
    BITWISE_XOR            shift, and go to state 122
    BIT_CLEAR              shift, and go to state 123
    LEFT_SHIFT             shift, and go to state 124
    RIGHT_SHIFT            shift, and go to state 125
    EQUAL_EQUAL            shift, and go to state 139
    NOT_EQUAL              shift, and go to state 140
    LESS_THAN              shift, and go to state 141
    LESS_THAN_OR_EQUAL     shift, and go to state 142
    GREATER_THAN           shift, and go to state 143
    GREATER_THAN_OR_EQUAL  shift, and go to state 144
    LOGICAL_AND            shift, and go to state 145
    LOGICAL_OR             shift, and go to state 146

    PLUS                   [reduce using rule 67 (binary_op)]
    MINUS                  [reduce using rule 67 (binary_op)]
    TIMES                  [reduce using rule 67 (binary_op)]
    DIVIDE                 [reduce using rule 67 (binary_op)]
    MODULO                 [reduce using rule 67 (binary_op)]
    BITWISE_AND            [reduce using rule 67 (binary_op)]
    BITWISE_OR             [reduce using rule 67 (binary_op)]
    BITWISE_XOR            [reduce using rule 67 (binary_op)]
    BIT_CLEAR              [reduce using rule 67 (binary_op)]
    LEFT_SHIFT             [reduce using rule 67 (binary_op)]
    RIGHT_SHIFT            [reduce using rule 67 (binary_op)]
    EQUAL_EQUAL            [reduce using rule 67 (binary_op)]
    NOT_EQUAL              [reduce using rule 67 (binary_op)]
    LESS_THAN              [reduce using rule 67 (binary_op)]
    LESS_THAN_OR_EQUAL     [reduce using rule 67 (binary_op)]
    GREATER_THAN           [reduce using rule 67 (binary_op)]
    GREATER_THAN_OR_EQUAL  [reduce using rule 67 (binary_op)]
    LOGICAL_AND            [reduce using rule 67 (binary_op)]
    LOGICAL_OR             [reduce using rule 67 (binary_op)]
    $default               reduce using rule 67 (binary_op)


State 193

   59 binary_op: expression • LOGICAL_OR expression
   60          | expression • LOGICAL_AND expression
   61          | expression • EQUAL_EQUAL expression
   62          | expression • NOT_EQUAL expression
   63          | expression • LESS_THAN_OR_EQUAL expression
   64          | expression • GREATER_THAN_OR_EQUAL expression
   65          | expression • LESS_THAN expression
   66          | expression • GREATER_THAN expression
   67          | expression • PLUS expression
   68          | expression • MINUS expression
   68          | expression MINUS expression •
   69          | expression • BITWISE_OR expression
   70          | expression • BITWISE_XOR expression
   71          | expression • TIMES expression
   72          | expression • DIVIDE expression
   73          | expression • MODULO expression
   74          | expression • RIGHT_SHIFT expression
   75          | expression • LEFT_SHIFT expression
   76          | expression • BITWISE_AND expression
   77          | expression • BIT_CLEAR expression

    PLUS                   shift, and go to state 115
    MINUS                  shift, and go to state 116
    TIMES                  shift, and go to state 117
    DIVIDE                 shift, and go to state 118
    MODULO                 shift, and go to state 119
    BITWISE_AND            shift, and go to state 120
    BITWISE_OR             shift, and go to state 121
    BITWISE_XOR            shift, and go to state 122
    BIT_CLEAR              shift, and go to state 123
    LEFT_SHIFT             shift, and go to state 124
    RIGHT_SHIFT            shift, and go to state 125
    EQUAL_EQUAL            shift, and go to state 139
    NOT_EQUAL              shift, and go to state 140
    LESS_THAN              shift, and go to state 141
    LESS_THAN_OR_EQUAL     shift, and go to state 142
    GREATER_THAN           shift, and go to state 143
    GREATER_THAN_OR_EQUAL  shift, and go to state 144
    LOGICAL_AND            shift, and go to state 145
    LOGICAL_OR             shift, and go to state 146

    PLUS                   [reduce using rule 68 (binary_op)]
    MINUS                  [reduce using rule 68 (binary_op)]
    TIMES                  [reduce using rule 68 (binary_op)]
    DIVIDE                 [reduce using rule 68 (binary_op)]
    MODULO                 [reduce using rule 68 (binary_op)]
    BITWISE_AND            [reduce using rule 68 (binary_op)]
    BITWISE_OR             [reduce using rule 68 (binary_op)]
    BITWISE_XOR            [reduce using rule 68 (binary_op)]
    BIT_CLEAR              [reduce using rule 68 (binary_op)]
    LEFT_SHIFT             [reduce using rule 68 (binary_op)]
    RIGHT_SHIFT            [reduce using rule 68 (binary_op)]
    EQUAL_EQUAL            [reduce using rule 68 (binary_op)]
    NOT_EQUAL              [reduce using rule 68 (binary_op)]
    LESS_THAN              [reduce using rule 68 (binary_op)]
    LESS_THAN_OR_EQUAL     [reduce using rule 68 (binary_op)]
    GREATER_THAN           [reduce using rule 68 (binary_op)]
    GREATER_THAN_OR_EQUAL  [reduce using rule 68 (binary_op)]
    LOGICAL_AND            [reduce using rule 68 (binary_op)]
    LOGICAL_OR             [reduce using rule 68 (binary_op)]
    $default               reduce using rule 68 (binary_op)


State 194

   59 binary_op: expression • LOGICAL_OR expression
   60          | expression • LOGICAL_AND expression
   61          | expression • EQUAL_EQUAL expression
   62          | expression • NOT_EQUAL expression
   63          | expression • LESS_THAN_OR_EQUAL expression
   64          | expression • GREATER_THAN_OR_EQUAL expression
   65          | expression • LESS_THAN expression
   66          | expression • GREATER_THAN expression
   67          | expression • PLUS expression
   68          | expression • MINUS expression
   69          | expression • BITWISE_OR expression
   70          | expression • BITWISE_XOR expression
   71          | expression • TIMES expression
   71          | expression TIMES expression •
   72          | expression • DIVIDE expression
   73          | expression • MODULO expression
   74          | expression • RIGHT_SHIFT expression
   75          | expression • LEFT_SHIFT expression
   76          | expression • BITWISE_AND expression
   77          | expression • BIT_CLEAR expression

    PLUS                   shift, and go to state 115
    MINUS                  shift, and go to state 116
    TIMES                  shift, and go to state 117
    DIVIDE                 shift, and go to state 118
    MODULO                 shift, and go to state 119
    BITWISE_AND            shift, and go to state 120
    BITWISE_OR             shift, and go to state 121
    BITWISE_XOR            shift, and go to state 122
    BIT_CLEAR              shift, and go to state 123
    LEFT_SHIFT             shift, and go to state 124
    RIGHT_SHIFT            shift, and go to state 125
    EQUAL_EQUAL            shift, and go to state 139
    NOT_EQUAL              shift, and go to state 140
    LESS_THAN              shift, and go to state 141
    LESS_THAN_OR_EQUAL     shift, and go to state 142
    GREATER_THAN           shift, and go to state 143
    GREATER_THAN_OR_EQUAL  shift, and go to state 144
    LOGICAL_AND            shift, and go to state 145
    LOGICAL_OR             shift, and go to state 146

    PLUS                   [reduce using rule 71 (binary_op)]
    MINUS                  [reduce using rule 71 (binary_op)]
    TIMES                  [reduce using rule 71 (binary_op)]
    DIVIDE                 [reduce using rule 71 (binary_op)]
    MODULO                 [reduce using rule 71 (binary_op)]
    BITWISE_AND            [reduce using rule 71 (binary_op)]
    BITWISE_OR             [reduce using rule 71 (binary_op)]
    BITWISE_XOR            [reduce using rule 71 (binary_op)]
    BIT_CLEAR              [reduce using rule 71 (binary_op)]
    LEFT_SHIFT             [reduce using rule 71 (binary_op)]
    RIGHT_SHIFT            [reduce using rule 71 (binary_op)]
    EQUAL_EQUAL            [reduce using rule 71 (binary_op)]
    NOT_EQUAL              [reduce using rule 71 (binary_op)]
    LESS_THAN              [reduce using rule 71 (binary_op)]
    LESS_THAN_OR_EQUAL     [reduce using rule 71 (binary_op)]
    GREATER_THAN           [reduce using rule 71 (binary_op)]
    GREATER_THAN_OR_EQUAL  [reduce using rule 71 (binary_op)]
    LOGICAL_AND            [reduce using rule 71 (binary_op)]
    LOGICAL_OR             [reduce using rule 71 (binary_op)]
    $default               reduce using rule 71 (binary_op)


State 195

   59 binary_op: expression • LOGICAL_OR expression
   60          | expression • LOGICAL_AND expression
   61          | expression • EQUAL_EQUAL expression
   62          | expression • NOT_EQUAL expression
   63          | expression • LESS_THAN_OR_EQUAL expression
   64          | expression • GREATER_THAN_OR_EQUAL expression
   65          | expression • LESS_THAN expression
   66          | expression • GREATER_THAN expression
   67          | expression • PLUS expression
   68          | expression • MINUS expression
   69          | expression • BITWISE_OR expression
   70          | expression • BITWISE_XOR expression
   71          | expression • TIMES expression
   72          | expression • DIVIDE expression
   72          | expression DIVIDE expression •
   73          | expression • MODULO expression
   74          | expression • RIGHT_SHIFT expression
   75          | expression • LEFT_SHIFT expression
   76          | expression • BITWISE_AND expression
   77          | expression • BIT_CLEAR expression

    PLUS                   shift, and go to state 115
    MINUS                  shift, and go to state 116
    TIMES                  shift, and go to state 117
    DIVIDE                 shift, and go to state 118
    MODULO                 shift, and go to state 119
    BITWISE_AND            shift, and go to state 120
    BITWISE_OR             shift, and go to state 121
    BITWISE_XOR            shift, and go to state 122
    BIT_CLEAR              shift, and go to state 123
    LEFT_SHIFT             shift, and go to state 124
    RIGHT_SHIFT            shift, and go to state 125
    EQUAL_EQUAL            shift, and go to state 139
    NOT_EQUAL              shift, and go to state 140
    LESS_THAN              shift, and go to state 141
    LESS_THAN_OR_EQUAL     shift, and go to state 142
    GREATER_THAN           shift, and go to state 143
    GREATER_THAN_OR_EQUAL  shift, and go to state 144
    LOGICAL_AND            shift, and go to state 145
    LOGICAL_OR             shift, and go to state 146

    PLUS                   [reduce using rule 72 (binary_op)]
    MINUS                  [reduce using rule 72 (binary_op)]
    TIMES                  [reduce using rule 72 (binary_op)]
    DIVIDE                 [reduce using rule 72 (binary_op)]
    MODULO                 [reduce using rule 72 (binary_op)]
    BITWISE_AND            [reduce using rule 72 (binary_op)]
    BITWISE_OR             [reduce using rule 72 (binary_op)]
    BITWISE_XOR            [reduce using rule 72 (binary_op)]
    BIT_CLEAR              [reduce using rule 72 (binary_op)]
    LEFT_SHIFT             [reduce using rule 72 (binary_op)]
    RIGHT_SHIFT            [reduce using rule 72 (binary_op)]
    EQUAL_EQUAL            [reduce using rule 72 (binary_op)]
    NOT_EQUAL              [reduce using rule 72 (binary_op)]
    LESS_THAN              [reduce using rule 72 (binary_op)]
    LESS_THAN_OR_EQUAL     [reduce using rule 72 (binary_op)]
    GREATER_THAN           [reduce using rule 72 (binary_op)]
    GREATER_THAN_OR_EQUAL  [reduce using rule 72 (binary_op)]
    LOGICAL_AND            [reduce using rule 72 (binary_op)]
    LOGICAL_OR             [reduce using rule 72 (binary_op)]
    $default               reduce using rule 72 (binary_op)


State 196

   59 binary_op: expression • LOGICAL_OR expression
   60          | expression • LOGICAL_AND expression
   61          | expression • EQUAL_EQUAL expression
   62          | expression • NOT_EQUAL expression
   63          | expression • LESS_THAN_OR_EQUAL expression
   64          | expression • GREATER_THAN_OR_EQUAL expression
   65          | expression • LESS_THAN expression
   66          | expression • GREATER_THAN expression
   67          | expression • PLUS expression
   68          | expression • MINUS expression
   69          | expression • BITWISE_OR expression
   70          | expression • BITWISE_XOR expression
   71          | expression • TIMES expression
   72          | expression • DIVIDE expression
   73          | expression • MODULO expression
   73          | expression MODULO expression •
   74          | expression • RIGHT_SHIFT expression
   75          | expression • LEFT_SHIFT expression
   76          | expression • BITWISE_AND expression
   77          | expression • BIT_CLEAR expression

    PLUS                   shift, and go to state 115
    MINUS                  shift, and go to state 116
    TIMES                  shift, and go to state 117
    DIVIDE                 shift, and go to state 118
    MODULO                 shift, and go to state 119
    BITWISE_AND            shift, and go to state 120
    BITWISE_OR             shift, and go to state 121
    BITWISE_XOR            shift, and go to state 122
    BIT_CLEAR              shift, and go to state 123
    LEFT_SHIFT             shift, and go to state 124
    RIGHT_SHIFT            shift, and go to state 125
    EQUAL_EQUAL            shift, and go to state 139
    NOT_EQUAL              shift, and go to state 140
    LESS_THAN              shift, and go to state 141
    LESS_THAN_OR_EQUAL     shift, and go to state 142
    GREATER_THAN           shift, and go to state 143
    GREATER_THAN_OR_EQUAL  shift, and go to state 144
    LOGICAL_AND            shift, and go to state 145
    LOGICAL_OR             shift, and go to state 146

    PLUS                   [reduce using rule 73 (binary_op)]
    MINUS                  [reduce using rule 73 (binary_op)]
    TIMES                  [reduce using rule 73 (binary_op)]
    DIVIDE                 [reduce using rule 73 (binary_op)]
    MODULO                 [reduce using rule 73 (binary_op)]
    BITWISE_AND            [reduce using rule 73 (binary_op)]
    BITWISE_OR             [reduce using rule 73 (binary_op)]
    BITWISE_XOR            [reduce using rule 73 (binary_op)]
    BIT_CLEAR              [reduce using rule 73 (binary_op)]
    LEFT_SHIFT             [reduce using rule 73 (binary_op)]
    RIGHT_SHIFT            [reduce using rule 73 (binary_op)]
    EQUAL_EQUAL            [reduce using rule 73 (binary_op)]
    NOT_EQUAL              [reduce using rule 73 (binary_op)]
    LESS_THAN              [reduce using rule 73 (binary_op)]
    LESS_THAN_OR_EQUAL     [reduce using rule 73 (binary_op)]
    GREATER_THAN           [reduce using rule 73 (binary_op)]
    GREATER_THAN_OR_EQUAL  [reduce using rule 73 (binary_op)]
    LOGICAL_AND            [reduce using rule 73 (binary_op)]
    LOGICAL_OR             [reduce using rule 73 (binary_op)]
    $default               reduce using rule 73 (binary_op)


State 197

   59 binary_op: expression • LOGICAL_OR expression
   60          | expression • LOGICAL_AND expression
   61          | expression • EQUAL_EQUAL expression
   62          | expression • NOT_EQUAL expression
   63          | expression • LESS_THAN_OR_EQUAL expression
   64          | expression • GREATER_THAN_OR_EQUAL expression
   65          | expression • LESS_THAN expression
   66          | expression • GREATER_THAN expression
   67          | expression • PLUS expression
   68          | expression • MINUS expression
   69          | expression • BITWISE_OR expression
   70          | expression • BITWISE_XOR expression
   71          | expression • TIMES expression
   72          | expression • DIVIDE expression
   73          | expression • MODULO expression
   74          | expression • RIGHT_SHIFT expression
   75          | expression • LEFT_SHIFT expression
   76          | expression • BITWISE_AND expression
   76          | expression BITWISE_AND expression •
   77          | expression • BIT_CLEAR expression

    PLUS                   shift, and go to state 115
    MINUS                  shift, and go to state 116
    TIMES                  shift, and go to state 117
    DIVIDE                 shift, and go to state 118
    MODULO                 shift, and go to state 119
    BITWISE_AND            shift, and go to state 120
    BITWISE_OR             shift, and go to state 121
    BITWISE_XOR            shift, and go to state 122
    BIT_CLEAR              shift, and go to state 123
    LEFT_SHIFT             shift, and go to state 124
    RIGHT_SHIFT            shift, and go to state 125
    EQUAL_EQUAL            shift, and go to state 139
    NOT_EQUAL              shift, and go to state 140
    LESS_THAN              shift, and go to state 141
    LESS_THAN_OR_EQUAL     shift, and go to state 142
    GREATER_THAN           shift, and go to state 143
    GREATER_THAN_OR_EQUAL  shift, and go to state 144
    LOGICAL_AND            shift, and go to state 145
    LOGICAL_OR             shift, and go to state 146

    PLUS                   [reduce using rule 76 (binary_op)]
    MINUS                  [reduce using rule 76 (binary_op)]
    TIMES                  [reduce using rule 76 (binary_op)]
    DIVIDE                 [reduce using rule 76 (binary_op)]
    MODULO                 [reduce using rule 76 (binary_op)]
    BITWISE_AND            [reduce using rule 76 (binary_op)]
    BITWISE_OR             [reduce using rule 76 (binary_op)]
    BITWISE_XOR            [reduce using rule 76 (binary_op)]
    BIT_CLEAR              [reduce using rule 76 (binary_op)]
    LEFT_SHIFT             [reduce using rule 76 (binary_op)]
    RIGHT_SHIFT            [reduce using rule 76 (binary_op)]
    EQUAL_EQUAL            [reduce using rule 76 (binary_op)]
    NOT_EQUAL              [reduce using rule 76 (binary_op)]
    LESS_THAN              [reduce using rule 76 (binary_op)]
    LESS_THAN_OR_EQUAL     [reduce using rule 76 (binary_op)]
    GREATER_THAN           [reduce using rule 76 (binary_op)]
    GREATER_THAN_OR_EQUAL  [reduce using rule 76 (binary_op)]
    LOGICAL_AND            [reduce using rule 76 (binary_op)]
    LOGICAL_OR             [reduce using rule 76 (binary_op)]
    $default               reduce using rule 76 (binary_op)


State 198

   59 binary_op: expression • LOGICAL_OR expression
   60          | expression • LOGICAL_AND expression
   61          | expression • EQUAL_EQUAL expression
   62          | expression • NOT_EQUAL expression
   63          | expression • LESS_THAN_OR_EQUAL expression
   64          | expression • GREATER_THAN_OR_EQUAL expression
   65          | expression • LESS_THAN expression
   66          | expression • GREATER_THAN expression
   67          | expression • PLUS expression
   68          | expression • MINUS expression
   69          | expression • BITWISE_OR expression
   69          | expression BITWISE_OR expression •
   70          | expression • BITWISE_XOR expression
   71          | expression • TIMES expression
   72          | expression • DIVIDE expression
   73          | expression • MODULO expression
   74          | expression • RIGHT_SHIFT expression
   75          | expression • LEFT_SHIFT expression
   76          | expression • BITWISE_AND expression
   77          | expression • BIT_CLEAR expression

    PLUS                   shift, and go to state 115
    MINUS                  shift, and go to state 116
    TIMES                  shift, and go to state 117
    DIVIDE                 shift, and go to state 118
    MODULO                 shift, and go to state 119
    BITWISE_AND            shift, and go to state 120
    BITWISE_OR             shift, and go to state 121
    BITWISE_XOR            shift, and go to state 122
    BIT_CLEAR              shift, and go to state 123
    LEFT_SHIFT             shift, and go to state 124
    RIGHT_SHIFT            shift, and go to state 125
    EQUAL_EQUAL            shift, and go to state 139
    NOT_EQUAL              shift, and go to state 140
    LESS_THAN              shift, and go to state 141
    LESS_THAN_OR_EQUAL     shift, and go to state 142
    GREATER_THAN           shift, and go to state 143
    GREATER_THAN_OR_EQUAL  shift, and go to state 144
    LOGICAL_AND            shift, and go to state 145
    LOGICAL_OR             shift, and go to state 146

    PLUS                   [reduce using rule 69 (binary_op)]
    MINUS                  [reduce using rule 69 (binary_op)]
    TIMES                  [reduce using rule 69 (binary_op)]
    DIVIDE                 [reduce using rule 69 (binary_op)]
    MODULO                 [reduce using rule 69 (binary_op)]
    BITWISE_AND            [reduce using rule 69 (binary_op)]
    BITWISE_OR             [reduce using rule 69 (binary_op)]
    BITWISE_XOR            [reduce using rule 69 (binary_op)]
    BIT_CLEAR              [reduce using rule 69 (binary_op)]
    LEFT_SHIFT             [reduce using rule 69 (binary_op)]
    RIGHT_SHIFT            [reduce using rule 69 (binary_op)]
    EQUAL_EQUAL            [reduce using rule 69 (binary_op)]
    NOT_EQUAL              [reduce using rule 69 (binary_op)]
    LESS_THAN              [reduce using rule 69 (binary_op)]
    LESS_THAN_OR_EQUAL     [reduce using rule 69 (binary_op)]
    GREATER_THAN           [reduce using rule 69 (binary_op)]
    GREATER_THAN_OR_EQUAL  [reduce using rule 69 (binary_op)]
    LOGICAL_AND            [reduce using rule 69 (binary_op)]
    LOGICAL_OR             [reduce using rule 69 (binary_op)]
    $default               reduce using rule 69 (binary_op)


State 199

   59 binary_op: expression • LOGICAL_OR expression
   60          | expression • LOGICAL_AND expression
   61          | expression • EQUAL_EQUAL expression
   62          | expression • NOT_EQUAL expression
   63          | expression • LESS_THAN_OR_EQUAL expression
   64          | expression • GREATER_THAN_OR_EQUAL expression
   65          | expression • LESS_THAN expression
   66          | expression • GREATER_THAN expression
   67          | expression • PLUS expression
   68          | expression • MINUS expression
   69          | expression • BITWISE_OR expression
   70          | expression • BITWISE_XOR expression
   70          | expression BITWISE_XOR expression •
   71          | expression • TIMES expression
   72          | expression • DIVIDE expression
   73          | expression • MODULO expression
   74          | expression • RIGHT_SHIFT expression
   75          | expression • LEFT_SHIFT expression
   76          | expression • BITWISE_AND expression
   77          | expression • BIT_CLEAR expression

    PLUS                   shift, and go to state 115
    MINUS                  shift, and go to state 116
    TIMES                  shift, and go to state 117
    DIVIDE                 shift, and go to state 118
    MODULO                 shift, and go to state 119
    BITWISE_AND            shift, and go to state 120
    BITWISE_OR             shift, and go to state 121
    BITWISE_XOR            shift, and go to state 122
    BIT_CLEAR              shift, and go to state 123
    LEFT_SHIFT             shift, and go to state 124
    RIGHT_SHIFT            shift, and go to state 125
    EQUAL_EQUAL            shift, and go to state 139
    NOT_EQUAL              shift, and go to state 140
    LESS_THAN              shift, and go to state 141
    LESS_THAN_OR_EQUAL     shift, and go to state 142
    GREATER_THAN           shift, and go to state 143
    GREATER_THAN_OR_EQUAL  shift, and go to state 144
    LOGICAL_AND            shift, and go to state 145
    LOGICAL_OR             shift, and go to state 146

    PLUS                   [reduce using rule 70 (binary_op)]
    MINUS                  [reduce using rule 70 (binary_op)]
    TIMES                  [reduce using rule 70 (binary_op)]
    DIVIDE                 [reduce using rule 70 (binary_op)]
    MODULO                 [reduce using rule 70 (binary_op)]
    BITWISE_AND            [reduce using rule 70 (binary_op)]
    BITWISE_OR             [reduce using rule 70 (binary_op)]
    BITWISE_XOR            [reduce using rule 70 (binary_op)]
    BIT_CLEAR              [reduce using rule 70 (binary_op)]
    LEFT_SHIFT             [reduce using rule 70 (binary_op)]
    RIGHT_SHIFT            [reduce using rule 70 (binary_op)]
    EQUAL_EQUAL            [reduce using rule 70 (binary_op)]
    NOT_EQUAL              [reduce using rule 70 (binary_op)]
    LESS_THAN              [reduce using rule 70 (binary_op)]
    LESS_THAN_OR_EQUAL     [reduce using rule 70 (binary_op)]
    GREATER_THAN           [reduce using rule 70 (binary_op)]
    GREATER_THAN_OR_EQUAL  [reduce using rule 70 (binary_op)]
    LOGICAL_AND            [reduce using rule 70 (binary_op)]
    LOGICAL_OR             [reduce using rule 70 (binary_op)]
    $default               reduce using rule 70 (binary_op)


State 200

   59 binary_op: expression • LOGICAL_OR expression
   60          | expression • LOGICAL_AND expression
   61          | expression • EQUAL_EQUAL expression
   62          | expression • NOT_EQUAL expression
   63          | expression • LESS_THAN_OR_EQUAL expression
   64          | expression • GREATER_THAN_OR_EQUAL expression
   65          | expression • LESS_THAN expression
   66          | expression • GREATER_THAN expression
   67          | expression • PLUS expression
   68          | expression • MINUS expression
   69          | expression • BITWISE_OR expression
   70          | expression • BITWISE_XOR expression
   71          | expression • TIMES expression
   72          | expression • DIVIDE expression
   73          | expression • MODULO expression
   74          | expression • RIGHT_SHIFT expression
   75          | expression • LEFT_SHIFT expression
   76          | expression • BITWISE_AND expression
   77          | expression • BIT_CLEAR expression
   77          | expression BIT_CLEAR expression •

    PLUS                   shift, and go to state 115
    MINUS                  shift, and go to state 116
    TIMES                  shift, and go to state 117
    DIVIDE                 shift, and go to state 118
    MODULO                 shift, and go to state 119
    BITWISE_AND            shift, and go to state 120
    BITWISE_OR             shift, and go to state 121
    BITWISE_XOR            shift, and go to state 122
    BIT_CLEAR              shift, and go to state 123
    LEFT_SHIFT             shift, and go to state 124
    RIGHT_SHIFT            shift, and go to state 125
    EQUAL_EQUAL            shift, and go to state 139
    NOT_EQUAL              shift, and go to state 140
    LESS_THAN              shift, and go to state 141
    LESS_THAN_OR_EQUAL     shift, and go to state 142
    GREATER_THAN           shift, and go to state 143
    GREATER_THAN_OR_EQUAL  shift, and go to state 144
    LOGICAL_AND            shift, and go to state 145
    LOGICAL_OR             shift, and go to state 146

    PLUS                   [reduce using rule 77 (binary_op)]
    MINUS                  [reduce using rule 77 (binary_op)]
    TIMES                  [reduce using rule 77 (binary_op)]
    DIVIDE                 [reduce using rule 77 (binary_op)]
    MODULO                 [reduce using rule 77 (binary_op)]
    BITWISE_AND            [reduce using rule 77 (binary_op)]
    BITWISE_OR             [reduce using rule 77 (binary_op)]
    BITWISE_XOR            [reduce using rule 77 (binary_op)]
    BIT_CLEAR              [reduce using rule 77 (binary_op)]
    LEFT_SHIFT             [reduce using rule 77 (binary_op)]
    RIGHT_SHIFT            [reduce using rule 77 (binary_op)]
    EQUAL_EQUAL            [reduce using rule 77 (binary_op)]
    NOT_EQUAL              [reduce using rule 77 (binary_op)]
    LESS_THAN              [reduce using rule 77 (binary_op)]
    LESS_THAN_OR_EQUAL     [reduce using rule 77 (binary_op)]
    GREATER_THAN           [reduce using rule 77 (binary_op)]
    GREATER_THAN_OR_EQUAL  [reduce using rule 77 (binary_op)]
    LOGICAL_AND            [reduce using rule 77 (binary_op)]
    LOGICAL_OR             [reduce using rule 77 (binary_op)]
    $default               reduce using rule 77 (binary_op)


State 201

   59 binary_op: expression • LOGICAL_OR expression
   60          | expression • LOGICAL_AND expression
   61          | expression • EQUAL_EQUAL expression
   62          | expression • NOT_EQUAL expression
   63          | expression • LESS_THAN_OR_EQUAL expression
   64          | expression • GREATER_THAN_OR_EQUAL expression
   65          | expression • LESS_THAN expression
   66          | expression • GREATER_THAN expression
   67          | expression • PLUS expression
   68          | expression • MINUS expression
   69          | expression • BITWISE_OR expression
   70          | expression • BITWISE_XOR expression
   71          | expression • TIMES expression
   72          | expression • DIVIDE expression
   73          | expression • MODULO expression
   74          | expression • RIGHT_SHIFT expression
   75          | expression • LEFT_SHIFT expression
   75          | expression LEFT_SHIFT expression •
   76          | expression • BITWISE_AND expression
   77          | expression • BIT_CLEAR expression

    PLUS                   shift, and go to state 115
    MINUS                  shift, and go to state 116
    TIMES                  shift, and go to state 117
    DIVIDE                 shift, and go to state 118
    MODULO                 shift, and go to state 119
    BITWISE_AND            shift, and go to state 120
    BITWISE_OR             shift, and go to state 121
    BITWISE_XOR            shift, and go to state 122
    BIT_CLEAR              shift, and go to state 123
    LEFT_SHIFT             shift, and go to state 124
    RIGHT_SHIFT            shift, and go to state 125
    EQUAL_EQUAL            shift, and go to state 139
    NOT_EQUAL              shift, and go to state 140
    LESS_THAN              shift, and go to state 141
    LESS_THAN_OR_EQUAL     shift, and go to state 142
    GREATER_THAN           shift, and go to state 143
    GREATER_THAN_OR_EQUAL  shift, and go to state 144
    LOGICAL_AND            shift, and go to state 145
    LOGICAL_OR             shift, and go to state 146

    PLUS                   [reduce using rule 75 (binary_op)]
    MINUS                  [reduce using rule 75 (binary_op)]
    TIMES                  [reduce using rule 75 (binary_op)]
    DIVIDE                 [reduce using rule 75 (binary_op)]
    MODULO                 [reduce using rule 75 (binary_op)]
    BITWISE_AND            [reduce using rule 75 (binary_op)]
    BITWISE_OR             [reduce using rule 75 (binary_op)]
    BITWISE_XOR            [reduce using rule 75 (binary_op)]
    BIT_CLEAR              [reduce using rule 75 (binary_op)]
    LEFT_SHIFT             [reduce using rule 75 (binary_op)]
    RIGHT_SHIFT            [reduce using rule 75 (binary_op)]
    EQUAL_EQUAL            [reduce using rule 75 (binary_op)]
    NOT_EQUAL              [reduce using rule 75 (binary_op)]
    LESS_THAN              [reduce using rule 75 (binary_op)]
    LESS_THAN_OR_EQUAL     [reduce using rule 75 (binary_op)]
    GREATER_THAN           [reduce using rule 75 (binary_op)]
    GREATER_THAN_OR_EQUAL  [reduce using rule 75 (binary_op)]
    LOGICAL_AND            [reduce using rule 75 (binary_op)]
    LOGICAL_OR             [reduce using rule 75 (binary_op)]
    $default               reduce using rule 75 (binary_op)


State 202

   59 binary_op: expression • LOGICAL_OR expression
   60          | expression • LOGICAL_AND expression
   61          | expression • EQUAL_EQUAL expression
   62          | expression • NOT_EQUAL expression
   63          | expression • LESS_THAN_OR_EQUAL expression
   64          | expression • GREATER_THAN_OR_EQUAL expression
   65          | expression • LESS_THAN expression
   66          | expression • GREATER_THAN expression
   67          | expression • PLUS expression
   68          | expression • MINUS expression
   69          | expression • BITWISE_OR expression
   70          | expression • BITWISE_XOR expression
   71          | expression • TIMES expression
   72          | expression • DIVIDE expression
   73          | expression • MODULO expression
   74          | expression • RIGHT_SHIFT expression
   74          | expression RIGHT_SHIFT expression •
   75          | expression • LEFT_SHIFT expression
   76          | expression • BITWISE_AND expression
   77          | expression • BIT_CLEAR expression

    PLUS                   shift, and go to state 115
    MINUS                  shift, and go to state 116
    TIMES                  shift, and go to state 117
    DIVIDE                 shift, and go to state 118
    MODULO                 shift, and go to state 119
    BITWISE_AND            shift, and go to state 120
    BITWISE_OR             shift, and go to state 121
    BITWISE_XOR            shift, and go to state 122
    BIT_CLEAR              shift, and go to state 123
    LEFT_SHIFT             shift, and go to state 124
    RIGHT_SHIFT            shift, and go to state 125
    EQUAL_EQUAL            shift, and go to state 139
    NOT_EQUAL              shift, and go to state 140
    LESS_THAN              shift, and go to state 141
    LESS_THAN_OR_EQUAL     shift, and go to state 142
    GREATER_THAN           shift, and go to state 143
    GREATER_THAN_OR_EQUAL  shift, and go to state 144
    LOGICAL_AND            shift, and go to state 145
    LOGICAL_OR             shift, and go to state 146

    PLUS                   [reduce using rule 74 (binary_op)]
    MINUS                  [reduce using rule 74 (binary_op)]
    TIMES                  [reduce using rule 74 (binary_op)]
    DIVIDE                 [reduce using rule 74 (binary_op)]
    MODULO                 [reduce using rule 74 (binary_op)]
    BITWISE_AND            [reduce using rule 74 (binary_op)]
    BITWISE_OR             [reduce using rule 74 (binary_op)]
    BITWISE_XOR            [reduce using rule 74 (binary_op)]
    BIT_CLEAR              [reduce using rule 74 (binary_op)]
    LEFT_SHIFT             [reduce using rule 74 (binary_op)]
    RIGHT_SHIFT            [reduce using rule 74 (binary_op)]
    EQUAL_EQUAL            [reduce using rule 74 (binary_op)]
    NOT_EQUAL              [reduce using rule 74 (binary_op)]
    LESS_THAN              [reduce using rule 74 (binary_op)]
    LESS_THAN_OR_EQUAL     [reduce using rule 74 (binary_op)]
    GREATER_THAN           [reduce using rule 74 (binary_op)]
    GREATER_THAN_OR_EQUAL  [reduce using rule 74 (binary_op)]
    LOGICAL_AND            [reduce using rule 74 (binary_op)]
    LOGICAL_OR             [reduce using rule 74 (binary_op)]
    $default               reduce using rule 74 (binary_op)


State 203

   59 binary_op: expression • LOGICAL_OR expression
   60          | expression • LOGICAL_AND expression
   61          | expression • EQUAL_EQUAL expression
   61          | expression EQUAL_EQUAL expression •
   62          | expression • NOT_EQUAL expression
   63          | expression • LESS_THAN_OR_EQUAL expression
   64          | expression • GREATER_THAN_OR_EQUAL expression
   65          | expression • LESS_THAN expression
   66          | expression • GREATER_THAN expression
   67          | expression • PLUS expression
   68          | expression • MINUS expression
   69          | expression • BITWISE_OR expression
   70          | expression • BITWISE_XOR expression
   71          | expression • TIMES expression
   72          | expression • DIVIDE expression
   73          | expression • MODULO expression
   74          | expression • RIGHT_SHIFT expression
   75          | expression • LEFT_SHIFT expression
   76          | expression • BITWISE_AND expression
   77          | expression • BIT_CLEAR expression

    PLUS                   shift, and go to state 115
    MINUS                  shift, and go to state 116
    TIMES                  shift, and go to state 117
    DIVIDE                 shift, and go to state 118
    MODULO                 shift, and go to state 119
    BITWISE_AND            shift, and go to state 120
    BITWISE_OR             shift, and go to state 121
    BITWISE_XOR            shift, and go to state 122
    BIT_CLEAR              shift, and go to state 123
    LEFT_SHIFT             shift, and go to state 124
    RIGHT_SHIFT            shift, and go to state 125
    EQUAL_EQUAL            shift, and go to state 139
    NOT_EQUAL              shift, and go to state 140
    LESS_THAN              shift, and go to state 141
    LESS_THAN_OR_EQUAL     shift, and go to state 142
    GREATER_THAN           shift, and go to state 143
    GREATER_THAN_OR_EQUAL  shift, and go to state 144
    LOGICAL_AND            shift, and go to state 145
    LOGICAL_OR             shift, and go to state 146

    PLUS                   [reduce using rule 61 (binary_op)]
    MINUS                  [reduce using rule 61 (binary_op)]
    TIMES                  [reduce using rule 61 (binary_op)]
    DIVIDE                 [reduce using rule 61 (binary_op)]
    MODULO                 [reduce using rule 61 (binary_op)]
    BITWISE_AND            [reduce using rule 61 (binary_op)]
    BITWISE_OR             [reduce using rule 61 (binary_op)]
    BITWISE_XOR            [reduce using rule 61 (binary_op)]
    BIT_CLEAR              [reduce using rule 61 (binary_op)]
    LEFT_SHIFT             [reduce using rule 61 (binary_op)]
    RIGHT_SHIFT            [reduce using rule 61 (binary_op)]
    EQUAL_EQUAL            [reduce using rule 61 (binary_op)]
    NOT_EQUAL              [reduce using rule 61 (binary_op)]
    LESS_THAN              [reduce using rule 61 (binary_op)]
    LESS_THAN_OR_EQUAL     [reduce using rule 61 (binary_op)]
    GREATER_THAN           [reduce using rule 61 (binary_op)]
    GREATER_THAN_OR_EQUAL  [reduce using rule 61 (binary_op)]
    LOGICAL_AND            [reduce using rule 61 (binary_op)]
    LOGICAL_OR             [reduce using rule 61 (binary_op)]
    $default               reduce using rule 61 (binary_op)


State 204

   59 binary_op: expression • LOGICAL_OR expression
   60          | expression • LOGICAL_AND expression
   61          | expression • EQUAL_EQUAL expression
   62          | expression • NOT_EQUAL expression
   62          | expression NOT_EQUAL expression •
   63          | expression • LESS_THAN_OR_EQUAL expression
   64          | expression • GREATER_THAN_OR_EQUAL expression
   65          | expression • LESS_THAN expression
   66          | expression • GREATER_THAN expression
   67          | expression • PLUS expression
   68          | expression • MINUS expression
   69          | expression • BITWISE_OR expression
   70          | expression • BITWISE_XOR expression
   71          | expression • TIMES expression
   72          | expression • DIVIDE expression
   73          | expression • MODULO expression
   74          | expression • RIGHT_SHIFT expression
   75          | expression • LEFT_SHIFT expression
   76          | expression • BITWISE_AND expression
   77          | expression • BIT_CLEAR expression

    PLUS                   shift, and go to state 115
    MINUS                  shift, and go to state 116
    TIMES                  shift, and go to state 117
    DIVIDE                 shift, and go to state 118
    MODULO                 shift, and go to state 119
    BITWISE_AND            shift, and go to state 120
    BITWISE_OR             shift, and go to state 121
    BITWISE_XOR            shift, and go to state 122
    BIT_CLEAR              shift, and go to state 123
    LEFT_SHIFT             shift, and go to state 124
    RIGHT_SHIFT            shift, and go to state 125
    EQUAL_EQUAL            shift, and go to state 139
    NOT_EQUAL              shift, and go to state 140
    LESS_THAN              shift, and go to state 141
    LESS_THAN_OR_EQUAL     shift, and go to state 142
    GREATER_THAN           shift, and go to state 143
    GREATER_THAN_OR_EQUAL  shift, and go to state 144
    LOGICAL_AND            shift, and go to state 145
    LOGICAL_OR             shift, and go to state 146

    PLUS                   [reduce using rule 62 (binary_op)]
    MINUS                  [reduce using rule 62 (binary_op)]
    TIMES                  [reduce using rule 62 (binary_op)]
    DIVIDE                 [reduce using rule 62 (binary_op)]
    MODULO                 [reduce using rule 62 (binary_op)]
    BITWISE_AND            [reduce using rule 62 (binary_op)]
    BITWISE_OR             [reduce using rule 62 (binary_op)]
    BITWISE_XOR            [reduce using rule 62 (binary_op)]
    BIT_CLEAR              [reduce using rule 62 (binary_op)]
    LEFT_SHIFT             [reduce using rule 62 (binary_op)]
    RIGHT_SHIFT            [reduce using rule 62 (binary_op)]
    EQUAL_EQUAL            [reduce using rule 62 (binary_op)]
    NOT_EQUAL              [reduce using rule 62 (binary_op)]
    LESS_THAN              [reduce using rule 62 (binary_op)]
    LESS_THAN_OR_EQUAL     [reduce using rule 62 (binary_op)]
    GREATER_THAN           [reduce using rule 62 (binary_op)]
    GREATER_THAN_OR_EQUAL  [reduce using rule 62 (binary_op)]
    LOGICAL_AND            [reduce using rule 62 (binary_op)]
    LOGICAL_OR             [reduce using rule 62 (binary_op)]
    $default               reduce using rule 62 (binary_op)


State 205

   59 binary_op: expression • LOGICAL_OR expression
   60          | expression • LOGICAL_AND expression
   61          | expression • EQUAL_EQUAL expression
   62          | expression • NOT_EQUAL expression
   63          | expression • LESS_THAN_OR_EQUAL expression
   64          | expression • GREATER_THAN_OR_EQUAL expression
   65          | expression • LESS_THAN expression
   65          | expression LESS_THAN expression •
   66          | expression • GREATER_THAN expression
   67          | expression • PLUS expression
   68          | expression • MINUS expression
   69          | expression • BITWISE_OR expression
   70          | expression • BITWISE_XOR expression
   71          | expression • TIMES expression
   72          | expression • DIVIDE expression
   73          | expression • MODULO expression
   74          | expression • RIGHT_SHIFT expression
   75          | expression • LEFT_SHIFT expression
   76          | expression • BITWISE_AND expression
   77          | expression • BIT_CLEAR expression

    PLUS                   shift, and go to state 115
    MINUS                  shift, and go to state 116
    TIMES                  shift, and go to state 117
    DIVIDE                 shift, and go to state 118
    MODULO                 shift, and go to state 119
    BITWISE_AND            shift, and go to state 120
    BITWISE_OR             shift, and go to state 121
    BITWISE_XOR            shift, and go to state 122
    BIT_CLEAR              shift, and go to state 123
    LEFT_SHIFT             shift, and go to state 124
    RIGHT_SHIFT            shift, and go to state 125
    EQUAL_EQUAL            shift, and go to state 139
    NOT_EQUAL              shift, and go to state 140
    LESS_THAN              shift, and go to state 141
    LESS_THAN_OR_EQUAL     shift, and go to state 142
    GREATER_THAN           shift, and go to state 143
    GREATER_THAN_OR_EQUAL  shift, and go to state 144
    LOGICAL_AND            shift, and go to state 145
    LOGICAL_OR             shift, and go to state 146

    PLUS                   [reduce using rule 65 (binary_op)]
    MINUS                  [reduce using rule 65 (binary_op)]
    TIMES                  [reduce using rule 65 (binary_op)]
    DIVIDE                 [reduce using rule 65 (binary_op)]
    MODULO                 [reduce using rule 65 (binary_op)]
    BITWISE_AND            [reduce using rule 65 (binary_op)]
    BITWISE_OR             [reduce using rule 65 (binary_op)]
    BITWISE_XOR            [reduce using rule 65 (binary_op)]
    BIT_CLEAR              [reduce using rule 65 (binary_op)]
    LEFT_SHIFT             [reduce using rule 65 (binary_op)]
    RIGHT_SHIFT            [reduce using rule 65 (binary_op)]
    EQUAL_EQUAL            [reduce using rule 65 (binary_op)]
    NOT_EQUAL              [reduce using rule 65 (binary_op)]
    LESS_THAN              [reduce using rule 65 (binary_op)]
    LESS_THAN_OR_EQUAL     [reduce using rule 65 (binary_op)]
    GREATER_THAN           [reduce using rule 65 (binary_op)]
    GREATER_THAN_OR_EQUAL  [reduce using rule 65 (binary_op)]
    LOGICAL_AND            [reduce using rule 65 (binary_op)]
    LOGICAL_OR             [reduce using rule 65 (binary_op)]
    $default               reduce using rule 65 (binary_op)


State 206

   59 binary_op: expression • LOGICAL_OR expression
   60          | expression • LOGICAL_AND expression
   61          | expression • EQUAL_EQUAL expression
   62          | expression • NOT_EQUAL expression
   63          | expression • LESS_THAN_OR_EQUAL expression
   63          | expression LESS_THAN_OR_EQUAL expression •
   64          | expression • GREATER_THAN_OR_EQUAL expression
   65          | expression • LESS_THAN expression
   66          | expression • GREATER_THAN expression
   67          | expression • PLUS expression
   68          | expression • MINUS expression
   69          | expression • BITWISE_OR expression
   70          | expression • BITWISE_XOR expression
   71          | expression • TIMES expression
   72          | expression • DIVIDE expression
   73          | expression • MODULO expression
   74          | expression • RIGHT_SHIFT expression
   75          | expression • LEFT_SHIFT expression
   76          | expression • BITWISE_AND expression
   77          | expression • BIT_CLEAR expression

    PLUS                   shift, and go to state 115
    MINUS                  shift, and go to state 116
    TIMES                  shift, and go to state 117
    DIVIDE                 shift, and go to state 118
    MODULO                 shift, and go to state 119
    BITWISE_AND            shift, and go to state 120
    BITWISE_OR             shift, and go to state 121
    BITWISE_XOR            shift, and go to state 122
    BIT_CLEAR              shift, and go to state 123
    LEFT_SHIFT             shift, and go to state 124
    RIGHT_SHIFT            shift, and go to state 125
    EQUAL_EQUAL            shift, and go to state 139
    NOT_EQUAL              shift, and go to state 140
    LESS_THAN              shift, and go to state 141
    LESS_THAN_OR_EQUAL     shift, and go to state 142
    GREATER_THAN           shift, and go to state 143
    GREATER_THAN_OR_EQUAL  shift, and go to state 144
    LOGICAL_AND            shift, and go to state 145
    LOGICAL_OR             shift, and go to state 146

    PLUS                   [reduce using rule 63 (binary_op)]
    MINUS                  [reduce using rule 63 (binary_op)]
    TIMES                  [reduce using rule 63 (binary_op)]
    DIVIDE                 [reduce using rule 63 (binary_op)]
    MODULO                 [reduce using rule 63 (binary_op)]
    BITWISE_AND            [reduce using rule 63 (binary_op)]
    BITWISE_OR             [reduce using rule 63 (binary_op)]
    BITWISE_XOR            [reduce using rule 63 (binary_op)]
    BIT_CLEAR              [reduce using rule 63 (binary_op)]
    LEFT_SHIFT             [reduce using rule 63 (binary_op)]
    RIGHT_SHIFT            [reduce using rule 63 (binary_op)]
    EQUAL_EQUAL            [reduce using rule 63 (binary_op)]
    NOT_EQUAL              [reduce using rule 63 (binary_op)]
    LESS_THAN              [reduce using rule 63 (binary_op)]
    LESS_THAN_OR_EQUAL     [reduce using rule 63 (binary_op)]
    GREATER_THAN           [reduce using rule 63 (binary_op)]
    GREATER_THAN_OR_EQUAL  [reduce using rule 63 (binary_op)]
    LOGICAL_AND            [reduce using rule 63 (binary_op)]
    LOGICAL_OR             [reduce using rule 63 (binary_op)]
    $default               reduce using rule 63 (binary_op)


State 207

   59 binary_op: expression • LOGICAL_OR expression
   60          | expression • LOGICAL_AND expression
   61          | expression • EQUAL_EQUAL expression
   62          | expression • NOT_EQUAL expression
   63          | expression • LESS_THAN_OR_EQUAL expression
   64          | expression • GREATER_THAN_OR_EQUAL expression
   65          | expression • LESS_THAN expression
   66          | expression • GREATER_THAN expression
   66          | expression GREATER_THAN expression •
   67          | expression • PLUS expression
   68          | expression • MINUS expression
   69          | expression • BITWISE_OR expression
   70          | expression • BITWISE_XOR expression
   71          | expression • TIMES expression
   72          | expression • DIVIDE expression
   73          | expression • MODULO expression
   74          | expression • RIGHT_SHIFT expression
   75          | expression • LEFT_SHIFT expression
   76          | expression • BITWISE_AND expression
   77          | expression • BIT_CLEAR expression

    PLUS                   shift, and go to state 115
    MINUS                  shift, and go to state 116
    TIMES                  shift, and go to state 117
    DIVIDE                 shift, and go to state 118
    MODULO                 shift, and go to state 119
    BITWISE_AND            shift, and go to state 120
    BITWISE_OR             shift, and go to state 121
    BITWISE_XOR            shift, and go to state 122
    BIT_CLEAR              shift, and go to state 123
    LEFT_SHIFT             shift, and go to state 124
    RIGHT_SHIFT            shift, and go to state 125
    EQUAL_EQUAL            shift, and go to state 139
    NOT_EQUAL              shift, and go to state 140
    LESS_THAN              shift, and go to state 141
    LESS_THAN_OR_EQUAL     shift, and go to state 142
    GREATER_THAN           shift, and go to state 143
    GREATER_THAN_OR_EQUAL  shift, and go to state 144
    LOGICAL_AND            shift, and go to state 145
    LOGICAL_OR             shift, and go to state 146

    PLUS                   [reduce using rule 66 (binary_op)]
    MINUS                  [reduce using rule 66 (binary_op)]
    TIMES                  [reduce using rule 66 (binary_op)]
    DIVIDE                 [reduce using rule 66 (binary_op)]
    MODULO                 [reduce using rule 66 (binary_op)]
    BITWISE_AND            [reduce using rule 66 (binary_op)]
    BITWISE_OR             [reduce using rule 66 (binary_op)]
    BITWISE_XOR            [reduce using rule 66 (binary_op)]
    BIT_CLEAR              [reduce using rule 66 (binary_op)]
    LEFT_SHIFT             [reduce using rule 66 (binary_op)]
    RIGHT_SHIFT            [reduce using rule 66 (binary_op)]
    EQUAL_EQUAL            [reduce using rule 66 (binary_op)]
    NOT_EQUAL              [reduce using rule 66 (binary_op)]
    LESS_THAN              [reduce using rule 66 (binary_op)]
    LESS_THAN_OR_EQUAL     [reduce using rule 66 (binary_op)]
    GREATER_THAN           [reduce using rule 66 (binary_op)]
    GREATER_THAN_OR_EQUAL  [reduce using rule 66 (binary_op)]
    LOGICAL_AND            [reduce using rule 66 (binary_op)]
    LOGICAL_OR             [reduce using rule 66 (binary_op)]
    $default               reduce using rule 66 (binary_op)


State 208

   59 binary_op: expression • LOGICAL_OR expression
   60          | expression • LOGICAL_AND expression
   61          | expression • EQUAL_EQUAL expression
   62          | expression • NOT_EQUAL expression
   63          | expression • LESS_THAN_OR_EQUAL expression
   64          | expression • GREATER_THAN_OR_EQUAL expression
   64          | expression GREATER_THAN_OR_EQUAL expression •
   65          | expression • LESS_THAN expression
   66          | expression • GREATER_THAN expression
   67          | expression • PLUS expression
   68          | expression • MINUS expression
   69          | expression • BITWISE_OR expression
   70          | expression • BITWISE_XOR expression
   71          | expression • TIMES expression
   72          | expression • DIVIDE expression
   73          | expression • MODULO expression
   74          | expression • RIGHT_SHIFT expression
   75          | expression • LEFT_SHIFT expression
   76          | expression • BITWISE_AND expression
   77          | expression • BIT_CLEAR expression

    PLUS                   shift, and go to state 115
    MINUS                  shift, and go to state 116
    TIMES                  shift, and go to state 117
    DIVIDE                 shift, and go to state 118
    MODULO                 shift, and go to state 119
    BITWISE_AND            shift, and go to state 120
    BITWISE_OR             shift, and go to state 121
    BITWISE_XOR            shift, and go to state 122
    BIT_CLEAR              shift, and go to state 123
    LEFT_SHIFT             shift, and go to state 124
    RIGHT_SHIFT            shift, and go to state 125
    EQUAL_EQUAL            shift, and go to state 139
    NOT_EQUAL              shift, and go to state 140
    LESS_THAN              shift, and go to state 141
    LESS_THAN_OR_EQUAL     shift, and go to state 142
    GREATER_THAN           shift, and go to state 143
    GREATER_THAN_OR_EQUAL  shift, and go to state 144
    LOGICAL_AND            shift, and go to state 145
    LOGICAL_OR             shift, and go to state 146

    PLUS                   [reduce using rule 64 (binary_op)]
    MINUS                  [reduce using rule 64 (binary_op)]
    TIMES                  [reduce using rule 64 (binary_op)]
    DIVIDE                 [reduce using rule 64 (binary_op)]
    MODULO                 [reduce using rule 64 (binary_op)]
    BITWISE_AND            [reduce using rule 64 (binary_op)]
    BITWISE_OR             [reduce using rule 64 (binary_op)]
    BITWISE_XOR            [reduce using rule 64 (binary_op)]
    BIT_CLEAR              [reduce using rule 64 (binary_op)]
    LEFT_SHIFT             [reduce using rule 64 (binary_op)]
    RIGHT_SHIFT            [reduce using rule 64 (binary_op)]
    EQUAL_EQUAL            [reduce using rule 64 (binary_op)]
    NOT_EQUAL              [reduce using rule 64 (binary_op)]
    LESS_THAN              [reduce using rule 64 (binary_op)]
    LESS_THAN_OR_EQUAL     [reduce using rule 64 (binary_op)]
    GREATER_THAN           [reduce using rule 64 (binary_op)]
    GREATER_THAN_OR_EQUAL  [reduce using rule 64 (binary_op)]
    LOGICAL_AND            [reduce using rule 64 (binary_op)]
    LOGICAL_OR             [reduce using rule 64 (binary_op)]
    $default               reduce using rule 64 (binary_op)


State 209

   59 binary_op: expression • LOGICAL_OR expression
   60          | expression • LOGICAL_AND expression
   60          | expression LOGICAL_AND expression •
   61          | expression • EQUAL_EQUAL expression
   62          | expression • NOT_EQUAL expression
   63          | expression • LESS_THAN_OR_EQUAL expression
   64          | expression • GREATER_THAN_OR_EQUAL expression
   65          | expression • LESS_THAN expression
   66          | expression • GREATER_THAN expression
   67          | expression • PLUS expression
   68          | expression • MINUS expression
   69          | expression • BITWISE_OR expression
   70          | expression • BITWISE_XOR expression
   71          | expression • TIMES expression
   72          | expression • DIVIDE expression
   73          | expression • MODULO expression
   74          | expression • RIGHT_SHIFT expression
   75          | expression • LEFT_SHIFT expression
   76          | expression • BITWISE_AND expression
   77          | expression • BIT_CLEAR expression

    PLUS                   shift, and go to state 115
    MINUS                  shift, and go to state 116
    TIMES                  shift, and go to state 117
    DIVIDE                 shift, and go to state 118
    MODULO                 shift, and go to state 119
    BITWISE_AND            shift, and go to state 120
    BITWISE_OR             shift, and go to state 121
    BITWISE_XOR            shift, and go to state 122
    BIT_CLEAR              shift, and go to state 123
    LEFT_SHIFT             shift, and go to state 124
    RIGHT_SHIFT            shift, and go to state 125
    EQUAL_EQUAL            shift, and go to state 139
    NOT_EQUAL              shift, and go to state 140
    LESS_THAN              shift, and go to state 141
    LESS_THAN_OR_EQUAL     shift, and go to state 142
    GREATER_THAN           shift, and go to state 143
    GREATER_THAN_OR_EQUAL  shift, and go to state 144
    LOGICAL_AND            shift, and go to state 145
    LOGICAL_OR             shift, and go to state 146

    PLUS                   [reduce using rule 60 (binary_op)]
    MINUS                  [reduce using rule 60 (binary_op)]
    TIMES                  [reduce using rule 60 (binary_op)]
    DIVIDE                 [reduce using rule 60 (binary_op)]
    MODULO                 [reduce using rule 60 (binary_op)]
    BITWISE_AND            [reduce using rule 60 (binary_op)]
    BITWISE_OR             [reduce using rule 60 (binary_op)]
    BITWISE_XOR            [reduce using rule 60 (binary_op)]
    BIT_CLEAR              [reduce using rule 60 (binary_op)]
    LEFT_SHIFT             [reduce using rule 60 (binary_op)]
    RIGHT_SHIFT            [reduce using rule 60 (binary_op)]
    EQUAL_EQUAL            [reduce using rule 60 (binary_op)]
    NOT_EQUAL              [reduce using rule 60 (binary_op)]
    LESS_THAN              [reduce using rule 60 (binary_op)]
    LESS_THAN_OR_EQUAL     [reduce using rule 60 (binary_op)]
    GREATER_THAN           [reduce using rule 60 (binary_op)]
    GREATER_THAN_OR_EQUAL  [reduce using rule 60 (binary_op)]
    LOGICAL_AND            [reduce using rule 60 (binary_op)]
    LOGICAL_OR             [reduce using rule 60 (binary_op)]
    $default               reduce using rule 60 (binary_op)


State 210

   59 binary_op: expression • LOGICAL_OR expression
   59          | expression LOGICAL_OR expression •
   60          | expression • LOGICAL_AND expression
   61          | expression • EQUAL_EQUAL expression
   62          | expression • NOT_EQUAL expression
   63          | expression • LESS_THAN_OR_EQUAL expression
   64          | expression • GREATER_THAN_OR_EQUAL expression
   65          | expression • LESS_THAN expression
   66          | expression • GREATER_THAN expression
   67          | expression • PLUS expression
   68          | expression • MINUS expression
   69          | expression • BITWISE_OR expression
   70          | expression • BITWISE_XOR expression
   71          | expression • TIMES expression
   72          | expression • DIVIDE expression
   73          | expression • MODULO expression
   74          | expression • RIGHT_SHIFT expression
   75          | expression • LEFT_SHIFT expression
   76          | expression • BITWISE_AND expression
   77          | expression • BIT_CLEAR expression

    PLUS                   shift, and go to state 115
    MINUS                  shift, and go to state 116
    TIMES                  shift, and go to state 117
    DIVIDE                 shift, and go to state 118
    MODULO                 shift, and go to state 119
    BITWISE_AND            shift, and go to state 120
    BITWISE_OR             shift, and go to state 121
    BITWISE_XOR            shift, and go to state 122
    BIT_CLEAR              shift, and go to state 123
    LEFT_SHIFT             shift, and go to state 124
    RIGHT_SHIFT            shift, and go to state 125
    EQUAL_EQUAL            shift, and go to state 139
    NOT_EQUAL              shift, and go to state 140
    LESS_THAN              shift, and go to state 141
    LESS_THAN_OR_EQUAL     shift, and go to state 142
    GREATER_THAN           shift, and go to state 143
    GREATER_THAN_OR_EQUAL  shift, and go to state 144
    LOGICAL_AND            shift, and go to state 145
    LOGICAL_OR             shift, and go to state 146

    PLUS                   [reduce using rule 59 (binary_op)]
    MINUS                  [reduce using rule 59 (binary_op)]
    TIMES                  [reduce using rule 59 (binary_op)]
    DIVIDE                 [reduce using rule 59 (binary_op)]
    MODULO                 [reduce using rule 59 (binary_op)]
    BITWISE_AND            [reduce using rule 59 (binary_op)]
    BITWISE_OR             [reduce using rule 59 (binary_op)]
    BITWISE_XOR            [reduce using rule 59 (binary_op)]
    BIT_CLEAR              [reduce using rule 59 (binary_op)]
    LEFT_SHIFT             [reduce using rule 59 (binary_op)]
    RIGHT_SHIFT            [reduce using rule 59 (binary_op)]
    EQUAL_EQUAL            [reduce using rule 59 (binary_op)]
    NOT_EQUAL              [reduce using rule 59 (binary_op)]
    LESS_THAN              [reduce using rule 59 (binary_op)]
    LESS_THAN_OR_EQUAL     [reduce using rule 59 (binary_op)]
    GREATER_THAN           [reduce using rule 59 (binary_op)]
    GREATER_THAN_OR_EQUAL  [reduce using rule 59 (binary_op)]
    LOGICAL_AND            [reduce using rule 59 (binary_op)]
    LOGICAL_OR             [reduce using rule 59 (binary_op)]
    $default               reduce using rule 59 (binary_op)


State 211

   44 expression_list: expression COMMA expression_list •

    $default  reduce using rule 44 (expression_list)


State 212

   59 binary_op: expression • LOGICAL_OR expression
   60          | expression • LOGICAL_AND expression
   61          | expression • EQUAL_EQUAL expression
   62          | expression • NOT_EQUAL expression
   63          | expression • LESS_THAN_OR_EQUAL expression
   64          | expression • GREATER_THAN_OR_EQUAL expression
   65          | expression • LESS_THAN expression
   66          | expression • GREATER_THAN expression
   67          | expression • PLUS expression
   68          | expression • MINUS expression
   69          | expression • BITWISE_OR expression
   70          | expression • BITWISE_XOR expression
   71          | expression • TIMES expression
   72          | expression • DIVIDE expression
   73          | expression • MODULO expression
   74          | expression • RIGHT_SHIFT expression
   75          | expression • LEFT_SHIFT expression
   76          | expression • BITWISE_AND expression
   77          | expression • BIT_CLEAR expression
  102 assignment: expression assign_op expression •

    PLUS                   shift, and go to state 115
    MINUS                  shift, and go to state 116
    TIMES                  shift, and go to state 117
    DIVIDE                 shift, and go to state 118
    MODULO                 shift, and go to state 119
    BITWISE_AND            shift, and go to state 120
    BITWISE_OR             shift, and go to state 121
    BITWISE_XOR            shift, and go to state 122
    BIT_CLEAR              shift, and go to state 123
    LEFT_SHIFT             shift, and go to state 124
    RIGHT_SHIFT            shift, and go to state 125
    EQUAL_EQUAL            shift, and go to state 139
    NOT_EQUAL              shift, and go to state 140
    LESS_THAN              shift, and go to state 141
    LESS_THAN_OR_EQUAL     shift, and go to state 142
    GREATER_THAN           shift, and go to state 143
    GREATER_THAN_OR_EQUAL  shift, and go to state 144
    LOGICAL_AND            shift, and go to state 145
    LOGICAL_OR             shift, and go to state 146

    $default  reduce using rule 102 (assignment)


State 213

   52 primary_expression: primary_expression LPAREN RPAREN •

    $default  reduce using rule 52 (primary_expression)


State 214

   51 primary_expression: primary_expression LPAREN expression_list • RPAREN

    RPAREN  shift, and go to state 233


State 215

   53 primary_expression: primary_expression '.' IDENTIFIER •

    $default  reduce using rule 53 (primary_expression)


State 216

   54 primary_expression: primary_expression '[' expression • ']'
   59 binary_op: expression • LOGICAL_OR expression
   60          | expression • LOGICAL_AND expression
   61          | expression • EQUAL_EQUAL expression
   62          | expression • NOT_EQUAL expression
   63          | expression • LESS_THAN_OR_EQUAL expression
   64          | expression • GREATER_THAN_OR_EQUAL expression
   65          | expression • LESS_THAN expression
   66          | expression • GREATER_THAN expression
   67          | expression • PLUS expression
   68          | expression • MINUS expression
   69          | expression • BITWISE_OR expression
   70          | expression • BITWISE_XOR expression
   71          | expression • TIMES expression
   72          | expression • DIVIDE expression
   73          | expression • MODULO expression
   74          | expression • RIGHT_SHIFT expression
   75          | expression • LEFT_SHIFT expression
   76          | expression • BITWISE_AND expression
   77          | expression • BIT_CLEAR expression

    PLUS                   shift, and go to state 115
    MINUS                  shift, and go to state 116
    TIMES                  shift, and go to state 117
    DIVIDE                 shift, and go to state 118
    MODULO                 shift, and go to state 119
    BITWISE_AND            shift, and go to state 120
    BITWISE_OR             shift, and go to state 121
    BITWISE_XOR            shift, and go to state 122
    BIT_CLEAR              shift, and go to state 123
    LEFT_SHIFT             shift, and go to state 124
    RIGHT_SHIFT            shift, and go to state 125
    EQUAL_EQUAL            shift, and go to state 139
    NOT_EQUAL              shift, and go to state 140
    LESS_THAN              shift, and go to state 141
    LESS_THAN_OR_EQUAL     shift, and go to state 142
    GREATER_THAN           shift, and go to state 143
    GREATER_THAN_OR_EQUAL  shift, and go to state 144
    LOGICAL_AND            shift, and go to state 145
    LOGICAL_OR             shift, and go to state 146
    ']'                    shift, and go to state 234


State 217

  127 if_stmt: IF expression block_stmt ELSE • if_stmt
  128        | IF expression block_stmt ELSE • block_stmt

    IF      shift, and go to state 41
    LBRACE  shift, and go to state 31

    block_stmt  go to state 235
    if_stmt     go to state 236


State 218

  124 if_stmt: IF simple_stmt expression block_stmt •
  125        | IF simple_stmt expression block_stmt • ELSE if_stmt
  126        | IF simple_stmt expression block_stmt • ELSE block_stmt

    ELSE  shift, and go to state 237

    $default  reduce using rule 124 (if_stmt)


State 219

   43 expression_list: expression •
   44                | expression • COMMA expression_list
   59 binary_op: expression • LOGICAL_OR expression
   60          | expression • LOGICAL_AND expression
   61          | expression • EQUAL_EQUAL expression
   62          | expression • NOT_EQUAL expression
   63          | expression • LESS_THAN_OR_EQUAL expression
   64          | expression • GREATER_THAN_OR_EQUAL expression
   65          | expression • LESS_THAN expression
   66          | expression • GREATER_THAN expression
   67          | expression • PLUS expression
   68          | expression • MINUS expression
   69          | expression • BITWISE_OR expression
   70          | expression • BITWISE_XOR expression
   71          | expression • TIMES expression
   72          | expression • DIVIDE expression
   73          | expression • MODULO expression
   74          | expression • RIGHT_SHIFT expression
   75          | expression • LEFT_SHIFT expression
   76          | expression • BITWISE_AND expression
   77          | expression • BIT_CLEAR expression
   99 inc_dec_stmt: expression • INCREMENT
  100             | expression • DECREMENT
  102 assignment: expression • assign_op expression
  146 for_clause: simple_stmt SEMICOLON expression • SEMICOLON simple_stmt

    PLUS                   shift, and go to state 115
    MINUS                  shift, and go to state 116
    TIMES                  shift, and go to state 117
    DIVIDE                 shift, and go to state 118
    MODULO                 shift, and go to state 119
    BITWISE_AND            shift, and go to state 120
    BITWISE_OR             shift, and go to state 121
    BITWISE_XOR            shift, and go to state 122
    BIT_CLEAR              shift, and go to state 123
    LEFT_SHIFT             shift, and go to state 124
    RIGHT_SHIFT            shift, and go to state 125
    ADD_ASSIGN             shift, and go to state 126
    SUB_ASSIGN             shift, and go to state 127
    MUL_ASSIGN             shift, and go to state 128
    DIV_ASSIGN             shift, and go to state 129
    MOD_ASSIGN             shift, and go to state 130
    AND_ASSIGN             shift, and go to state 131
    OR_ASSIGN              shift, and go to state 132
    XOR_ASSIGN             shift, and go to state 133
    LEFT_SHIFT_ASSIGN      shift, and go to state 134
    RIGHT_SHIFT_ASSIGN     shift, and go to state 135
    INCREMENT              shift, and go to state 136
    DECREMENT              shift, and go to state 137
    CLEAR_ASSIGN           shift, and go to state 138
    EQUAL_EQUAL            shift, and go to state 139
    NOT_EQUAL              shift, and go to state 140
    LESS_THAN              shift, and go to state 141
    LESS_THAN_OR_EQUAL     shift, and go to state 142
    GREATER_THAN           shift, and go to state 143
    GREATER_THAN_OR_EQUAL  shift, and go to state 144
    LOGICAL_AND            shift, and go to state 145
    LOGICAL_OR             shift, and go to state 146
    SEMICOLON              shift, and go to state 238
    COMMA                  shift, and go to state 147

    $default  reduce using rule 43 (expression_list)

    assign_op  go to state 148
    add_op_eq  go to state 149
    mul_op_eq  go to state 150


State 220

  145 for_clause: simple_stmt SEMICOLON simple_stmt •

    $default  reduce using rule 145 (for_clause)


State 221

  130 expression_switch_stmt: SWITCH switch_on LBRACE expression_case_clause_list • RBRACE
  141 expression_case_clause_list: expression_case_clause_list • expression_case_clause

    CASE     shift, and go to state 239
    DEFAULT  shift, and go to state 240
    RBRACE   shift, and go to state 241

    expression_case_clause  go to state 242


State 222

   19 declaration: IDENTIFIER INT_TYPE ASSIGN • expression_list

    APPEND      shift, and go to state 48
    LEN         shift, and go to state 49
    LPAREN      shift, and go to state 53
    BOOLEAN     shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57
    STRING      shift, and go to state 58
    FLOAT       shift, and go to state 59

    expression_list     go to state 243
    expression          go to state 182
    primary_expression  go to state 65
    literal             go to state 66
    binary_op           go to state 67
    builtin             go to state 68


State 223

   21 declaration: IDENTIFIER STRING_TYPE ASSIGN • expression_list

    APPEND      shift, and go to state 48
    LEN         shift, and go to state 49
    LPAREN      shift, and go to state 53
    BOOLEAN     shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57
    STRING      shift, and go to state 58
    FLOAT       shift, and go to state 59

    expression_list     go to state 244
    expression          go to state 182
    primary_expression  go to state 65
    literal             go to state 66
    binary_op           go to state 67
    builtin             go to state 68


State 224

   18 declaration: identifier_list ASSIGN expression_list •

    $default  reduce using rule 18 (declaration)


State 225

   78 builtin: APPEND LPAREN expression COMMA • expression RPAREN

    APPEND      shift, and go to state 48
    LEN         shift, and go to state 49
    LPAREN      shift, and go to state 53
    BOOLEAN     shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57
    STRING      shift, and go to state 58
    FLOAT       shift, and go to state 59

    expression          go to state 245
    primary_expression  go to state 65
    literal             go to state 66
    binary_op           go to state 67
    builtin             go to state 68


State 226

   79 builtin: LEN LPAREN expression RPAREN •

    $default  reduce using rule 79 (builtin)


State 227

  147 print_stmt: PRINT LPAREN expression_list RPAREN •

    $default  reduce using rule 147 (print_stmt)


State 228

  149 println_stmt: PRINTLN LPAREN expression_list RPAREN •

    $default  reduce using rule 149 (println_stmt)


State 229

   28 type_declaration: IDENTIFIER STRUCT LBRACE • declaration_list RBRACE

    IDENTIFIER  shift, and go to state 102

    $default  reduce using rule 15 (declaration_list)

    declaration_list  go to state 246
    declaration       go to state 247
    identifier_list   go to state 104


State 230

   27 type_declaration: IDENTIFIER LPAREN IDENTIFIER • RPAREN

    RPAREN  shift, and go to state 248


State 231

   30 type_declaration: IDENTIFIER bracket_list STRUCT • LBRACE declaration_list RBRACE

    LBRACE  shift, and go to state 249


State 232

   29 type_declaration: IDENTIFIER bracket_list IDENTIFIER •

    $default  reduce using rule 29 (type_declaration)


State 233

   51 primary_expression: primary_expression LPAREN expression_list RPAREN •

    $default  reduce using rule 51 (primary_expression)


State 234

   54 primary_expression: primary_expression '[' expression ']' •

    $default  reduce using rule 54 (primary_expression)


State 235

  128 if_stmt: IF expression block_stmt ELSE block_stmt •

    $default  reduce using rule 128 (if_stmt)


State 236

  127 if_stmt: IF expression block_stmt ELSE if_stmt •

    $default  reduce using rule 127 (if_stmt)


State 237

  125 if_stmt: IF simple_stmt expression block_stmt ELSE • if_stmt
  126        | IF simple_stmt expression block_stmt ELSE • block_stmt

    IF      shift, and go to state 41
    LBRACE  shift, and go to state 31

    block_stmt  go to state 250
    if_stmt     go to state 251


State 238

  146 for_clause: simple_stmt SEMICOLON expression SEMICOLON • simple_stmt

    APPEND      shift, and go to state 48
    LEN         shift, and go to state 49
    LPAREN      shift, and go to state 53
    BOOLEAN     shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57
    STRING      shift, and go to state 58
    FLOAT       shift, and go to state 59

    $default  reduce using rule 95 (simple_stmt)

    expression_list             go to state 63
    expression                  go to state 64
    primary_expression          go to state 65
    literal                     go to state 66
    binary_op                   go to state 67
    builtin                     go to state 68
    simple_stmt                 go to state 252
    inc_dec_stmt                go to state 72
    assignment                  go to state 73
    short_variable_declaration  go to state 74


State 239

  135 expression_case_clause: CASE • expression_list ':' statement
  136                       | CASE • expression_list ':'

    APPEND      shift, and go to state 48
    LEN         shift, and go to state 49
    LPAREN      shift, and go to state 53
    BOOLEAN     shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57
    STRING      shift, and go to state 58
    FLOAT       shift, and go to state 59

    expression_list     go to state 253
    expression          go to state 182
    primary_expression  go to state 65
    literal             go to state 66
    binary_op           go to state 67
    builtin             go to state 68


State 240

  137 expression_case_clause: DEFAULT • ':' statement
  138                       | DEFAULT • ':'
  139                       | DEFAULT •

    ':'  shift, and go to state 254

    $default  reduce using rule 139 (expression_case_clause)


State 241

  130 expression_switch_stmt: SWITCH switch_on LBRACE expression_case_clause_list RBRACE •

    $default  reduce using rule 130 (expression_switch_stmt)


State 242

  141 expression_case_clause_list: expression_case_clause_list expression_case_clause •

    $default  reduce using rule 141 (expression_case_clause_list)


State 243

   19 declaration: IDENTIFIER INT_TYPE ASSIGN expression_list •

    $default  reduce using rule 19 (declaration)


State 244

   21 declaration: IDENTIFIER STRING_TYPE ASSIGN expression_list •

    $default  reduce using rule 21 (declaration)


State 245

   59 binary_op: expression • LOGICAL_OR expression
   60          | expression • LOGICAL_AND expression
   61          | expression • EQUAL_EQUAL expression
   62          | expression • NOT_EQUAL expression
   63          | expression • LESS_THAN_OR_EQUAL expression
   64          | expression • GREATER_THAN_OR_EQUAL expression
   65          | expression • LESS_THAN expression
   66          | expression • GREATER_THAN expression
   67          | expression • PLUS expression
   68          | expression • MINUS expression
   69          | expression • BITWISE_OR expression
   70          | expression • BITWISE_XOR expression
   71          | expression • TIMES expression
   72          | expression • DIVIDE expression
   73          | expression • MODULO expression
   74          | expression • RIGHT_SHIFT expression
   75          | expression • LEFT_SHIFT expression
   76          | expression • BITWISE_AND expression
   77          | expression • BIT_CLEAR expression
   78 builtin: APPEND LPAREN expression COMMA expression • RPAREN

    PLUS                   shift, and go to state 115
    MINUS                  shift, and go to state 116
    TIMES                  shift, and go to state 117
    DIVIDE                 shift, and go to state 118
    MODULO                 shift, and go to state 119
    BITWISE_AND            shift, and go to state 120
    BITWISE_OR             shift, and go to state 121
    BITWISE_XOR            shift, and go to state 122
    BIT_CLEAR              shift, and go to state 123
    LEFT_SHIFT             shift, and go to state 124
    RIGHT_SHIFT            shift, and go to state 125
    EQUAL_EQUAL            shift, and go to state 139
    NOT_EQUAL              shift, and go to state 140
    LESS_THAN              shift, and go to state 141
    LESS_THAN_OR_EQUAL     shift, and go to state 142
    GREATER_THAN           shift, and go to state 143
    GREATER_THAN_OR_EQUAL  shift, and go to state 144
    LOGICAL_AND            shift, and go to state 145
    LOGICAL_OR             shift, and go to state 146
    RPAREN                 shift, and go to state 255


State 246

   28 type_declaration: IDENTIFIER STRUCT LBRACE declaration_list • RBRACE

    RBRACE  shift, and go to state 256


State 247

   16 declaration_list: declaration • declaration_list

    IDENTIFIER  shift, and go to state 102

    $default  reduce using rule 15 (declaration_list)

    declaration_list  go to state 257
    declaration       go to state 247
    identifier_list   go to state 104


State 248

   27 type_declaration: IDENTIFIER LPAREN IDENTIFIER RPAREN •

    $default  reduce using rule 27 (type_declaration)


State 249

   30 type_declaration: IDENTIFIER bracket_list STRUCT LBRACE • declaration_list RBRACE

    IDENTIFIER  shift, and go to state 102

    $default  reduce using rule 15 (declaration_list)

    declaration_list  go to state 258
    declaration       go to state 247
    identifier_list   go to state 104


State 250

  126 if_stmt: IF simple_stmt expression block_stmt ELSE block_stmt •

    $default  reduce using rule 126 (if_stmt)


State 251

  125 if_stmt: IF simple_stmt expression block_stmt ELSE if_stmt •

    $default  reduce using rule 125 (if_stmt)


State 252

  146 for_clause: simple_stmt SEMICOLON expression SEMICOLON simple_stmt •

    $default  reduce using rule 146 (for_clause)


State 253

  135 expression_case_clause: CASE expression_list • ':' statement
  136                       | CASE expression_list • ':'

    ':'  shift, and go to state 259


State 254

  137 expression_case_clause: DEFAULT ':' • statement
  138                       | DEFAULT ':' •

    IF          shift, and go to state 41
    FOR         shift, and go to state 42
    SWITCH      shift, and go to state 43
    BREAK       shift, and go to state 44
    CONTINUE    shift, and go to state 45
    RETURN      shift, and go to state 46
    VAR         shift, and go to state 47
    APPEND      shift, and go to state 48
    LEN         shift, and go to state 49
    PRINT       shift, and go to state 50
    PRINTLN     shift, and go to state 51
    TYPE        shift, and go to state 52
    LPAREN      shift, and go to state 53
    LBRACE      shift, and go to state 31
    BOOLEAN     shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57
    STRING      shift, and go to state 58
    FLOAT       shift, and go to state 59
    COMMENT     shift, and go to state 60

    IF          [reduce using rule 95 (simple_stmt)]
    FOR         [reduce using rule 95 (simple_stmt)]
    SWITCH      [reduce using rule 95 (simple_stmt)]
    CASE        reduce using rule 92 (statement)
    CASE        [reduce using rule 95 (simple_stmt)]
    CASE        [reduce using rule 138 (expression_case_clause)]
    DEFAULT     reduce using rule 92 (statement)
    DEFAULT     [reduce using rule 95 (simple_stmt)]
    DEFAULT     [reduce using rule 138 (expression_case_clause)]
    BREAK       [reduce using rule 95 (simple_stmt)]
    CONTINUE    [reduce using rule 95 (simple_stmt)]
    RETURN      [reduce using rule 95 (simple_stmt)]
    VAR         [reduce using rule 95 (simple_stmt)]
    APPEND      [reduce using rule 95 (simple_stmt)]
    LEN         [reduce using rule 95 (simple_stmt)]
    PRINT       [reduce using rule 95 (simple_stmt)]
    PRINTLN     [reduce using rule 95 (simple_stmt)]
    TYPE        [reduce using rule 95 (simple_stmt)]
    LPAREN      [reduce using rule 95 (simple_stmt)]
    LBRACE      [reduce using rule 95 (simple_stmt)]
    RBRACE      reduce using rule 92 (statement)
    RBRACE      [reduce using rule 95 (simple_stmt)]
    RBRACE      [reduce using rule 138 (expression_case_clause)]
    BOOLEAN     [reduce using rule 95 (simple_stmt)]
    IDENTIFIER  [reduce using rule 95 (simple_stmt)]
    INTEGER     [reduce using rule 95 (simple_stmt)]
    STRING      [reduce using rule 95 (simple_stmt)]
    FLOAT       [reduce using rule 95 (simple_stmt)]
    COMMENT     [reduce using rule 95 (simple_stmt)]
    $default    reduce using rule 92 (statement)

    var_declarations            go to state 61
    type_declarations           go to state 62
    expression_list             go to state 63
    expression                  go to state 64
    primary_expression          go to state 65
    literal                     go to state 66
    binary_op                   go to state 67
    builtin                     go to state 68
    statement                   go to state 260
    declaration_stmt            go to state 70
    simple_stmt                 go to state 71
    inc_dec_stmt                go to state 72
    assignment                  go to state 73
    short_variable_declaration  go to state 74
    return_stmt                 go to state 75
    break_stmt                  go to state 76
    continue_stmt               go to state 77
    block_stmt                  go to state 78
    if_stmt                     go to state 79
    switch_stmt                 go to state 80
    expression_switch_stmt      go to state 81
    for_stmt                    go to state 82
    print_stmt                  go to state 83
    println_stmt                go to state 84


State 255

   78 builtin: APPEND LPAREN expression COMMA expression RPAREN •

    $default  reduce using rule 78 (builtin)


State 256

   28 type_declaration: IDENTIFIER STRUCT LBRACE declaration_list RBRACE •

    $default  reduce using rule 28 (type_declaration)


State 257

   16 declaration_list: declaration declaration_list •

    $default  reduce using rule 16 (declaration_list)


State 258

   30 type_declaration: IDENTIFIER bracket_list STRUCT LBRACE declaration_list • RBRACE

    RBRACE  shift, and go to state 261


State 259

  135 expression_case_clause: CASE expression_list ':' • statement
  136                       | CASE expression_list ':' •

    IF          shift, and go to state 41
    FOR         shift, and go to state 42
    SWITCH      shift, and go to state 43
    BREAK       shift, and go to state 44
    CONTINUE    shift, and go to state 45
    RETURN      shift, and go to state 46
    VAR         shift, and go to state 47
    APPEND      shift, and go to state 48
    LEN         shift, and go to state 49
    PRINT       shift, and go to state 50
    PRINTLN     shift, and go to state 51
    TYPE        shift, and go to state 52
    LPAREN      shift, and go to state 53
    LBRACE      shift, and go to state 31
    BOOLEAN     shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57
    STRING      shift, and go to state 58
    FLOAT       shift, and go to state 59
    COMMENT     shift, and go to state 60

    IF          [reduce using rule 95 (simple_stmt)]
    FOR         [reduce using rule 95 (simple_stmt)]
    SWITCH      [reduce using rule 95 (simple_stmt)]
    CASE        reduce using rule 92 (statement)
    CASE        [reduce using rule 95 (simple_stmt)]
    CASE        [reduce using rule 136 (expression_case_clause)]
    DEFAULT     reduce using rule 92 (statement)
    DEFAULT     [reduce using rule 95 (simple_stmt)]
    DEFAULT     [reduce using rule 136 (expression_case_clause)]
    BREAK       [reduce using rule 95 (simple_stmt)]
    CONTINUE    [reduce using rule 95 (simple_stmt)]
    RETURN      [reduce using rule 95 (simple_stmt)]
    VAR         [reduce using rule 95 (simple_stmt)]
    APPEND      [reduce using rule 95 (simple_stmt)]
    LEN         [reduce using rule 95 (simple_stmt)]
    PRINT       [reduce using rule 95 (simple_stmt)]
    PRINTLN     [reduce using rule 95 (simple_stmt)]
    TYPE        [reduce using rule 95 (simple_stmt)]
    LPAREN      [reduce using rule 95 (simple_stmt)]
    LBRACE      [reduce using rule 95 (simple_stmt)]
    RBRACE      reduce using rule 92 (statement)
    RBRACE      [reduce using rule 95 (simple_stmt)]
    RBRACE      [reduce using rule 136 (expression_case_clause)]
    BOOLEAN     [reduce using rule 95 (simple_stmt)]
    IDENTIFIER  [reduce using rule 95 (simple_stmt)]
    INTEGER     [reduce using rule 95 (simple_stmt)]
    STRING      [reduce using rule 95 (simple_stmt)]
    FLOAT       [reduce using rule 95 (simple_stmt)]
    COMMENT     [reduce using rule 95 (simple_stmt)]
    $default    reduce using rule 92 (statement)

    var_declarations            go to state 61
    type_declarations           go to state 62
    expression_list             go to state 63
    expression                  go to state 64
    primary_expression          go to state 65
    literal                     go to state 66
    binary_op                   go to state 67
    builtin                     go to state 68
    statement                   go to state 262
    declaration_stmt            go to state 70
    simple_stmt                 go to state 71
    inc_dec_stmt                go to state 72
    assignment                  go to state 73
    short_variable_declaration  go to state 74
    return_stmt                 go to state 75
    break_stmt                  go to state 76
    continue_stmt               go to state 77
    block_stmt                  go to state 78
    if_stmt                     go to state 79
    switch_stmt                 go to state 80
    expression_switch_stmt      go to state 81
    for_stmt                    go to state 82
    print_stmt                  go to state 83
    println_stmt                go to state 84


State 260

  137 expression_case_clause: DEFAULT ':' statement •

    $default  reduce using rule 137 (expression_case_clause)


State 261

   30 type_declaration: IDENTIFIER bracket_list STRUCT LBRACE declaration_list RBRACE •

    $default  reduce using rule 30 (type_declaration)


State 262

  135 expression_case_clause: CASE expression_list ':' statement •

    $default  reduce using rule 135 (expression_case_clause)
